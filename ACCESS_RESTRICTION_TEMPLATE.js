/**
 * Template d'Access Restriction pour Discord Bot
 * Ce fichier contient les modÃ¨les de code pour implÃ©menter
 * le systÃ¨me de restrictions d'accÃ¨s dans tous les composants du bot
 * 
 * Date: 27 AoÃ»t 2025
 * SystÃ¨me: Restrictions d'accÃ¨s multi-niveaux
 * Document de rÃ©fÃ©rence: IT/DISC/2025/007-R
 */

// ==========================================
// 1. UTILITAIRE ACCESS RESTRICTION DE BASE
// ==========================================

import { EmbedBuilder } from 'discord.js';
import fs from 'fs';
import path from 'path';

/**
 * Classe utilitaire pour gÃ©rer les restrictions d'accÃ¨s
 */
export class AccessRestriction {
    // RÃ´les bloquÃ©s - Ã  personnaliser selon vos besoins
    static BLOCKED_ROLES = [
        "1388265895264129157",
        "1387716580451815464", 
        "1386784012269387946",
        "1393943850455928852",
        "1387717023928418305",
        "1387536419588931616"
    ];

    // Utilisateurs autorisÃ©s - Ã  personnaliser
    static ALLOWED_USERS = [
        "421245210220298240" // AidoTokihisa
    ];

    /**
     * VÃ©rifie l'accÃ¨s d'un utilisateur basÃ© sur ses rÃ´les
     */
    static checkAccess(interaction) {
        const userId = interaction.user.id;
        
        // Utilisateurs autorisÃ©s passent toujours
        if (this.ALLOWED_USERS.includes(userId)) {
            return { allowed: true };
        }

        // VÃ©rifier les rÃ´les bloquÃ©s
        if (interaction.member && interaction.member.roles) {
            const userRoles = interaction.member.roles.cache.map(role => role.id);
            const hasBlockedRole = userRoles.some(roleId => this.BLOCKED_ROLES.includes(roleId));
            
            if (hasBlockedRole) {
                this.logRestrictedAccess(interaction);
                return { 
                    allowed: false, 
                    reason: 'blocked_role',
                    message: this.getRestrictionMessage() 
                };
            }
        }

        return { allowed: true };
    }

    /**
     * VÃ©rifie l'accÃ¨s pour un utilisateur spÃ©cifique
     */
    static checkUserAccess(user, member) {
        const userId = user.id;
        
        if (this.ALLOWED_USERS.includes(userId)) {
            return { allowed: true };
        }

        if (member && member.roles) {
            const userRoles = member.roles.cache.map(role => role.id);
            const hasBlockedRole = userRoles.some(roleId => this.BLOCKED_ROLES.includes(roleId));
            
            if (hasBlockedRole) {
                return { 
                    allowed: false, 
                    reason: 'blocked_role',
                    message: this.getRestrictionMessage() 
                };
            }
        }

        return { allowed: true };
    }

    /**
     * Message de restriction professionnel
     */
    static getRestrictionMessage() {
        const embed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('ðŸš« Service Temporairement Indisponible')
            .setDescription('**DÃ©commissionnement en cours**\n\nConformÃ©ment au document **IT/DISC/2025/007-R**, ce service est actuellement en cours de dÃ©commissionnement et n\'est plus accessible.')
            .addFields(
                { 
                    name: 'ðŸ“‹ Statut', 
                    value: 'Service suspendu', 
                    inline: true 
                },
                { 
                    name: 'ðŸ“… Date', 
                    value: '27 AoÃ»t 2025', 
                    inline: true 
                },
                { 
                    name: 'ðŸ”’ RGPD', 
                    value: 'Vos donnÃ©es sont protÃ©gÃ©es conformÃ©ment au RGPD', 
                    inline: false 
                }
            )
            .setFooter({ 
                text: 'RÃ©fÃ©rence: IT/DISC/2025/007-R | Contact: Administration' 
            })
            .setTimestamp();

        return embed;
    }

    /**
     * Envoie le message de restriction
     */
    static async sendRestrictionMessage(interaction) {
        const embed = this.getRestrictionMessage();
        
        if (interaction.deferred || interaction.replied) {
            await interaction.editReply({ embeds: [embed], ephemeral: true });
        } else {
            await interaction.reply({ embeds: [embed], ephemeral: true });
        }
    }

    /**
     * Log des tentatives d'accÃ¨s restreintes
     */
    static logRestrictedAccess(interaction) {
        const logMessage = `[${new Date().toISOString()}] AccÃ¨s refusÃ© - Utilisateur: ${interaction.user.username} (${interaction.user.id}) - Commande: ${interaction.commandName || 'Unknown'}`;
        
        console.log(`ðŸš« ${logMessage}`);
        
        // Log dans fichier
        const logDir = path.join(process.cwd(), 'logs');
        if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir, { recursive: true });
        }
        
        const logFile = path.join(logDir, `bot-${new Date().toISOString().split('T')[0]}.log`);
        fs.appendFileSync(logFile, logMessage + '\n');
    }
}

// ==========================================
// 2. TEMPLATE POUR COMMANDES SLASH
// ==========================================

/*
// Exemple d'implÃ©mentation dans une commande
import { AccessRestriction } from '../utils/AccessRestriction.js';

export default {
    data: new SlashCommandBuilder()
        .setName('exemple')
        .setDescription('Commande d\'exemple'),
    
    async execute(interaction) {
        // VÃ‰RIFICATION D'ACCÃˆS - Ã€ AJOUTER AU DÃ‰BUT
        const accessCheck = AccessRestriction.checkAccess(interaction);
        if (!accessCheck.allowed) {
            await AccessRestriction.sendRestrictionMessage(interaction);
            return;
        }
        
        // Votre code de commande ici...
        await interaction.reply('Commande exÃ©cutÃ©e avec succÃ¨s !');
    }
};
*/

// ==========================================
// 3. TEMPLATE POUR BUTTON HANDLERS
// ==========================================

/*
// Exemple d'implÃ©mentation dans un handler de bouton
import { AccessRestriction } from '../utils/AccessRestriction.js';

export class ExempleButtonHandler {
    static async handle(interaction) {
        // VÃ‰RIFICATION D'ACCÃˆS - Ã€ AJOUTER AU DÃ‰BUT
        const accessCheck = AccessRestriction.checkAccess(interaction);
        if (!accessCheck.allowed) {
            await AccessRestriction.sendRestrictionMessage(interaction);
            return;
        }
        
        // Votre code de handler ici...
        await interaction.reply({ content: 'Bouton traitÃ© !', ephemeral: true });
    }
}
*/

// ==========================================
// 4. TEMPLATE POUR MODAL HANDLERS
// ==========================================

/*
// Exemple d'implÃ©mentation dans un handler de modal
import { AccessRestriction } from '../utils/AccessRestriction.js';

export class ExempleModalHandler {
    static async handle(interaction) {
        // VÃ‰RIFICATION D'ACCÃˆS - Ã€ AJOUTER AU DÃ‰BUT
        const accessCheck = AccessRestriction.checkAccess(interaction);
        if (!accessCheck.allowed) {
            await AccessRestriction.sendRestrictionMessage(interaction);
            return;
        }
        
        // Votre code de modal ici...
        const input = interaction.fields.getTextInputValue('input_id');
        await interaction.reply({ content: `Modal traitÃ©: ${input}`, ephemeral: true });
    }
}
*/

// ==========================================
// 5. TEMPLATE POUR EVENTS
// ==========================================

/*
// Exemple d'implÃ©mentation dans interactionCreate.js
import { AccessRestriction } from '../utils/AccessRestriction.js';

export default {
    name: 'interactionCreate',
    async execute(interaction) {
        // VÃ‰RIFICATION GLOBALE - PROTECTION DE PREMIER NIVEAU
        const accessCheck = AccessRestriction.checkAccess(interaction);
        if (!accessCheck.allowed) {
            await AccessRestriction.sendRestrictionMessage(interaction);
            return;
        }
        
        // Votre code d'event ici...
        if (interaction.isCommand()) {
            // Traitement des commandes...
        }
    }
};
*/

// ==========================================
// 6. TEMPLATE POUR MANAGERS
// ==========================================

/*
// Exemple d'implÃ©mentation dans un manager
import { AccessRestriction } from '../utils/AccessRestriction.js';

export class ExempleManager {
    static async handleAction(interaction, options = {}) {
        // VÃ‰RIFICATION D'ACCÃˆS - PROTECTION DE NIVEAU MANAGER
        const accessCheck = AccessRestriction.checkAccess(interaction);
        if (!accessCheck.allowed) {
            await AccessRestriction.sendRestrictionMessage(interaction);
            return false;
        }
        
        // Votre code de manager ici...
        console.log('Action du manager exÃ©cutÃ©e');
        return true;
    }
}
*/

// ==========================================
// 7. CONFIGURATION PERSONNALISABLE
// ==========================================

/*
// Pour personnaliser les restrictions, modifiez ces constantes :

// RÃ´les Ã  bloquer (remplacez par vos IDs de rÃ´les)
const CUSTOM_BLOCKED_ROLES = [
    "VOTRE_ROLE_ID_1",
    "VOTRE_ROLE_ID_2",
    "VOTRE_ROLE_ID_3"
];

// Utilisateurs autorisÃ©s (remplacez par vos IDs d'utilisateurs)
const CUSTOM_ALLOWED_USERS = [
    "VOTRE_USER_ID_1",
    "VOTRE_USER_ID_2"
];

// Message personnalisÃ©
const CUSTOM_RESTRICTION_MESSAGE = {
    title: "Votre titre personnalisÃ©",
    description: "Votre description personnalisÃ©e",
    color: '#ff0000' // Rouge
};
*/

// ==========================================
// 8. NOTES D'IMPLÃ‰MENTATION
// ==========================================

/*
Ã‰TAPES POUR IMPLÃ‰MENTER LE SYSTÃˆME :

1. CrÃ©er le fichier utils/AccessRestriction.js avec la classe principale
2. Importer AccessRestriction dans tous vos fichiers de commandes
3. Ajouter la vÃ©rification au dÃ©but de chaque fonction execute()
4. Importer dans tous vos handlers (Button, Modal, etc.)
5. Ajouter la vÃ©rification dans interactionCreate.js pour protection globale
6. Tester le systÃ¨me avec un utilisateur ayant un rÃ´le bloquÃ©
7. VÃ©rifier les logs pour confirmer le bon fonctionnement

BONNES PRATIQUES :
- Toujours vÃ©rifier l'accÃ¨s avant toute action
- Utiliser des rÃ©ponses ephemeral pour les messages de restriction
- Logger toutes les tentatives d'accÃ¨s bloquÃ©es
- Maintenir la liste des rÃ´les/utilisateurs Ã  jour
- Tester rÃ©guliÃ¨rement le systÃ¨me
*/

export default AccessRestriction;