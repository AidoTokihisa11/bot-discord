import { Client, GatewayIntentBits, REST, Routes } from 'discord.js';
import { config } from 'dotenv';
import MusicManager from './src/managers/MusicManager.js';

config();

// Test du syst√®me de musique
async function testMusicSystem() {
    console.log('üéµ Test du syst√®me de musique...\n');
    
    // Test 1: V√©rifier que MusicManager existe
    console.log('‚úÖ Test 1: MusicManager charg√©');
    console.log('   - M√©thodes disponibles:', Object.getOwnPropertyNames(Object.getPrototypeOf(MusicManager)));
    
    // Test 2: Cr√©er une queue de test
    const testGuildId = '123456789';
    const queue = MusicManager.getQueue(testGuildId);
    console.log('‚úÖ Test 2: Queue cr√©√©e');
    console.log('   - Queue initiale:', queue);
    
    // Test 3: Tester le formatage de dur√©e
    const testDurations = [60, 3661, 7260];
    console.log('‚úÖ Test 3: Formatage des dur√©es');
    testDurations.forEach(seconds => {
        console.log(`   - ${seconds}s = ${MusicManager.formatDuration(seconds)}`);
    });
    
    // Test 4: Tester les m√©thodes de queue
    console.log('‚úÖ Test 4: M√©thodes de queue');
    console.log(`   - Queue connect√©e: ${MusicManager.isConnected(testGuildId)}`);
    console.log(`   - Musique actuelle: ${MusicManager.getCurrentSong(testGuildId)}`);
    
    // Test 5: V√©rifier les d√©pendances
    console.log('‚úÖ Test 5: V√©rification des d√©pendances');
    try {
        const voice = await import('@discordjs/voice');
        console.log('   - @discordjs/voice: ‚úÖ');
    } catch (error) {
        console.log('   - @discordjs/voice: ‚ùå', error.message);
    }
    
    try {
        const playDl = await import('play-dl');
        console.log('   - play-dl: ‚úÖ');
    } catch (error) {
        console.log('   - play-dl: ‚ùå', error.message);
    }
    
    console.log('\nüéâ Tests termin√©s !');
}

// Test des commandes de musique
async function testMusicCommands() {
    console.log('\nüéÆ Test des commandes de musique...\n');
    
    const commands = [
        'play', 'skip', 'stop', 'pause', 'resume', 
        'queue', 'nowplaying', 'disconnect', 'shuffle', 
        'loop', 'remove', 'join', 'clear', 'music-help'
    ];
    
    for (const commandName of commands) {
        try {
            const command = await import(`./src/commands/music/${commandName}.js`);
            const commandData = command.default;
            
            if ('data' in commandData && 'execute' in commandData) {
                console.log(`‚úÖ ${commandName.padEnd(12)} - Nom: ${commandData.data.name}`);
            } else {
                console.log(`‚ùå ${commandName.padEnd(12)} - Manque 'data' ou 'execute'`);
            }
        } catch (error) {
            console.log(`‚ùå ${commandName.padEnd(12)} - Erreur: ${error.message}`);
        }
    }
}

// Ex√©cuter les tests
async function runTests() {
    try {
        await testMusicSystem();
        await testMusicCommands();
        
        console.log('\nüöÄ Syst√®me de musique pr√™t pour le d√©ploiement !');
        console.log('\nPour d√©ployer les commandes, utilisez :');
        console.log('npm run deploy');
        
    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error);
    }
}

runTests();
