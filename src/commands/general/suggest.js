import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } from 'discord.js';

import AccessRestriction from '../../utils/AccessRestriction.js';
export default {
    data: new SlashCommandBuilder()
        .setName('suggest')
        .setDescription('üí° Proposer des am√©liorations pour Team7 Bot')
        .addStringOption(option =>
            option.setName('type')
                .setDescription('Type de suggestion')
                .addChoices(
                    { name: '‚ú® Nouvelle fonctionnalit√©', value: 'feature' },
                    { name: 'üîß Am√©lioration existante', value: 'improvement' },
                    { name: 'üé® Interface utilisateur', value: 'ui' },
                    { name: '‚ö° Performance', value: 'performance' },
                    { name: 'üîó Int√©gration', value: 'integration' },
                    { name: 'üìö Documentation', value: 'documentation' }
                )
                .setRequired(false)
        )
        .addStringOption(option =>
            option.setName('titre')
                .setDescription('Titre court de votre suggestion')
                .setMaxLength(100)
                .setRequired(false)
        )
        .addStringOption(option =>
            option.setName('description')
                .setDescription('Description d√©taill√©e de votre suggestion')
                .setMaxLength(1000)
                .setRequired(false)
        ),

    async execute(interaction) {
        // === V√âRIFICATION D'ACC√àS GLOBALE ===
        const accessRestriction = new AccessRestriction();
        const hasAccess = await accessRestriction.checkAccess(interaction);
        if (!hasAccess) {
            return; // Acc√®s refus√©, message d√©j√† envoy√©
        }


        const type = interaction.options.getString('type');
        const titre = interaction.options.getString('titre');
        const description = interaction.options.getString('description');
        
        if (type && titre && description) {
            // Suggestion directe
            await this.handleDirectSuggestion(interaction, type, titre, description);
        } else if (type) {
            // Afficher le formulaire pour le type sp√©cifique
            await this.showTypeSpecificForm(interaction, type);
        } else {
            // Menu principal des suggestions
            await this.showSuggestionMenu(interaction);
        }
    },

    async showSuggestionMenu(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üí° **CENTRE DE SUGGESTIONS TEAM7**')
            .setDescription('**Votre feedback fa√ßonne l\'avenir de Team7 Bot**\n\n*Aidez-nous √† am√©liorer votre exp√©rience en proposant vos id√©es !*')
            .addFields(
                {
                    name: '‚ú® **Nouvelles fonctionnalit√©s**',
                    value: '‚Ä¢ Commandes in√©dites\n‚Ä¢ Outils innovants\n‚Ä¢ M√©caniques de jeu\n‚Ä¢ Int√©grations services tiers\n‚Ä¢ Automatisations avanc√©es',
                    inline: true
                },
                {
                    name: 'üîß **Am√©liorations existantes**',
                    value: '‚Ä¢ Optimisation commandes\n‚Ä¢ Nouvelles options\n‚Ä¢ Personnalisation pouss√©e\n‚Ä¢ Ergonomie am√©lior√©e\n‚Ä¢ Fonctionnalit√©s √©tendues',
                    inline: true
                },
                {
                    name: 'üé® **Interface utilisateur**',
                    value: '‚Ä¢ Design des embeds\n‚Ä¢ Navigation intuitive\n‚Ä¢ Boutons interactifs\n‚Ä¢ Menus d√©roulants\n‚Ä¢ Exp√©rience visuelle',
                    inline: true
                },
                {
                    name: '‚ö° **Performance & Technique**',
                    value: '‚Ä¢ Vitesse d\'ex√©cution\n‚Ä¢ Optimisation m√©moire\n‚Ä¢ R√©duction latence\n‚Ä¢ Stabilit√© syst√®me\n‚Ä¢ Efficacit√© √©nerg√©tique',
                    inline: true
                },
                {
                    name: 'üîó **Int√©grations**',
                    value: '‚Ä¢ API externes\n‚Ä¢ Services populaires\n‚Ä¢ Webhooks avanc√©s\n‚Ä¢ Synchronisation donn√©es\n‚Ä¢ √âcosyst√®me √©tendu',
                    inline: true
                },
                {
                    name: 'üìö **Documentation**',
                    value: '‚Ä¢ Guides utilisateur\n‚Ä¢ Tutoriels vid√©o\n‚Ä¢ FAQ d√©taill√©e\n‚Ä¢ Exemples pratiques\n‚Ä¢ Aide contextuelle',
                    inline: true
                },
                {
                    name: 'üèÜ **Programme Contributeur**',
                    value: `**Avantages exclusifs :**\n‚Ä¢ Badge "Contributeur Team7"\n‚Ä¢ Acc√®s prioritaire aux b√™ta\n‚Ä¢ Mention dans les changelogs\n‚Ä¢ Consultation avant releases\n‚Ä¢ R√©compenses sp√©ciales`,
                    inline: false
                },
                {
                    name: 'üìä **Processus d\'√©valuation**',
                    value: `**1.** R√©ception et accus√© (imm√©diat)\n**2.** √âvaluation technique (48h)\n**3.** Vote communaut√© (7 jours)\n**4.** Priorisation roadmap (mensuel)\n**5.** D√©veloppement et release`,
                    inline: false
                }
            )
            .setColor('#9b59b6')
            .setThumbnail('https://i.imgur.com/s74nSIc.png')
            .setImage('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: 'Team7 Bot - Centre de suggestions ‚Ä¢ Innovation collaborative',
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        const actionRow1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_feature')
                    .setLabel('‚ú® Nouvelle fonctionnalit√©')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('suggest_improvement')
                    .setLabel('üîß Am√©lioration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('suggest_ui')
                    .setLabel('üé® Interface')
                    .setStyle(ButtonStyle.Secondary)
            );

        const actionRow2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_performance')
                    .setLabel('‚ö° Performance')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_integration')
                    .setLabel('üîó Int√©gration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('suggest_documentation')
                    .setLabel('üìö Documentation')
                    .setStyle(ButtonStyle.Secondary)
            );

        const actionRow3 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_roadmap')
                    .setLabel('üó∫Ô∏è Voir la roadmap')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_popular')
                    .setLabel('üî• Suggestions populaires')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('suggest_my_suggestions')
                    .setLabel('üìã Mes suggestions')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [actionRow1, actionRow2, actionRow3],
            ephemeral: false
        });
    },

    async showTypeSpecificForm(interaction, type) {
        let embed;
        let components = [];

        switch (type) {
            case 'feature':
                embed = this.createFeatureEmbed();
                components = [this.createFeatureButtons()];
                break;
            case 'improvement':
                embed = this.createImprovementEmbed();
                components = [this.createImprovementButtons()];
                break;
            case 'ui':
                embed = this.createUIEmbed();
                components = [this.createUIButtons()];
                break;
            case 'performance':
                embed = this.createPerformanceEmbed();
                components = [this.createPerformanceButtons()];
                break;
            case 'integration':
                embed = this.createIntegrationEmbed();
                components = [this.createIntegrationButtons()];
                break;
            case 'documentation':
                embed = this.createDocumentationEmbed();
                components = [this.createDocumentationButtons()];
                break;
        }

        await interaction.reply({
            embeds: [embed],
            components: components,
            ephemeral: true
        });
    },

    async handleDirectSuggestion(interaction, type, titre, description) {
        // Simuler l'enregistrement de la suggestion
        const suggestionId = Date.now().toString(36) + Math.random().toString(36).substr(2);
        
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ **SUGGESTION ENREGISTR√âE**')
            .setDescription('**Merci pour votre contribution !**')
            .addFields(
                {
                    name: 'üìã **D√©tails de votre suggestion**',
                    value: `**Type :** ${this.getTypeLabel(type)}\n**Titre :** ${titre}\n**ID :** \`${suggestionId}\``,
                    inline: false
                },
                {
                    name: 'üìù **Description**',
                    value: description,
                    inline: false
                },
                {
                    name: 'üîÑ **Prochaines √©tapes**',
                    value: `‚Ä¢ **√âvaluation technique** : 48h\n‚Ä¢ **Review communaut√©** : 7 jours\n‚Ä¢ **D√©cision finale** : 14 jours\n‚Ä¢ **Notification** : Automatique`,
                    inline: true
                },
                {
                    name: 'üìä **Suivi**',
                    value: `Utilisez \`/suggest-status ${suggestionId}\` pour suivre l'avancement de votre suggestion.`,
                    inline: true
                }
            )
            .setColor('#27ae60')
            .setThumbnail('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: `Suggestion ${suggestionId} ‚Ä¢ Team7 Bot`,
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`suggest_vote_${suggestionId}`)
                    .setLabel('üëç Voter pour cette suggestion')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`suggest_share_${suggestionId}`)
                    .setLabel('üì§ Partager')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_new')
                    .setLabel('üí° Nouvelle suggestion')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [actionRow],
            ephemeral: false
        });
    },

    createFeatureEmbed() {
        return new EmbedBuilder()
            .setTitle('‚ú® **NOUVELLE FONCTIONNALIT√â**')
            .setDescription('**Proposez une fonctionnalit√© in√©dite**')
            .addFields(
                {
                    name: 'üí≠ **Id√©es populaires**',
                    value: `‚Ä¢ **Mini-jeux** : Quiz, devinettes, concours\n‚Ä¢ **√âconomie virtuelle** : Monnaie, boutique, √©changes\n‚Ä¢ **IA conversationnelle** : Chatbot intelligent\n‚Ä¢ **Musique** : Player, playlists, radios\n‚Ä¢ **R√©seaux sociaux** : Twitter, Instagram, TikTok`,
                    inline: false
                },
                {
                    name: 'üìã **Informations √† fournir**',
                    value: `‚Ä¢ **Nom de la fonctionnalit√©**\n‚Ä¢ **Description d√©taill√©e**\n‚Ä¢ **Cas d'usage concrets**\n‚Ä¢ **B√©n√©fices attendus**\n‚Ä¢ **Exemples de commandes**\n‚Ä¢ **Int√©grations n√©cessaires**`,
                    inline: true
                },
                {
                    name: 'üéØ **Crit√®res d\'√©valuation**',
                    value: `‚Ä¢ **Originalit√©** : Innovation\n‚Ä¢ **Utilit√©** : Valeur ajout√©e\n‚Ä¢ **Faisabilit√©** : Complexit√© technique\n‚Ä¢ **Demande** : Int√©r√™t communaut√©\n‚Ä¢ **Coh√©rence** : Avec l'√©cosyst√®me`,
                    inline: true
                }
            )
            .setColor('#f1c40f')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createImprovementEmbed() {
        return new EmbedBuilder()
            .setTitle('üîß **AM√âLIORATION EXISTANTE**')
            .setDescription('**Optimisez les fonctionnalit√©s actuelles**')
            .addFields(
                {
                    name: 'üéØ **Domaines d\'am√©lioration**',
                    value: `‚Ä¢ **Commandes** : Nouvelles options, param√®tres\n‚Ä¢ **Interfaces** : Meilleure ergonomie\n‚Ä¢ **Performances** : Vitesse, stabilit√©\n‚Ä¢ **Personnalisation** : Options avanc√©es\n‚Ä¢ **Accessibilit√©** : Facilit√© d'usage`,
                    inline: false
                },
                {
                    name: 'üìù **Format de suggestion**',
                    value: `‚Ä¢ **Fonctionnalit√© concern√©e**\n‚Ä¢ **Probl√®me identifi√©**\n‚Ä¢ **Solution propos√©e**\n‚Ä¢ **Avantages attendus**\n‚Ä¢ **Impact utilisateur**`,
                    inline: true
                },
                {
                    name: '‚úÖ **Exemples r√©ussis**',
                    value: `‚Ä¢ Pagination dans l'historique\n‚Ä¢ Export multiple formats\n‚Ä¢ Boutons interactifs\n‚Ä¢ Configuration modulaire\n‚Ä¢ Notifications intelligentes`,
                    inline: true
                }
            )
            .setColor('#3498db')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createUIEmbed() {
        return new EmbedBuilder()
            .setTitle('üé® **INTERFACE UTILISATEUR**')
            .setDescription('**Am√©liorez l\'exp√©rience visuelle**')
            .addFields(
                {
                    name: 'üñºÔ∏è **√âl√©ments UI**',
                    value: `‚Ä¢ **Embeds** : Design, couleurs, layout\n‚Ä¢ **Boutons** : Style, organisation, labels\n‚Ä¢ **Menus** : Navigation, options\n‚Ä¢ **Modals** : Formulaires, saisie\n‚Ä¢ **R√©actions** : √âmojis, interactions`,
                    inline: false
                },
                {
                    name: 'üé® **Principes de design**',
                    value: `‚Ä¢ **Simplicit√©** : Interface √©pur√©e\n‚Ä¢ **Consistance** : Coh√©rence visuelle\n‚Ä¢ **Lisibilit√©** : Texte clair\n‚Ä¢ **Accessibilit√©** : Pour tous\n‚Ä¢ **Responsivit√©** : Multi-plateforme`,
                    inline: true
                },
                {
                    name: 'üí° **Suggestions appr√©ci√©es**',
                    value: `‚Ä¢ Th√®mes personnalisables\n‚Ä¢ Mode sombre/clair\n‚Ä¢ Ic√¥nes expressives\n‚Ä¢ Animations subtiles\n‚Ä¢ Feedback visuel`,
                    inline: true
                }
            )
            .setColor('#e91e63')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createPerformanceEmbed() {
        return new EmbedBuilder()
            .setTitle('‚ö° **PERFORMANCE & TECHNIQUE**')
            .setDescription('**Optimisez les performances du bot**')
            .addFields(
                {
                    name: 'üöÄ **Axes d\'optimisation**',
                    value: `‚Ä¢ **Vitesse** : Temps de r√©ponse r√©duit\n‚Ä¢ **M√©moire** : Usage RAM optimis√©\n‚Ä¢ **CPU** : Traitement efficace\n‚Ä¢ **R√©seau** : Bande passante\n‚Ä¢ **Base de donn√©es** : Requ√™tes optimis√©es`,
                    inline: false
                },
                {
                    name: 'üìä **M√©triques actuelles**',
                    value: `‚Ä¢ **Latence** : ~50ms moyenne\n‚Ä¢ **Uptime** : 99.9%\n‚Ä¢ **CPU** : 15% utilisation\n‚Ä¢ **RAM** : 512MB utilis√©s\n‚Ä¢ **Requ√™tes/min** : 1,500`,
                    inline: true
                },
                {
                    name: 'üéØ **Objectifs performance**',
                    value: `‚Ä¢ Latence < 30ms\n‚Ä¢ Uptime 99.99%\n‚Ä¢ Support 10k users\n‚Ä¢ Cache intelligent\n‚Ä¢ Scaling automatique`,
                    inline: true
                }
            )
            .setColor('#e67e22')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createIntegrationEmbed() {
        return new EmbedBuilder()
            .setTitle('üîó **INT√âGRATIONS**')
            .setDescription('**Connectez Team7 Bot √† l\'√©cosyst√®me**')
            .addFields(
                {
                    name: 'üåê **Services populaires**',
                    value: `‚Ä¢ **Social** : Twitter, Instagram, TikTok\n‚Ä¢ **Streaming** : Twitch, YouTube, Spotify\n‚Ä¢ **Productivit√©** : Google, Notion, Trello\n‚Ä¢ **Gaming** : Steam, Epic, Battle.net\n‚Ä¢ **E-commerce** : Amazon, PayPal`,
                    inline: false
                },
                {
                    name: 'üîß **Types d\'int√©gration**',
                    value: `‚Ä¢ **API REST** : Donn√©es temps r√©el\n‚Ä¢ **Webhooks** : Notifications\n‚Ä¢ **OAuth** : Authentification\n‚Ä¢ **WebSocket** : Communication\n‚Ä¢ **RSS/Atom** : Flux d'actualit√©s`,
                    inline: true
                },
                {
                    name: 'üí° **Exemples d\'usage**',
                    value: `‚Ä¢ Notifications tweets\n‚Ä¢ Stats de jeu\n‚Ä¢ Agenda partag√©\n‚Ä¢ Boutique int√©gr√©e\n‚Ä¢ Synchronisation playlists`,
                    inline: true
                }
            )
            .setColor('#16a085')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createDocumentationEmbed() {
        return new EmbedBuilder()
            .setTitle('üìö **DOCUMENTATION**')
            .setDescription('**Am√©liorez la documentation et l\'aide**')
            .addFields(
                {
                    name: 'üìñ **Types de documentation**',
                    value: `‚Ä¢ **Guides d√©butant** : Premiers pas\n‚Ä¢ **Tutoriels avanc√©s** : Fonctionnalit√©s\n‚Ä¢ **API docs** : D√©veloppeurs\n‚Ä¢ **FAQ** : Questions fr√©quentes\n‚Ä¢ **Troubleshooting** : R√©solution probl√®mes`,
                    inline: false
                },
                {
                    name: 'üé• **Formats multim√©dia**',
                    value: `‚Ä¢ **Guides texte** : √âtape par √©tape\n‚Ä¢ **Vid√©os** : D√©monstrations\n‚Ä¢ **GIFs** : Actions rapides\n‚Ä¢ **Infographies** : Sch√©mas\n‚Ä¢ **Aide interactive** : In-app`,
                    inline: true
                },
                {
                    name: 'üåü **Qualit√© souhait√©e**',
                    value: `‚Ä¢ Clart√© et simplicit√©\n‚Ä¢ Exemples concrets\n‚Ä¢ Mise √† jour r√©guli√®re\n‚Ä¢ Recherche int√©gr√©e\n‚Ä¢ Feedback utilisateur`,
                    inline: true
                }
            )
            .setColor('#8e44ad')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');
    },

    createFeatureButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_feature_form')
                    .setLabel('‚ú® Proposer une fonctionnalit√©')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('suggest_feature_ideas')
                    .setLabel('üí≠ Voir les id√©es')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_feature_vote')
                    .setLabel('üó≥Ô∏è Voter sur les propositions')
                    .setStyle(ButtonStyle.Primary)
            );
    },

    createImprovementButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_improvement_form')
                    .setLabel('üîß Proposer am√©lioration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('suggest_improvement_list')
                    .setLabel('üìã Am√©liorations en cours')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_improvement_priority')
                    .setLabel('‚≠ê Priorit√©s communaut√©')
                    .setStyle(ButtonStyle.Success)
            );
    },

    createUIButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_ui_form')
                    .setLabel('üé® Proposer design')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_ui_mockup')
                    .setLabel('üñºÔ∏è Partager mockup')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('suggest_ui_themes')
                    .setLabel('üåà Th√®mes communaut√©')
                    .setStyle(ButtonStyle.Primary)
            );
    },

    createPerformanceButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_performance_form')
                    .setLabel('‚ö° Proposer optimisation')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_performance_metrics')
                    .setLabel('üìä Voir m√©triques')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('suggest_performance_report')
                    .setLabel('üêõ Signaler lenteur')
                    .setStyle(ButtonStyle.Danger)
            );
    },

    createIntegrationButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_integration_form')
                    .setLabel('üîó Proposer int√©gration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('suggest_integration_popular')
                    .setLabel('üî• Int√©grations demand√©es')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('suggest_integration_api')
                    .setLabel('üõ†Ô∏è API disponibles')
                    .setStyle(ButtonStyle.Secondary)
            );
    },

    createDocumentationButtons() {
        return new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('suggest_doc_form')
                    .setLabel('üìö Proposer documentation')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('suggest_doc_missing')
                    .setLabel('‚ùì Signaler manque')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('suggest_doc_contribute')
                    .setLabel('‚úçÔ∏è Contribuer')
                    .setStyle(ButtonStyle.Success)
            );
    },

    getTypeLabel(type) {
        const labels = {
            'feature': '‚ú® Nouvelle fonctionnalit√©',
            'improvement': 'üîß Am√©lioration existante',
            'ui': 'üé® Interface utilisateur',
            'performance': '‚ö° Performance',
            'integration': 'üîó Int√©gration',
            'documentation': 'üìö Documentation'
        };
        return labels[type] || type;
    }
};
