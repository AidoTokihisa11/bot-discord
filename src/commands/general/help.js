import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('‚ùì Affiche l\'aide et la liste des commandes disponibles')
        .addStringOption(option =>
            option.setName('commande')
                .setDescription('Commande sp√©cifique pour laquelle obtenir de l\'aide')
                .setRequired(false)
        ),
    
    cooldown: 3,
    category: 'general',
    
    async execute(interaction, client) {
        const commandName = interaction.options.getString('commande');
        
        if (commandName) {
            return await showCommandHelp(interaction, client, commandName);
        }
        
        return await showMainHelp(interaction, client);
    },
};

async function showMainHelp(interaction, client) {
    const embed = new EmbedBuilder()
        .setColor('#7289da')
        .setTitle('ü§ñ Centre d\'aide - Bot Discord Avanc√©')
        .setDescription(`Salut **${interaction.user.displayName}** ! üëã\n\nJe suis un bot Discord moderne avec de nombreuses fonctionnalit√©s. Voici comment m'utiliser :`)
        .addFields(
            {
                name: 'üìö Navigation',
                value: '‚Ä¢ Utilisez le menu d√©roulant ci-dessous pour explorer les cat√©gories\n‚Ä¢ Cliquez sur les boutons pour des actions rapides\n‚Ä¢ Tapez `/help <commande>` pour une aide d√©taill√©e',
                inline: false
            },
            {
                name: 'üéØ Commandes populaires',
                value: '‚Ä¢ `/ping` - V√©rifier la latence\n‚Ä¢ `/ticket` - Cr√©er un ticket de support\n‚Ä¢ `/stats` - Voir les statistiques\n‚Ä¢ `/config` - Configurer le bot',
                inline: true
            },
            {
                name: 'üîó Liens utiles',
                value: '‚Ä¢ [Support](https://discord.gg/support)\n‚Ä¢ [Documentation](https://docs.bot.com)\n‚Ä¢ [Inviter le bot](https://discord.com/oauth2/authorize)',
                inline: true
            }
        )
        .setThumbnail(client.user.displayAvatarURL({ dynamic: true }))
        .setTimestamp()
        .setFooter({ 
            text: `Version 2.0.0 ‚Ä¢ ${client.commands.size} commandes disponibles`, 
            iconURL: client.user.displayAvatarURL() 
        });

    // Cr√©er le menu de s√©lection des cat√©gories
    const categoryMenu = new StringSelectMenuBuilder()
        .setCustomId('help_category_select')
        .setPlaceholder('üìÇ S√©lectionnez une cat√©gorie...')
        .addOptions([
            {
                label: 'G√©n√©ral',
                description: 'Commandes g√©n√©rales et utilitaires',
                value: 'general',
                emoji: '‚ö°'
            },
            {
                label: 'Tickets',
                description: 'Syst√®me de tickets et support',
                value: 'tickets',
                emoji: 'üé´'
            },
            {
                label: 'Mod√©ration',
                description: 'Outils de mod√©ration',
                value: 'moderation',
                emoji: 'üõ°Ô∏è'
            },
            {
                label: 'Configuration',
                description: 'Param√®tres et configuration',
                value: 'config',
                emoji: '‚öôÔ∏è'
            },
            {
                label: 'Statistiques',
                description: 'Statistiques et informations',
                value: 'stats',
                emoji: 'üìä'
            }
        ]);

    // Cr√©er les boutons d'action rapide
    const quickActions = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('help_quick_setup')
                .setLabel('üöÄ Configuration rapide')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('help_create_ticket')
                .setLabel('üé´ Cr√©er un ticket')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('help_bot_stats')
                .setLabel('üìä Statistiques')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setLabel('üîó Support')
                .setStyle(ButtonStyle.Link)
                .setURL('https://discord.gg/support')
        );

    const selectRow = new ActionRowBuilder().addComponents(categoryMenu);

    await interaction.reply({
        embeds: [embed],
        components: [selectRow, quickActions],
        ephemeral: false
    });
}

async function showCommandHelp(interaction, client, commandName) {
    const command = client.commands.get(commandName.toLowerCase());
    
    if (!command) {
        const embed = new EmbedBuilder()
            .setColor('#ff6b6b')
            .setTitle('‚ùå Commande introuvable')
            .setDescription(`La commande \`${commandName}\` n'existe pas.`)
            .addFields({
                name: 'üí° Suggestion',
                value: 'Utilisez `/help` sans param√®tre pour voir toutes les commandes disponibles.',
                inline: false
            })
            .setTimestamp();

        return await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    // Cr√©er l'embed d'aide d√©taill√©e
    const embed = new EmbedBuilder()
        .setColor('#00d4ff')
        .setTitle(`üìñ Aide - /${command.data.name}`)
        .setDescription(command.data.description || 'Aucune description disponible')
        .addFields(
            {
                name: 'üìù Utilisation',
                value: `\`/${command.data.name}\``,
                inline: true
            },
            {
                name: 'üìÇ Cat√©gorie',
                value: command.category || 'Non d√©finie',
                inline: true
            },
            {
                name: '‚è±Ô∏è Cooldown',
                value: `${command.cooldown || 3} secondes`,
                inline: true
            }
        );

    // Ajouter les options si elles existent
    if (command.data.options && command.data.options.length > 0) {
        const optionsText = command.data.options.map(option => {
            const required = option.required ? '**[Requis]**' : '*[Optionnel]*';
            return `‚Ä¢ \`${option.name}\` ${required} - ${option.description}`;
        }).join('\n');

        embed.addFields({
            name: '‚öôÔ∏è Options',
            value: optionsText,
            inline: false
        });
    }

    // Ajouter les permissions si elles existent
    if (command.permissions) {
        embed.addFields({
            name: 'üîí Permissions requises',
            value: `\`${command.permissions.join(', ')}\``,
            inline: false
        });
    }

    // Ajouter des exemples d'utilisation
    const examples = getCommandExamples(command.data.name);
    if (examples.length > 0) {
        embed.addFields({
            name: 'üí° Exemples',
            value: examples.join('\n'),
            inline: false
        });
    }

    // Bouton de retour
    const backButton = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('help_back_main')
                .setLabel('‚¨ÖÔ∏è Retour au menu principal')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.reply({
        embeds: [embed],
        components: [backButton],
        ephemeral: true
    });
}

function getCommandExamples(commandName) {
    const examples = {
        'ping': ['`/ping` - V√©rifier la latence du bot'],
        'help': [
            '`/help` - Afficher l\'aide g√©n√©rale',
            '`/help commande:ping` - Aide pour la commande ping'
        ],
        'ticket': [
            '`/ticket create` - Cr√©er un nouveau ticket',
            '`/ticket close` - Fermer le ticket actuel'
        ],
        'config': [
            '`/config show` - Afficher la configuration',
            '`/config set moderator_role:@Mod√©rateur` - D√©finir le r√¥le mod√©rateur'
        ],
        'stats': ['`/stats` - Afficher les statistiques du bot'],
        'userinfo': [
            '`/userinfo` - Vos informations',
            '`/userinfo user:@utilisateur` - Informations d\'un utilisateur'
        ],
        'serverinfo': ['`/serverinfo` - Informations du serveur'],
        'clear': [
            '`/clear amount:10` - Supprimer 10 messages',
            '`/clear amount:50 user:@utilisateur` - Supprimer 50 messages d\'un utilisateur'
        ]
    };

    return examples[commandName] || [];
}

// Gestionnaire pour les interactions du menu d'aide
export async function handleHelpInteraction(interaction, client) {
    if (interaction.isStringSelectMenu() && interaction.customId === 'help_category_select') {
        const category = interaction.values[0];
        await showCategoryCommands(interaction, client, category);
    }
    
    if (interaction.isButton()) {
        switch (interaction.customId) {
            case 'help_back_main':
                await showMainHelp(interaction, client);
                break;
            case 'help_quick_setup':
                await interaction.reply({
                    content: 'üöÄ Utilisez `/config setup` pour configurer rapidement le bot !',
                    ephemeral: true
                });
                break;
            case 'help_create_ticket':
                await interaction.reply({
                    content: 'üé´ Utilisez `/ticket create` pour cr√©er un nouveau ticket !',
                    ephemeral: true
                });
                break;
            case 'help_bot_stats':
                await interaction.reply({
                    content: 'üìä Utilisez `/stats` pour voir les statistiques du bot !',
                    ephemeral: true
                });
                break;
        }
    }
}

async function showCategoryCommands(interaction, client, category) {
    const categoryCommands = client.commands.filter(cmd => cmd.category === category);
    
    const categoryInfo = {
        'general': { name: 'G√©n√©ral', emoji: '‚ö°', color: '#7289da' },
        'tickets': { name: 'Tickets', emoji: 'üé´', color: '#f39c12' },
        'moderation': { name: 'Mod√©ration', emoji: 'üõ°Ô∏è', color: '#e74c3c' },
        'config': { name: 'Configuration', emoji: '‚öôÔ∏è', color: '#95a5a6' },
        'stats': { name: 'Statistiques', emoji: 'üìä', color: '#3498db' }
    };

    const info = categoryInfo[category] || { name: 'Inconnue', emoji: '‚ùì', color: '#95a5a6' };

    const embed = new EmbedBuilder()
        .setColor(info.color)
        .setTitle(`${info.emoji} Commandes - ${info.name}`)
        .setDescription(`Voici toutes les commandes de la cat√©gorie **${info.name}** :`)
        .setTimestamp();

    if (categoryCommands.size === 0) {
        embed.addFields({
            name: '‚ùå Aucune commande',
            value: 'Aucune commande n\'est disponible dans cette cat√©gorie.',
            inline: false
        });
    } else {
        const commandList = categoryCommands.map(cmd => 
            `‚Ä¢ \`/${cmd.data.name}\` - ${cmd.data.description}`
        ).join('\n');

        embed.addFields({
            name: `üìã Commandes (${categoryCommands.size})`,
            value: commandList,
            inline: false
        });
    }

    const backButton = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('help_back_main')
                .setLabel('‚¨ÖÔ∏è Retour au menu principal')
                .setStyle(ButtonStyle.Secondary)
        );

    await interaction.update({
        embeds: [embed],
        components: [backButton]
    });
}
