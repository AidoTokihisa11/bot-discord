import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('role-monitoring-status')
        .setDescription('üìä Afficher le statut de la surveillance des mentions de r√¥les')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
    
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const guild = interaction.guild;
            const manager = interaction.client.roleMentionManager;

            const embed = new EmbedBuilder()
                .setColor('#2b2d31')
                .setTitle('üìä STATUT DE LA SURVEILLANCE')
                .setTimestamp();

            if (!manager) {
                embed.setColor('#ff6b6b');
                embed.setDescription('‚ùå **GESTIONNAIRE NON INITIALIS√â**');
                embed.addFields({
                    name: '‚ÑπÔ∏è INFORMATION',
                    value: 'Le gestionnaire de surveillance n\'est pas encore initialis√©.\n' +
                           'Utilisez `/setup-role-monitoring activer:true` pour l\'activer.',
                    inline: false
                });
                
                await interaction.editReply({ embeds: [embed] });
                return;
            }

            const stats = manager.getMonitoringStats(guild.id);

            if (!stats) {
                embed.setColor('#ffa500');
                embed.setDescription('‚ö†Ô∏è **SURVEILLANCE INACTIVE**');
                embed.addFields({
                    name: '‚ÑπÔ∏è INFORMATION',
                    value: 'La surveillance automatique n\'est pas configur√©e pour ce serveur.\n' +
                           'Utilisez `/setup-role-monitoring activer:true` pour l\'activer.',
                    inline: false
                });
            } else {
                embed.setColor('#00ff00');
                embed.setDescription('‚úÖ **SURVEILLANCE ACTIVE**');

                // Configuration actuelle
                const logChannel = stats.logChannel ? guild.channels.cache.get(stats.logChannel) : null;
                embed.addFields({
                    name: '‚öôÔ∏è CONFIGURATION ACTUELLE',
                    value: `‚Ä¢ **Statut:** ${stats.isMonitored ? '‚úÖ Active' : '‚ùå Inactive'}\n` +
                           `‚Ä¢ **Auto-correction:** ${stats.autoFixEnabled ? '‚úÖ Activ√©e' : '‚ùå D√©sactiv√©e'}\n` +
                           `‚Ä¢ **Salon de logs:** ${logChannel ? `${logChannel}` : '‚ùå Aucun'}\n` +
                           `‚Ä¢ **Notifications admin:** ${stats.notifyAdmins ? '‚úÖ Activ√©es' : '‚ùå D√©sactiv√©es'}\n` +
                           `‚Ä¢ **Intervalle:** ${Math.round(stats.checkInterval / 60000)} minutes`,
                    inline: false
                });

                // Effectuer une v√©rification rapide
                const quickCheck = await manager.quickCheck(guild);
                
                embed.addFields({
                    name: 'üîç DERNI√àRE V√âRIFICATION',
                    value: `‚Ä¢ **Probl√®mes d√©tect√©s:** ${quickCheck.issueCount}\n` +
                           `‚Ä¢ **S√©v√©rit√©:** ${getSeverityEmoji(quickCheck.severity)} ${quickCheck.severity}\n` +
                           `‚Ä¢ **Statut global:** ${quickCheck.hasIssues ? '‚ö†Ô∏è Attention requise' : '‚úÖ Tout va bien'}`,
                    inline: false
                });

                if (quickCheck.hasIssues) {
                    // Analyser les types de probl√®mes
                    const issueTypes = quickCheck.issues.reduce((acc, issue) => {
                        acc[issue.type] = (acc[issue.type] || 0) + 1;
                        return acc;
                    }, {});

                    const issueDetails = Object.entries(issueTypes).map(([type, count]) => {
                        switch (type) {
                            case 'NON_MENTIONABLE_ROLE':
                                return `‚Ä¢ üé≠ ${count} r√¥le(s) non-mentionnable(s)`;
                            case 'CHANNEL_BLOCKS_MENTIONS':
                                return `‚Ä¢ üö´ ${count} salon(s) bloquant les mentions`;
                            case 'CHANNEL_BLOCKS_ROLE_MENTIONS':
                                return `‚Ä¢ üîí ${count} permission(s) restrictive(s)`;
                            case 'NO_MENTION_ROLES':
                                return `‚Ä¢ ‚ùì Aucun r√¥le de mention configur√©`;
                            default:
                                return `‚Ä¢ ‚ö†Ô∏è ${count} probl√®me(s) de type ${type}`;
                        }
                    }).join('\n');

                    embed.addFields({
                        name: 'üìã D√âTAIL DES PROBL√àMES',
                        value: issueDetails,
                        inline: false
                    });

                    if (stats.autoFixEnabled) {
                        embed.addFields({
                            name: 'üîß CORRECTION AUTOMATIQUE',
                            value: 'Les probl√®mes seront automatiquement corrig√©s lors de la prochaine v√©rification programm√©e.',
                            inline: false
                        });
                    }
                }
            }

            // Statistiques du serveur
            const roles = guild.roles.cache.filter(role => role.id !== guild.id);
            const mentionableRoles = roles.filter(role => role.mentionable);
            const textChannels = guild.channels.cache.filter(ch => ch.isTextBased());

            embed.addFields({
                name: 'üìà STATISTIQUES DU SERVEUR',
                value: `‚Ä¢ **Total des r√¥les:** ${roles.size}\n` +
                       `‚Ä¢ **R√¥les mentionnables:** ${mentionableRoles.size}\n` +
                       `‚Ä¢ **Salons texte:** ${textChannels.size}\n` +
                       `‚Ä¢ **Pourcentage mentionnable:** ${Math.round((mentionableRoles.size / roles.size) * 100)}%`,
                inline: false
            });

            // Actions disponibles
            embed.addFields({
                name: 'üéÆ ACTIONS DISPONIBLES',
                value: '‚Ä¢ `/setup-role-monitoring` - Configurer la surveillance\n' +
                       '‚Ä¢ `/check-role-mentions` - Diagnostic complet\n' +
                       '‚Ä¢ `/fix-role-mentions` - Correction manuelle\n' +
                       '‚Ä¢ `/force-role-check` - V√©rification imm√©diate',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Erreur lors de la v√©rification du statut:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå ERREUR')
                .setDescription('Une erreur est survenue lors de la v√©rification du statut.')
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    }
};

function getSeverityEmoji(severity) {
    switch (severity) {
        case 'HIGH': return 'üî¥';
        case 'MEDIUM': return 'üü°';
        case 'LOW': return 'üü¢';
        case 'NONE': return '‚úÖ';
        default: return '‚ö™';
    }
}
