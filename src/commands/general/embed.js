import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, StringSelectMenuBuilder, MessageFlags } from 'discord.js';
import Logger from '../../utils/Logger.js';

export default {
    data: new SlashCommandBuilder()
        .setName('embed')
        .setDescription('üé® Cr√©ateur d\'embeds professionnel avec IA et templates avanc√©s')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages)
        .addSubcommand(subcommand =>
            subcommand
                .setName('rapide')
                .setDescription('‚ö° Cr√©ation rapide d\'embed avec raccourcis intelligents')
                .addStringOption(option =>
                    option.setName('titre')
                        .setDescription('üìã Titre de l\'embed')
                        .setRequired(true)
                        .setMaxLength(256))
                .addStringOption(option =>
                    option.setName('description')
                        .setDescription('üìÑ Description de l\'embed')
                        .setRequired(true)
                        .setMaxLength(4096))
                .addStringOption(option =>
                    option.setName('style')
                        .setDescription('üé® Style pr√©d√©fini pour l\'embed')
                        .setRequired(false)
                        .addChoices(
                            { name: 'üî• Moderne - Rouge Feu', value: 'modern_red' },
                            { name: 'üíé √âl√©gant - Bleu Cristal', value: 'elegant_blue' },
                            { name: 'üåü Premium - Or Brillant', value: 'premium_gold' },
                            { name: 'üåø Nature - Vert For√™t', value: 'nature_green' },
                            { name: 'üå∏ Doux - Rose Pastel', value: 'soft_pink' },
                            { name: 'üåä Oc√©an - Bleu Profond', value: 'ocean_blue' },
                            { name: 'üîÆ Mystique - Violet Magique', value: 'mystic_purple' },
                            { name: '‚òÄÔ∏è Solaire - Jaune √âclatant', value: 'solar_yellow' },
                            { name: 'üñ§ Sombre - Noir √âl√©gant', value: 'dark_black' },
                            { name: 'ü§ç Minimaliste - Blanc Pur', value: 'minimal_white' }
                        ))
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('üìç Canal de destination (optionnel)')
                        .addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement))
                .addStringOption(option =>
                    option.setName('mention')
                        .setDescription('üì¢ Mention √† ajouter')
                        .setRequired(false)
                        .addChoices(
                            { name: '@everyone', value: '@everyone' },
                            { name: '@here', value: '@here' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('templates')
                .setDescription('üìö Galerie de templates professionnels avec pr√©visualisation')
                .addStringOption(option =>
                    option.setName('categorie')
                        .setDescription('üóÇÔ∏è Cat√©gorie de templates')
                        .setRequired(false)
                        .addChoices(
                            { name: 'üì¢ Communication', value: 'communication' },
                            { name: 'üéâ √âv√©nements', value: 'events' },
                            { name: 'üéÆ Gaming', value: 'gaming' },
                            { name: 'üíº Business', value: 'business' },
                            { name: 'üé® Cr√©atif', value: 'creative' },
                            { name: 'üéÑ Saisonnier', value: 'seasonal' },
                            { name: 'üèÜ Comp√©tition', value: 'competition' },
                            { name: 'üìö √âducatif', value: 'educational' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('studio')
                .setDescription('üé¨ Studio de cr√©ation avanc√© avec pr√©visualisation temps r√©el')
                .addChannelOption(option =>
                    option.setName('canal')
                        .setDescription('üìç Canal de destination')
                        .addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('ia')
                .setDescription('ü§ñ G√©n√©rateur d\'embeds assist√© par IA')
                .addStringOption(option =>
                    option.setName('description')
                        .setDescription('üí≠ D√©crivez l\'embed que vous voulez cr√©er')
                        .setRequired(true)
                        .setMaxLength(500))
                .addStringOption(option =>
                    option.setName('ton')
                        .setDescription('üé≠ Ton et style souhait√©')
                        .setRequired(false)
                        .addChoices(
                            { name: 'üì¢ Officiel et Professionnel', value: 'official' },
                            { name: 'üéâ Amical et D√©contract√©', value: 'friendly' },
                            { name: 'üî• √ânergique et Motivant', value: 'energetic' },
                            { name: 'üíé √âl√©gant et Raffin√©', value: 'elegant' },
                            { name: 'üéÆ Gaming et Fun', value: 'gaming' },
                            { name: 'üìö Informatif et √âducatif', value: 'educational' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('favoris')
                .setDescription('‚≠ê G√©rer vos embeds favoris et collections')
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('üîß Action √† effectuer')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üìã Voir mes favoris', value: 'list' },
                            { name: 'üíæ Sauvegarder un embed', value: 'save' },
                            { name: 'üóëÔ∏è Supprimer un favori', value: 'delete' },
                            { name: 'üì§ Partager une collection', value: 'share' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('json')
                .setDescription('üìÑ Import/Export JSON avec validation avanc√©e')
                .addStringOption(option =>
                    option.setName('action')
                        .setDescription('üîß Action JSON')
                        .setRequired(true)
                        .addChoices(
                            { name: 'üì• Importer JSON', value: 'import' },
                            { name: 'üì§ Exporter embed', value: 'export' },
                            { name: 'üîç Valider JSON', value: 'validate' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('stats')
                .setDescription('üìä Statistiques d\'utilisation et analytics')
                .addBooleanOption(option =>
                    option.setName('detaille')
                        .setDescription('üìà Affichage d√©taill√© des statistiques')
                        .setRequired(false))),

    async execute(interaction) {
        const { options, guild, client, user, channel } = interaction;
        const logger = new Logger();
        const subcommand = options.getSubcommand();

        try {
            switch (subcommand) {
                case 'rapide':
                    await this.handleRapideEmbed(interaction, logger);
                    break;
                case 'templates':
                    await this.handleTemplatesGallery(interaction, logger);
                    break;
                case 'studio':
                    await this.handleStudioCreation(interaction, logger);
                    break;
                case 'ia':
                    await this.handleIAGeneration(interaction, logger);
                    break;
                case 'favoris':
                    await this.handleFavorites(interaction, logger);
                    break;
                case 'json':
                    await this.handleJsonActions(interaction, logger);
                    break;
                case 'stats':
                    await this.handleStats(interaction, logger);
                    break;
                default:
                await interaction.reply({
                    content: '‚ùå Sous-commande non reconnue.',
                    flags: MessageFlags.Ephemeral
                });
            }
        } catch (error) {
            logger.error('Erreur lors de la cr√©ation de l\'embed:', error);
            
            const errorMessage = '‚ùå Une erreur est survenue lors de la cr√©ation de l\'embed. V√©rifiez vos param√®tres et r√©essayez.';
            
            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ content: errorMessage });
            } else {
                await interaction.reply({ content: errorMessage, flags: MessageFlags.Ephemeral });
            }
        }
    },

    // ===== NOUVELLES FONCTIONNALIT√âS =====

    async handleRapideEmbed(interaction, logger) {
        const { options } = interaction;
        
        // Utiliser le validateur d'interactions pour une d√©f√©rence rapide
        const validator = interaction.client.interactionValidator;
        const deferred = await validator.quickDefer(interaction, { flags: MessageFlags.Ephemeral });
        
        if (!deferred) {
            return; // Interaction expir√©e ou d√©j√† trait√©e
        }

        const titre = options.getString('titre');
        const description = options.getString('description');
        const style = options.getString('style') || 'elegant_blue';
        const targetChannel = options.getChannel('canal') || interaction.channel;
        const mention = options.getString('mention');

        // Styles pr√©d√©finis avec configurations compl√®tes
        const styles = {
            modern_red: {
                color: '#ff4757',
                thumbnail: 'üî•',
                footer: 'Style Moderne',
                borderEmoji: 'üî¥'
            },
            elegant_blue: {
                color: '#3742fa',
                thumbnail: 'üíé',
                footer: 'Style √âl√©gant',
                borderEmoji: 'üîµ'
            },
            premium_gold: {
                color: '#ffd700',
                thumbnail: 'üåü',
                footer: 'Style Premium',
                borderEmoji: 'üü°'
            },
            nature_green: {
                color: '#2ed573',
                thumbnail: 'üåø',
                footer: 'Style Nature',
                borderEmoji: 'üü¢'
            },
            soft_pink: {
                color: '#ff6b9d',
                thumbnail: 'üå∏',
                footer: 'Style Doux',
                borderEmoji: 'ü©∑'
            },
            ocean_blue: {
                color: '#0984e3',
                thumbnail: 'üåä',
                footer: 'Style Oc√©an',
                borderEmoji: 'üîµ'
            },
            mystic_purple: {
                color: '#a55eea',
                thumbnail: 'üîÆ',
                footer: 'Style Mystique',
                borderEmoji: 'üü£'
            },
            solar_yellow: {
                color: '#feca57',
                thumbnail: '‚òÄÔ∏è',
                footer: 'Style Solaire',
                borderEmoji: 'üü°'
            },
            dark_black: {
                color: '#2f3542',
                thumbnail: 'üñ§',
                footer: 'Style Sombre',
                borderEmoji: '‚ö´'
            },
            minimal_white: {
                color: '#ffffff',
                thumbnail: 'ü§ç',
                footer: 'Style Minimaliste',
                borderEmoji: '‚ö™'
            }
        };

        const selectedStyle = styles[style];
        
        // Cr√©ation de l'embed avec style
        const embed = new EmbedBuilder()
            .setTitle(`${selectedStyle.borderEmoji} ${titre}`)
            .setDescription(description)
            .setColor(selectedStyle.color)
            .setFooter({ 
                text: selectedStyle.footer, 
                iconURL: interaction.client.user.displayAvatarURL() 
            })
            .setTimestamp();

        // Pr√©paration du message
        const messageOptions = { embeds: [embed] };
        
        if (mention) {
            messageOptions.content = mention;
        }

        try {
            const sentMessage = await targetChannel.send(messageOptions);
            
            logger.success(`Embed rapide cr√©√© par ${interaction.user.tag} dans #${targetChannel.name}`);
            
            // Interface de gestion post-envoi
            const manageRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`save_favorite_${sentMessage.id}`)
                        .setLabel('‚≠ê Sauvegarder')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`edit_sent_${sentMessage.id}`)
                        .setLabel('‚úèÔ∏è Modifier')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`duplicate_${sentMessage.id}`)
                        .setLabel('üìã Dupliquer')
                        .setStyle(ButtonStyle.Secondary)
                );

            await interaction.editReply({
                content: `‚úÖ **Embed cr√©√© avec succ√®s !**\n\nüìç **Canal :** ${targetChannel}\nüé® **Style :** ${selectedStyle.footer}\nüÜî **Message ID :** \`${sentMessage.id}\`\n\n[üîó Aller au message](${sentMessage.url})`,
                components: [manageRow]
            });

        } catch (error) {
            logger.error('Erreur lors de l\'envoi de l\'embed rapide:', error);
            await interaction.editReply({
                content: '‚ùå Impossible d\'envoyer l\'embed dans ce canal. V√©rifiez les permissions du bot.'
            });
        }
    },

    async handleTemplatesGallery(interaction, logger) {
        const { options } = interaction;
        
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const categorie = options.getString('categorie') || 'communication';

        // Templates organis√©s par cat√©gorie
        const templateCategories = {
            communication: {
                name: 'üì¢ Communication',
                templates: [
                    { id: 'annonce_moderne', name: 'üì¢ Annonce Moderne', description: 'Annonce officielle avec design moderne' },
                    { id: 'info_importante', name: '‚ö†Ô∏è Information Importante', description: 'Information critique √† diffuser' },
                    { id: 'mise_a_jour', name: 'üîÑ Mise √† Jour', description: 'Annonce de mise √† jour ou changement' },
                    { id: 'bienvenue_membre', name: 'üëã Bienvenue', description: 'Message de bienvenue pour nouveaux membres' }
                ]
            },
            events: {
                name: 'üéâ √âv√©nements',
                templates: [
                    { id: 'event_gaming', name: 'üéÆ √âv√©nement Gaming', description: 'Tournoi ou session de jeu' },
                    { id: 'concours_creatif', name: 'üé® Concours Cr√©atif', description: 'Concours artistique ou cr√©atif' },
                    { id: 'soiree_communaute', name: 'üéä Soir√©e Communaut√©', description: '√âv√©nement social communautaire' },
                    { id: 'stream_live', name: 'üì∫ Stream Live', description: 'Annonce de stream en direct' }
                ]
            },
            gaming: {
                name: 'üéÆ Gaming',
                templates: [
                    { id: 'recrutement_team', name: 'üë• Recrutement Team', description: 'Recherche de joueurs pour √©quipe' },
                    { id: 'match_resultat', name: 'üèÜ R√©sultat Match', description: 'R√©sultats de match ou tournoi' },
                    { id: 'nouveau_jeu', name: 'üÜï Nouveau Jeu', description: 'Annonce d\'un nouveau jeu' },
                    { id: 'guide_strategie', name: 'üìö Guide Strat√©gie', description: 'Guide ou tutoriel de jeu' }
                ]
            },
            business: {
                name: 'üíº Business',
                templates: [
                    { id: 'partenariat_officiel', name: 'ü§ù Partenariat', description: 'Annonce de partenariat' },
                    { id: 'rapport_mensuel', name: 'üìä Rapport Mensuel', description: 'Rapport d\'activit√© mensuel' },
                    { id: 'recrutement_staff', name: 'üíº Recrutement Staff', description: 'Offre d\'emploi ou b√©n√©volat' },
                    { id: 'presentation_service', name: 'üéØ Pr√©sentation Service', description: 'Pr√©sentation d\'un nouveau service' }
                ]
            },
            creative: {
                name: 'üé® Cr√©atif',
                templates: [
                    { id: 'showcase_art', name: 'üñºÔ∏è Showcase Art', description: 'Pr√©sentation d\'≈ìuvre artistique' },
                    { id: 'tutoriel_creatif', name: 'üìö Tutoriel Cr√©atif', description: 'Guide cr√©atif ou artistique' },
                    { id: 'inspiration_daily', name: '‚ú® Inspiration Quotidienne', description: 'Citation ou inspiration du jour' },
                    { id: 'challenge_creatif', name: 'üéØ Challenge Cr√©atif', description: 'D√©fi cr√©atif communautaire' }
                ]
            },
            seasonal: {
                name: 'üéÑ Saisonnier',
                templates: [
                    { id: 'noel_festif', name: 'üéÑ No√´l Festif', description: 'Template de No√´l chaleureux' },
                    { id: 'halloween_spooky', name: 'üéÉ Halloween Spooky', description: 'Template Halloween effrayant' },
                    { id: 'nouvel_an', name: 'üéä Nouvel An', description: 'C√©l√©bration du Nouvel An' },
                    { id: 'ete_vacances', name: '‚òÄÔ∏è √ât√© Vacances', description: 'Template estival et vacances' }
                ]
            },
            competition: {
                name: 'üèÜ Comp√©tition',
                templates: [
                    { id: 'tournoi_esport', name: 'üéÆ Tournoi Esport', description: 'Tournoi de jeux vid√©o' },
                    { id: 'classement_leaderboard', name: 'üìä Classement', description: 'Tableau des scores' },
                    { id: 'prix_recompenses', name: 'üéÅ Prix & R√©compenses', description: 'Annonce des prix' },
                    { id: 'regles_competition', name: 'üìã R√®gles Comp√©tition', description: 'R√®glement de comp√©tition' }
                ]
            },
            educational: {
                name: 'üìö √âducatif',
                templates: [
                    { id: 'cours_tutoriel', name: 'üéì Cours & Tutoriel', description: 'Contenu √©ducatif' },
                    { id: 'faq_aide', name: '‚ùì FAQ & Aide', description: 'Questions fr√©quentes' },
                    { id: 'ressources_utiles', name: 'üìñ Ressources Utiles', description: 'Collection de ressources' },
                    { id: 'quiz_knowledge', name: 'üß† Quiz Knowledge', description: 'Quiz √©ducatif' }
                ]
            }
        };

        const selectedCategory = templateCategories[categorie];
        
        // Embed de pr√©sentation de la galerie
        const galleryEmbed = new EmbedBuilder()
            .setTitle(`üìö GALERIE DE TEMPLATES - ${selectedCategory.name}`)
            .setDescription(`D√©couvrez notre collection de templates professionnels pour la cat√©gorie **${selectedCategory.name}**.\n\nCliquez sur un template ci-dessous pour le pr√©visualiser et l'utiliser.`)
            .setColor('#5865f2')
            .addFields(
                selectedCategory.templates.map(template => ({
                    name: template.name,
                    value: template.description,
                    inline: true
                }))
            )
            .setFooter({ 
                text: `${selectedCategory.templates.length} templates disponibles`, 
                iconURL: interaction.client.user.displayAvatarURL() 
            })
            .setTimestamp();

        // Menu de s√©lection des templates
        const templateSelect = new StringSelectMenuBuilder()
            .setCustomId(`template_select_${categorie}`)
            .setPlaceholder('üé® Choisissez un template √† pr√©visualiser...')
            .addOptions(
                selectedCategory.templates.map(template => ({
                    label: template.name,
                    description: template.description,
                    value: template.id,
                    emoji: template.name.split(' ')[0]
                }))
            );

        // Menu de s√©lection des cat√©gories
        const categorySelect = new StringSelectMenuBuilder()
            .setCustomId('category_select')
            .setPlaceholder('üóÇÔ∏è Changer de cat√©gorie...')
            .addOptions(
                Object.entries(templateCategories).map(([key, cat]) => ({
                    label: cat.name,
                    description: `${cat.templates.length} templates disponibles`,
                    value: key,
                    emoji: cat.name.split(' ')[0]
                }))
            );

        const row1 = new ActionRowBuilder().addComponents(templateSelect);
        const row2 = new ActionRowBuilder().addComponents(categorySelect);

        await interaction.editReply({
            embeds: [galleryEmbed],
            components: [row1, row2]
        });
    },

    async handleStudioCreation(interaction, logger) {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const targetChannel = interaction.options.getChannel('canal') || interaction.channel;

        // Interface du studio de cr√©ation
        const studioEmbed = new EmbedBuilder()
            .setTitle('üé¨ STUDIO DE CR√âATION AVANC√â')
            .setDescription(`Bienvenue dans le Studio de Cr√©ation ! Cr√©ez des embeds professionnels avec une pr√©visualisation en temps r√©el.\n\n**üéØ Canal de destination :** ${targetChannel}\n\n**üìã Fonctionnalit√©s disponibles :**\n‚Ä¢ Pr√©visualisation temps r√©el\n‚Ä¢ Assistant de couleurs\n‚Ä¢ Galerie d'images\n‚Ä¢ Templates personnalisables\n‚Ä¢ Export/Import JSON`)
            .setColor('#ff6b9d')
            .addFields(
                { name: 'üé® Design', value: 'Couleurs, images, mise en forme', inline: true },
                { name: 'üìù Contenu', value: 'Texte, champs, structure', inline: true },
                { name: '‚ö° Actions', value: 'Pr√©visualiser, sauvegarder, envoyer', inline: true }
            )
            .setFooter({ text: 'Studio de Cr√©ation Professionnel', iconURL: interaction.client.user.displayAvatarURL() })
            .setTimestamp();

        // Interface du studio
        const designRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('studio_design')
                    .setLabel('üé® Design & Style')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('studio_content')
                    .setLabel('üìù Contenu & Texte')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('studio_structure')
                    .setLabel('üìã Structure & Champs')
                    .setStyle(ButtonStyle.Primary)
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('studio_preview')
                    .setLabel('üëÅÔ∏è Pr√©visualisation')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('studio_save')
                    .setLabel('üíæ Sauvegarder')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('studio_send')
                    .setLabel('üì§ Envoyer')
                    .setStyle(ButtonStyle.Success)
            );

        await interaction.editReply({
            embeds: [studioEmbed],
            components: [designRow, actionRow]
        });

        // Initialiser les donn√©es du studio
        if (!interaction.client.embedStudio) {
            interaction.client.embedStudio = new Map();
        }
        interaction.client.embedStudio.set(interaction.user.id, {
            targetChannel,
            data: {
                title: '',
                description: '',
                color: '#5865f2',
                fields: [],
                footer: '',
                timestamp: false,
                thumbnail: null,
                image: null
            },
            step: 'design'
        });
    },

    async handleIAGeneration(interaction, logger) {
        const { options } = interaction;
        
        try {
            const description = options.getString('description');
            const ton = options.getString('ton') || 'friendly';

            // R√©ponse imm√©diate avec defer pour √©viter l'expiration
            await interaction.deferReply({ flags: MessageFlags.Ephemeral });

            // Syst√®me IA avanc√© avec analyse contextuelle
            const aiAnalysis = this.analyzeContentWithAI(description, ton);
            
            // G√©n√©ration du contenu optimis√© et d√©taill√©
            const optimizedContent = this.generateAdvancedOptimizedContent(aiAnalysis);
            
            // Embed de r√©sultat professionnel
            const resultEmbed = new EmbedBuilder()
                .setTitle('‚ú® G√âN√âRATION IA TERMIN√âE')
                .setDescription('**Votre embed professionnel est pr√™t !**\n\nL\'IA a analys√© votre demande et g√©n√©r√© un contenu optimis√© selon les meilleures pratiques de communication Discord.')
                .setColor('#00ff88')
                .addFields(
                    { name: 'üéØ Contexte d√©tect√©', value: `\`${aiAnalysis.context}\``, inline: true },
                    { name: 'üé® Style optimal', value: `\`${aiAnalysis.styleDescription}\``, inline: true },
                    { name: 'üìä Score de qualit√©', value: `\`${aiAnalysis.qualityScore}/100\``, inline: true },
                    { name: 'üî• Points forts d√©tect√©s', value: aiAnalysis.strengths.map(s => `‚Ä¢ ${s}`).join('\n'), inline: false }
                )
                .setFooter({ text: 'G√©n√©ration IA Professionnelle', iconURL: interaction.client.user.displayAvatarURL() })
                .setTimestamp();

            // Embed g√©n√©r√© final avec contenu d√©taill√©
            const generatedEmbed = new EmbedBuilder()
                .setTitle(optimizedContent.title)
                .setDescription(optimizedContent.description)
                .setColor(optimizedContent.color)
                .setFooter({ text: optimizedContent.footer, iconURL: interaction.client.user.displayAvatarURL() })
                .setTimestamp();

            if (optimizedContent.fields && optimizedContent.fields.length > 0) {
                generatedEmbed.addFields(optimizedContent.fields);
            }

            // Interface d'action professionnelle
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`ia_deploy_${interaction.user.id}`)
                        .setLabel('üöÄ D√©ployer')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`ia_customize_${interaction.user.id}`)
                        .setLabel('‚öôÔ∏è Personnaliser')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`ia_alternatives_${interaction.user.id}`)
                        .setLabel('üîÑ Alternatives')
                        .setStyle(ButtonStyle.Secondary)
                );

            const utilityRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`ia_export_json_${interaction.user.id}`)
                        .setLabel('üì§ Export JSON')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`ia_save_template_${interaction.user.id}`)
                        .setLabel('üíæ Sauvegarder')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`ia_analytics_${interaction.user.id}`)
                        .setLabel('üìä Analytics')
                        .setStyle(ButtonStyle.Secondary)
                );

            await interaction.editReply({
                content: 'üéâ **G√©n√©ration IA R√©ussie !**\n\n> üß† L\'IA a cr√©√© un embed professionnel optimis√© pour votre contexte\n> üéØ Pr√™t √† d√©ployer ou √† personnaliser selon vos besoins',
                embeds: [resultEmbed, generatedEmbed],
                components: [actionRow, utilityRow]
            });

            // Stocker les donn√©es IA avanc√©es
            if (!interaction.client.embedIA) {
                interaction.client.embedIA = new Map();
            }
            interaction.client.embedIA.set(interaction.user.id, {
                originalDescription: description,
                tone: ton,
                analysis: aiAnalysis,
                generatedContent: optimizedContent,
                generatedEmbed: generatedEmbed,
                timestamp: Date.now(),
                channelId: interaction.channelId
            });

        } catch (error) {
            logger.error('Erreur dans handleIAGeneration:', error);
            
            // Gestion d'erreur s√©curis√©e
            const errorMessage = '‚ùå Une erreur est survenue lors de la g√©n√©ration IA. Veuillez r√©essayer.';
            
            try {
                if (interaction.deferred || interaction.replied) {
                    await interaction.editReply({ content: errorMessage, embeds: [], components: [] });
                } else {
                    await interaction.reply({ content: errorMessage, flags: MessageFlags.Ephemeral });
                }
            } catch (replyError) {
                logger.error('Impossible de r√©pondre √† l\'erreur:', replyError);
            }
        }
    },

    async handleFavorites(interaction, logger) {
        const { options } = interaction;
        const action = options.getString('action');

        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        // Initialiser le syst√®me de favoris
        if (!interaction.client.embedFavorites) {
            interaction.client.embedFavorites = new Map();
        }

        const userFavorites = interaction.client.embedFavorites.get(interaction.user.id) || [];

        switch (action) {
            case 'list':
                await this.showFavoritesList(interaction, userFavorites);
                break;
            case 'save':
                await this.showSaveFavoriteModal(interaction);
                break;
            case 'delete':
                await this.showDeleteFavoriteMenu(interaction, userFavorites);
                break;
            case 'share':
                await this.showShareFavoritesMenu(interaction, userFavorites);
                break;
        }
    },

    async handleJsonActions(interaction, logger) {
        const { options } = interaction;
        const action = options.getString('action');

        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        switch (action) {
            case 'import':
                await this.showJsonImportModal(interaction);
                break;
            case 'export':
                await this.showExportMenu(interaction);
                break;
            case 'validate':
                await this.showJsonValidateModal(interaction);
                break;
        }
    },

    async handleStats(interaction, logger) {
        const { options } = interaction;
        const detaille = options.getBoolean('detaille') || false;

        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        // Simuler des statistiques (en production, ces donn√©es viendraient d'une base de donn√©es)
        const stats = {
            totalEmbeds: Math.floor(Math.random() * 1000) + 500,
            embedsToday: Math.floor(Math.random() * 50) + 10,
            embedsThisWeek: Math.floor(Math.random() * 200) + 50,
            favoriteTemplates: ['annonce', 'event', 'gaming'],
            mostUsedColors: ['#5865f2', '#57f287', '#ff4757'],
            userRank: Math.floor(Math.random() * 100) + 1
        };

        const statsEmbed = new EmbedBuilder()
            .setTitle('üìä STATISTIQUES D\'UTILISATION')
            .setDescription(`Voici vos statistiques d'utilisation du syst√®me d'embeds.\n\n**üèÜ Votre rang :** #${stats.userRank} sur le serveur`)
            .setColor('#00d2d3')
            .addFields(
                { name: 'üìà Total Embeds', value: `${stats.totalEmbeds.toLocaleString()}`, inline: true },
                { name: 'üìÖ Aujourd\'hui', value: `${stats.embedsToday}`, inline: true },
                { name: 'üìÜ Cette semaine', value: `${stats.embedsThisWeek}`, inline: true }
            )
            .setThumbnail('üìä')
            .setFooter({ text: 'Statistiques Embed System', iconURL: interaction.client.user.displayAvatarURL() })
            .setTimestamp();

        if (detaille) {
            statsEmbed.addFields(
                { name: 'üé® Templates favoris', value: stats.favoriteTemplates.join(', '), inline: false },
                { name: 'üåà Couleurs populaires', value: stats.mostUsedColors.join(', '), inline: false },
                { name: '‚≠ê Taux de satisfaction', value: '98.5%', inline: true },
                { name: '‚ö° Temps moyen cr√©ation', value: '2.3 min', inline: true }
            );
        }

        await interaction.editReply({
            embeds: [statsEmbed]
        });
    },

    // ===== FONCTIONS UTILITAIRES AVANC√âES =====

    generateSmartDescription(userDescription, style) {
        const templates = {
            formel: `Nous avons le plaisir de vous informer concernant : ${userDescription}\n\nCette communication officielle vise √† vous tenir inform√© des derniers d√©veloppements.`,
            d√©contract√©: `Salut tout le monde ! üëã\n\n${userDescription}\n\nN'h√©sitez pas si vous avez des questions !`,
            dynamique: `üî• ATTENTION ! üî•\n\n${userDescription}\n\nC'est le moment de passer √† l'action !`,
            sophistiqu√©: `Il nous est agr√©able de partager avec vous cette information raffin√©e :\n\n${userDescription}\n\nNous esp√©rons que cela saura retenir votre attention.`,
            gaming: `üéÆ GAMERS UNITE! üéÆ\n\n${userDescription}\n\nReady to play? Let's go!`,
            informatif: `üìö Information √©ducative :\n\n${userDescription}\n\nCette ressource vous aidera √† mieux comprendre le sujet.`
        };

        return templates[style] || templates.d√©contract√©;
    },

    generateSmartFields(keywords) {
        const fields = [];

        if (keywords.includes('event') || keywords.includes('√©v√©nement')) {
            fields.push({ name: 'üìÖ Date', value: '√Ä d√©finir', inline: true });
            fields.push({ name: 'üìç Lieu', value: 'Discord', inline: true });
        }

        if (keywords.includes('concours') || keywords.includes('giveaway')) {
            fields.push({ name: 'üèÜ Prix', value: '√Ä annoncer', inline: true });
            fields.push({ name: '‚è∞ Fin', value: '√Ä d√©finir', inline: true });
        }

        if (keywords.includes('r√®gle') || keywords.includes('rule')) {
            fields.push({ name: 'üìã R√®gles', value: 'Voir description', inline: false });
        }

        if (keywords.includes('update') || keywords.includes('mise √† jour')) {
            fields.push({ name: 'üîÑ Version', value: 'Derni√®re', inline: true });
            fields.push({ name: 'üìã Changements', value: 'Voir d√©tails', inline: true });
        }

        return fields;
    },

    async showFavoritesList(interaction, favorites) {
        if (favorites.length === 0) {
            return await interaction.editReply({
                content: '‚≠ê **Aucun favori sauvegard√©**\n\nVous n\'avez pas encore sauvegard√© d\'embeds en favoris. Utilisez `/embed favoris save` pour sauvegarder vos cr√©ations pr√©f√©r√©es.'
            });
        }

        const favoritesEmbed = new EmbedBuilder()
            .setTitle('‚≠ê VOS EMBEDS FAVORIS')
            .setDescription(`Vous avez **${favorites.length}** embed(s) sauvegard√©(s) en favoris.`)
            .setColor('#ffd700')
            .setFooter({ text: 'Syst√®me de Favoris', iconURL: interaction.client.user.displayAvatarURL() })
            .setTimestamp();

        // Afficher les favoris (limit√© √† 10)
        const displayFavorites = favorites.slice(0, 10);
        displayFavorites.forEach((fav, index) => {
            favoritesEmbed.addFields({
                name: `${index + 1}. ${fav.name}`,
                value: `**Cr√©√© le :** ${fav.createdAt}\n**Type :** ${fav.type}`,
                inline: true
            });
        });

        if (favorites.length > 10) {
            favoritesEmbed.addFields({
                name: 'üìã Note',
                value: `Seuls les 10 premiers favoris sont affich√©s. Total : ${favorites.length}`,
                inline: false
            });
        }

        await interaction.editReply({
            embeds: [favoritesEmbed]
        });
    },

    async showSaveFavoriteModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('save_favorite_modal')
            .setTitle('üíæ Sauvegarder un Favori');

        const nameInput = new TextInputBuilder()
            .setCustomId('favorite_name')
            .setLabel('üìù Nom du favori')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(100)
            .setPlaceholder('Donnez un nom √† votre embed favori...');

        const jsonInput = new TextInputBuilder()
            .setCustomId('favorite_json')
            .setLabel('üìÑ Code JSON de l\'embed')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true)
            .setMaxLength(4000)
            .setPlaceholder('Collez le code JSON de votre embed...');

        modal.addComponents(
            new ActionRowBuilder().addComponents(nameInput),
            new ActionRowBuilder().addComponents(jsonInput)
        );

        await interaction.showModal(modal);
    },

    async showDeleteFavoriteMenu(interaction, favorites) {
        if (favorites.length === 0) {
            return await interaction.editReply({
                content: '‚≠ê **Aucun favori √† supprimer**\n\nVous n\'avez pas de favoris sauvegard√©s.'
            });
        }

        const deleteEmbed = new EmbedBuilder()
            .setTitle('üóëÔ∏è SUPPRIMER UN FAVORI')
            .setDescription('S√©lectionnez le favori que vous souhaitez supprimer.')
            .setColor('#ff4757')
            .setFooter({ text: 'Suppression de Favoris', iconURL: interaction.client.user.displayAvatarURL() });

        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('delete_favorite_select')
            .setPlaceholder('üóëÔ∏è Choisissez un favori √† supprimer...')
            .addOptions(
                favorites.slice(0, 25).map((fav, index) => ({
                    label: fav.name,
                    description: `Cr√©√© le ${fav.createdAt}`,
                    value: index.toString(),
                    emoji: 'üóëÔ∏è'
                }))
            );

        const row = new ActionRowBuilder().addComponents(selectMenu);

        await interaction.editReply({
            embeds: [deleteEmbed],
            components: [row]
        });
    },

    async showShareFavoritesMenu(interaction, favorites) {
        if (favorites.length === 0) {
            return await interaction.editReply({
                content: '‚≠ê **Aucun favori √† partager**\n\nVous n\'avez pas de favoris sauvegard√©s.'
            });
        }

        const shareEmbed = new EmbedBuilder()
            .setTitle('üì§ PARTAGER VOS FAVORIS')
            .setDescription('Partagez vos embeds favoris avec la communaut√© !')
            .setColor('#00d2d3')
            .addFields(
                { name: 'üìä Vos statistiques', value: `${favorites.length} favoris sauvegard√©s`, inline: true },
                { name: 'üéØ Options de partage', value: 'Collection compl√®te ou s√©lection', inline: true }
            )
            .setFooter({ text: 'Partage de Favoris', iconURL: interaction.client.user.displayAvatarURL() });

        const shareRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('share_all_favorites')
                    .setLabel('üì§ Partager Tout')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('share_select_favorites')
                    .setLabel('üéØ S√©lection')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('export_favorites')
                    .setLabel('üíæ Exporter JSON')
                    .setStyle(ButtonStyle.Success)
            );

        await interaction.editReply({
            embeds: [shareEmbed],
            components: [shareRow]
        });
    },

    async showJsonImportModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('json_import_modal')
            .setTitle('üì• Importer JSON');

        const jsonInput = new TextInputBuilder()
            .setCustomId('import_json_code')
            .setLabel('üìÑ Code JSON √† importer')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true)
            .setMaxLength(4000)
            .setPlaceholder('Collez votre code JSON ici...');

        const channelInput = new TextInputBuilder()
            .setCustomId('import_target_channel')
            .setLabel('üìç ID du canal de destination (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setPlaceholder('ID du canal ou laissez vide pour le canal actuel');

        modal.addComponents(
            new ActionRowBuilder().addComponents(jsonInput),
            new ActionRowBuilder().addComponents(channelInput)
        );

        await interaction.showModal(modal);
    },

    async showExportMenu(interaction) {
        const exportEmbed = new EmbedBuilder()
            .setTitle('üì§ EXPORTER UN EMBED')
            .setDescription('Exportez un embed existant au format JSON pour le r√©utiliser ou le partager.')
            .setColor('#00d2d3')
            .addFields(
                { name: 'üìã Instructions', value: '1. Fournissez l\'ID du message\n2. Le bot g√©n√©rera le JSON\n3. Copiez et sauvegardez le code', inline: false },
                { name: 'üí° Astuce', value: 'Clic droit sur un message ‚Üí Copier l\'ID', inline: false }
            )
            .setFooter({ text: 'Export JSON', iconURL: interaction.client.user.displayAvatarURL() });

        const exportRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('export_by_id')
                    .setLabel('üÜî Par ID de Message')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('export_recent')
                    .setLabel('üìÖ Messages R√©cents')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({
            embeds: [exportEmbed],
            components: [exportRow]
        });
    },

    async showJsonValidateModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('json_validate_modal')
            .setTitle('üîç Valider JSON');

        const jsonInput = new TextInputBuilder()
            .setCustomId('validate_json_code')
            .setLabel('üìÑ Code JSON √† valider')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true)
            .setMaxLength(4000)
            .setPlaceholder('Collez votre code JSON pour validation...');

        modal.addComponents(
            new ActionRowBuilder().addComponents(jsonInput)
        );

        await interaction.showModal(modal);
    },

    async handleSimpleEmbed(interaction, logger) {
        const { options, guild, client } = interaction;
        
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const titre = options.getString('titre');
        const description = options.getString('description');
        const couleur = options.getString('couleur') || '#5865f2';
        const targetChannel = options.getChannel('canal') || interaction.channel;
        const image = options.getString('image');
        const miniature = options.getString('miniature');
        const footer = options.getString('footer');
        const timestamp = options.getBoolean('timestamp');
        const mention = options.getString('mention');

        // Validation des URLs d'images
        if (image && !this.isValidImageUrl(image)) {
            return await interaction.editReply({
                content: '‚ùå L\'URL de l\'image principale n\'est pas valide. Utilisez une URL directe vers une image (jpg, png, gif, webp).'
            });
        }

        if (miniature && !this.isValidImageUrl(miniature)) {
            return await interaction.editReply({
                content: '‚ùå L\'URL de la miniature n\'est pas valide. Utilisez une URL directe vers une image (jpg, png, gif, webp).'
            });
        }

        // Cr√©ation de l'embed
        const embed = new EmbedBuilder()
            .setTitle(titre)
            .setDescription(description)
            .setColor(this.parseColor(couleur));

        if (image) embed.setImage(image);
        if (miniature) embed.setThumbnail(miniature);
        if (footer) embed.setFooter({ text: footer, iconURL: client.user.displayAvatarURL() });
        if (timestamp) embed.setTimestamp();

        // Pr√©paration du message
        const messageOptions = { embeds: [embed] };
        
        if (mention) {
            if (mention === '@everyone' || mention === '@here') {
                messageOptions.content = mention;
            } else {
                // V√©rifier si c'est un ID de r√¥le valide
                const roleId = mention.replace(/[<@&>]/g, '');
                const role = guild.roles.cache.get(roleId);
                if (role) {
                    messageOptions.content = `<@&${roleId}>`;
                }
            }
        }

        try {
            const sentMessage = await targetChannel.send(messageOptions);
            
            logger.success(`Embed simple cr√©√© par ${interaction.user.tag} dans #${targetChannel.name}`);
            
            await interaction.editReply({
                content: `‚úÖ **Embed cr√©√© avec succ√®s !**\n\nüìç **Canal :** ${targetChannel}\nüÜî **Message ID :** \`${sentMessage.id}\`\nüé® **Couleur :** \`${couleur}\`\n\n[üîó Aller au message](${sentMessage.url})`
            });

        } catch (error) {
            logger.error('Erreur lors de l\'envoi de l\'embed:', error);
            await interaction.editReply({
                content: '‚ùå Impossible d\'envoyer l\'embed dans ce canal. V√©rifiez les permissions du bot.'
            });
        }
    },

    async handleAdvancedEmbed(interaction, logger) {
        const { options } = interaction;
        const template = options.getString('template');

        if (template) {
            await this.handleTemplate(interaction, template, logger);
        } else {
            await this.showAdvancedEmbedModal(interaction);
        }
    },

    async handleTemplate(interaction, template, logger) {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const templates = {
            annonce: {
                title: 'üì¢ ANNONCE OFFICIELLE',
                description: 'Une annonce importante de l\'√©quipe d\'administration.',
                color: '#5865f2',
                thumbnail: interaction.guild.iconURL({ dynamic: true }),
                footer: '√âquipe d\'Administration',
                fields: [
                    { name: 'üìã Informations', value: 'D√©tails de l\'annonce...', inline: false },
                    { name: 'üìÖ Date d\'effet', value: 'Imm√©diatement', inline: true },
                    { name: 'üë• Concern√©', value: 'Tous les membres', inline: true }
                ]
            },
            event: {
                title: 'üéâ √âV√âNEMENT SP√âCIAL',
                description: 'Rejoignez-nous pour un √©v√©nement exceptionnel !',
                color: '#ff6b6b',
                thumbnail: 'üéâ',
                footer: '√âv√©nements du serveur',
                fields: [
                    { name: 'üìÖ Date & Heure', value: '√Ä d√©finir', inline: true },
                    { name: 'üìç Lieu', value: 'Serveur Discord', inline: true },
                    { name: 'üéÅ R√©compenses', value: 'Surprises √† gagner !', inline: false }
                ]
            },
            rules: {
                title: 'üìã R√àGLEMENT DU SERVEUR',
                description: 'Veuillez respecter ces r√®gles pour maintenir une communaut√© saine.',
                color: '#ffd93d',
                thumbnail: '‚öñÔ∏è',
                footer: 'Mod√©ration',
                fields: [
                    { name: '1Ô∏è‚É£ Respect', value: 'Respectez tous les membres', inline: false },
                    { name: '2Ô∏è‚É£ Spam', value: '√âvitez le spam et les messages r√©p√©titifs', inline: false },
                    { name: '3Ô∏è‚É£ Contenu', value: 'Gardez le contenu appropri√©', inline: false }
                ]
            },
            recruitment: {
                title: 'üéØ RECRUTEMENT OUVERT',
                description: 'Nous recherchons de nouveaux talents pour rejoindre notre √©quipe !',
                color: '#6bcf7f',
                thumbnail: 'üë•',
                footer: 'Ressources Humaines',
                fields: [
                    { name: 'üíº Postes disponibles', value: 'Mod√©rateur, D√©veloppeur, Designer', inline: false },
                    { name: 'üìã Pr√©requis', value: 'Motivation et disponibilit√©', inline: true },
                    { name: 'üìß Candidature', value: 'Ouvrez un ticket', inline: true }
                ]
            },
            maintenance: {
                title: '‚ö†Ô∏è MAINTENANCE PROGRAMM√âE',
                description: 'Le serveur sera temporairement indisponible pour maintenance.',
                color: '#ff9500',
                thumbnail: 'üîß',
                footer: '√âquipe Technique',
                fields: [
                    { name: '‚è∞ D√©but', value: '√Ä d√©finir', inline: true },
                    { name: '‚è±Ô∏è Dur√©e estim√©e', value: '30 minutes', inline: true },
                    { name: 'üîÑ Services affect√©s', value: 'Bot et fonctionnalit√©s', inline: false }
                ]
            },
            giveaway: {
                title: 'üéÅ GIVEAWAY EN COURS',
                description: 'Participez √† notre concours pour gagner des prix incroyables !',
                color: '#ff6b9d',
                thumbnail: 'üéÅ',
                footer: 'Concours',
                fields: [
                    { name: 'üèÜ Prix', value: '√Ä d√©finir', inline: true },
                    { name: 'üë• Participants', value: '0', inline: true },
                    { name: 'üìÖ Fin du concours', value: '√Ä d√©finir', inline: false },
                    { name: 'üìã Comment participer', value: 'R√©agissez avec üéâ', inline: false }
                ]
            },
            poll: {
                title: 'üìä SONDAGE COMMUNAUTAIRE',
                description: 'Votre opinion compte ! Participez √† notre sondage.',
                color: '#4ecdc4',
                thumbnail: 'üìä',
                footer: 'Sondage',
                fields: [
                    { name: '‚ùì Question', value: '√Ä d√©finir', inline: false },
                    { name: 'üìù Instructions', value: 'R√©agissez avec les √©mojis correspondants', inline: false }
                ]
            },
            news: {
                title: 'üÜï NOUVEAUT√âS',
                description: 'D√©couvrez les derni√®res nouveaut√©s et mises √† jour !',
                color: '#a8e6cf',
                thumbnail: '‚ú®',
                footer: 'Actualit√©s',
                fields: [
                    { name: 'üî• Nouveaut√© principale', value: '√Ä d√©finir', inline: false },
                    { name: 'üîß Am√©liorations', value: 'Liste des am√©liorations', inline: false }
                ]
            },
            gaming: {
                title: 'üéÆ GAMING TIME',
                description: 'Rejoignez-nous pour des sessions de jeu √©piques !',
                color: '#9b59b6',
                thumbnail: 'üéÆ',
                footer: 'Gaming Community',
                fields: [
                    { name: 'üéØ Jeu', value: '√Ä d√©finir', inline: true },
                    { name: 'üë• Joueurs', value: '0/10', inline: true },
                    { name: '‚è∞ Heure', value: '√Ä d√©finir', inline: false }
                ]
            },
            partnership: {
                title: 'üíº PARTENARIAT',
                description: 'D√©couvrez nos partenaires et opportunit√©s de collaboration.',
                color: '#3498db',
                thumbnail: 'ü§ù',
                footer: 'Partenariats',
                fields: [
                    { name: 'üè¢ Partenaire', value: '√Ä d√©finir', inline: true },
                    { name: 'üéØ Type', value: 'Collaboration', inline: true },
                    { name: 'üìã D√©tails', value: 'Informations sur le partenariat', inline: false }
                ]
            },
            creative: {
                title: 'üé® CR√âATION ARTISTIQUE',
                description: 'Partagez vos cr√©ations et inspirez la communaut√© !',
                color: '#e74c3c',
                thumbnail: 'üé®',
                footer: 'Communaut√© Cr√©ative',
                fields: [
                    { name: 'üñºÔ∏è Type de cr√©ation', value: 'Art, Musique, √âcriture...', inline: false },
                    { name: 'üèÜ Concours', value: 'Participez aux concours cr√©atifs', inline: false }
                ]
            },
            support: {
                title: 'üîß SUPPORT TECHNIQUE',
                description: 'Besoin d\'aide ? Notre √©quipe support est l√† pour vous !',
                color: '#95a5a6',
                thumbnail: 'üõ†Ô∏è',
                footer: 'Support Technique',
                fields: [
                    { name: 'üìû Contact', value: 'Ouvrez un ticket support', inline: true },
                    { name: '‚è∞ Disponibilit√©', value: '24h/7j', inline: true },
                    { name: 'üìã Avant de contacter', value: 'Consultez la FAQ', inline: false }
                ]
            }
        };

        const templateData = templates[template];
        if (!templateData) {
            return await interaction.editReply({
                content: '‚ùå Template non trouv√©.'
            });
        }

        // Cr√©ation de l'embed avec le template
        const embed = new EmbedBuilder()
            .setTitle(templateData.title)
            .setDescription(templateData.description)
            .setColor(templateData.color)
            .setFooter({ text: templateData.footer, iconURL: interaction.client.user.displayAvatarURL() })
            .setTimestamp();

        if (templateData.thumbnail) {
            if (templateData.thumbnail.startsWith('http')) {
                embed.setThumbnail(templateData.thumbnail);
            }
        }

        if (templateData.fields) {
            embed.addFields(templateData.fields);
        }

        // Boutons d'action
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`edit_template_${template}`)
                    .setLabel('‚úèÔ∏è Modifier')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId(`send_template_${template}`)
                    .setLabel('üì§ Envoyer')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId(`preview_template_${template}`)
                    .setLabel('üëÅÔ∏è Aper√ßu JSON')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.editReply({
            content: `üé® **Template "${template}" charg√© !**\n\n‚úèÔ∏è Vous pouvez modifier ce template avant de l'envoyer.\nüì§ Ou l'envoyer directement dans ce canal.`,
            embeds: [embed],
            components: [row]
        });

        // Stocker les donn√©es du template pour les interactions futures
        if (!interaction.client.embedTemplates) {
            interaction.client.embedTemplates = new Map();
        }
        interaction.client.embedTemplates.set(interaction.user.id, { template, data: templateData, embed });
    },

    async handleEmbedBuilder(interaction, logger) {
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const targetChannel = interaction.options.getChannel('canal');

        // Interface du constructeur d'embed
        const builderEmbed = new EmbedBuilder()
            .setTitle('üõ†Ô∏è CONSTRUCTEUR D\'EMBED INTERACTIF')
            .setDescription('Utilisez les boutons ci-dessous pour construire votre embed √©tape par √©tape.\n\n**üìã √âtapes :**\n1Ô∏è‚É£ D√©finir le titre et la description\n2Ô∏è‚É£ Choisir la couleur et les images\n3Ô∏è‚É£ Ajouter des champs (optionnel)\n4Ô∏è‚É£ Configurer le footer et timestamp\n5Ô∏è‚É£ Pr√©visualiser et envoyer')
            .setColor('#5865f2')
            .addFields(
                { name: 'üìç Canal de destination', value: targetChannel ? `${targetChannel}` : 'Canal actuel', inline: true },
                { name: 'üìä Progression', value: '0/5 √©tapes compl√©t√©es', inline: true },
                { name: 'üí° Conseil', value: 'Commencez par d√©finir le titre et la description', inline: true }
            )
            .setFooter({ text: 'Constructeur d\'Embed', iconURL: interaction.client.user.displayAvatarURL() })
            .setTimestamp();

        // Boutons du constructeur
        const row1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('builder_step1')
                    .setLabel('1Ô∏è‚É£ Titre & Description')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('builder_step2')
                    .setLabel('2Ô∏è‚É£ Couleur & Images')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('builder_step3')
                    .setLabel('3Ô∏è‚É£ Ajouter Champs')
                    .setStyle(ButtonStyle.Secondary)
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('builder_step4')
                    .setLabel('4Ô∏è‚É£ Footer & Timestamp')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('builder_preview')
                    .setLabel('üëÅÔ∏è Aper√ßu')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('builder_send')
                    .setLabel('üì§ Envoyer')
                    .setStyle(ButtonStyle.Success)
            );

        await interaction.editReply({
            embeds: [builderEmbed],
            components: [row1, row2]
        });

        // Initialiser les donn√©es du constructeur
        if (!interaction.client.embedBuilder) {
            interaction.client.embedBuilder = new Map();
        }
        interaction.client.embedBuilder.set(interaction.user.id, {
            targetChannel: targetChannel || interaction.channel,
            step: 0,
            data: {}
        });
    },

    async handleJsonEmbed(interaction, logger) {
        const { options } = interaction;
        
        await interaction.deferReply({ flags: MessageFlags.Ephemeral });

        const jsonCode = options.getString('code');
        const targetChannel = options.getChannel('canal') || interaction.channel;

        try {
            // Parser le JSON
            const embedData = JSON.parse(jsonCode);
            
            // Cr√©er l'embed √† partir du JSON
            const embed = new EmbedBuilder();
            
            if (embedData.title) embed.setTitle(embedData.title);
            if (embedData.description) embed.setDescription(embedData.description);
            if (embedData.color) embed.setColor(embedData.color);
            if (embedData.thumbnail && embedData.thumbnail.url) embed.setThumbnail(embedData.thumbnail.url);
            if (embedData.image && embedData.image.url) embed.setImage(embedData.image.url);
            if (embedData.author) embed.setAuthor(embedData.author);
            if (embedData.footer) embed.setFooter(embedData.footer);
            if (embedData.timestamp) embed.setTimestamp(new Date(embedData.timestamp));
            if (embedData.fields && Array.isArray(embedData.fields)) {
                embed.addFields(embedData.fields);
            }

            // Envoyer l'embed
            const sentMessage = await targetChannel.send({ embeds: [embed] });
            
            logger.success(`Embed JSON cr√©√© par ${interaction.user.tag} dans #${targetChannel.name}`);
            
            await interaction.editReply({
                content: `‚úÖ **Embed cr√©√© depuis JSON !**\n\nüìç **Canal :** ${targetChannel}\nüÜî **Message ID :** \`${sentMessage.id}\`\n\n[üîó Aller au message](${sentMessage.url})`
            });

        } catch (error) {
            logger.error('Erreur lors du parsing JSON:', error);
            await interaction.editReply({
                content: '‚ùå **Erreur JSON !**\n\nLe code JSON fourni n\'est pas valide. V√©rifiez la syntaxe et r√©essayez.\n\n**Exemple de JSON valide :**\n```json\n{\n  "title": "Mon Titre",\n  "description": "Ma description",\n  "color": "#5865f2",\n  "fields": [\n    {\n      "name": "Champ 1",\n      "value": "Valeur 1",\n      "inline": true\n    }\n  ]\n}\n```'
            });
        }
    },

    // Fonctions utilitaires
    isValidImageUrl(url) {
        try {
            const urlObj = new URL(url);
            const validExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
            return validExtensions.some(ext => urlObj.pathname.toLowerCase().endsWith(ext)) ||
                   url.includes('cdn.discordapp.com') ||
                   url.includes('media.discordapp.net') ||
                   url.includes('imgur.com') ||
                   url.includes('gyazo.com');
        } catch {
            return false;
        }
    },

    parseColor(color) {
        // Si c'est d√©j√† un code hex valide
        if (color.startsWith('#') && /^#[0-9A-F]{6}$/i.test(color)) {
            return color;
        }
        
        // Couleurs nomm√©es
        const namedColors = {
            'rouge': '#ff0000',
            'vert': '#00ff00',
            'bleu': '#0099ff',
            'jaune': '#ffff00',
            'violet': '#9932cc',
            'orange': '#ff8c00',
            'rose': '#ff69b4',
            'blanc': '#ffffff',
            'noir': '#000000',
            'cyan': '#00ffff',
            'or': '#ffd700'
        };
        
        return namedColors[color.toLowerCase()] || color || '#5865f2';
    },

    async showAdvancedEmbedModal(interaction) {
        const modal = new ModalBuilder()
            .setCustomId('advanced_embed_modal')
            .setTitle('üöÄ Embed Avanc√©');

        const titleInput = new TextInputBuilder()
            .setCustomId('embed_title')
            .setLabel('üìã Titre de l\'embed')
            .setStyle(TextInputStyle.Short)
            .setRequired(true)
            .setMaxLength(256)
            .setPlaceholder('Entrez le titre de votre embed...');

        const descriptionInput = new TextInputBuilder()
            .setCustomId('embed_description')
            .setLabel('üìÑ Description')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(true)
            .setMaxLength(4096)
            .setPlaceholder('Entrez la description de votre embed...');

        const colorInput = new TextInputBuilder()
            .setCustomId('embed_color')
            .setLabel('üé® Couleur (hex ou nom)')
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setPlaceholder('#5865f2 ou bleu');

        const fieldsInput = new TextInputBuilder()
            .setCustomId('embed_fields')
            .setLabel('üìã Champs (optionnel)')
            .setStyle(TextInputStyle.Paragraph)
            .setRequired(false)
            .setPlaceholder('Nom1|Valeur1|true\nNom2|Valeur2|false\n(nom|valeur|inline)');

        const footerInput = new TextInputBuilder()
            .setCustomId('embed_footer')
            .setLabel('üìù Footer (optionnel)')
            .setStyle(TextInputStyle.Short)
            .setRequired(false)
            .setMaxLength(2048)
            .setPlaceholder('Texte du footer...');

        modal.addComponents(
            new ActionRowBuilder().addComponents(titleInput),
            new ActionRowBuilder().addComponents(descriptionInput),
            new ActionRowBuilder().addComponents(colorInput),
            new ActionRowBuilder().addComponents(fieldsInput),
            new ActionRowBuilder().addComponents(footerInput)
        );

        await interaction.showModal(modal);
    },

    // ===== SYST√àME IA AVANC√â =====

    analyzeContentWithAI(description, tone) {
        const keywords = description.toLowerCase();
        
        // D√©tection du contexte principal
        let context = 'Communication g√©n√©rale';
        let contextScore = 70;
        
        const contextPatterns = {
            'Annonce officielle': ['annonce', 'officiel', 'important', 'communication', 'information'],
            '√âv√©nement communautaire': ['√©v√©nement', 'event', 'soir√©e', 'rencontre', 'c√©l√©bration', 'f√™te'],
            'Partenariat commercial': ['partenariat', 'collaboration', 'sponsor', 'business', 'entreprise'],
            'Recrutement √©quipe': ['recrutement', 'recherche', '√©quipe', 'staff', 'mod√©rateur', 'admin'],
            'Mise √† jour technique': ['mise √† jour', 'update', 'version', 'am√©lioration', 'correctif'],
            'Concours & Giveaway': ['concours', 'giveaway', 'prix', 'gagner', 'tirage', 'r√©compense'],
            'Support & Aide': ['aide', 'support', 'probl√®me', 'assistance', 'd√©pannage', 'bug'],
            'Gaming & Esport': ['gaming', 'jeu', 'tournoi', 'match', '√©quipe', 'clan', 'esport']
        };

        for (const [ctx, patterns] of Object.entries(contextPatterns)) {
            const matches = patterns.filter(pattern => keywords.includes(pattern)).length;
            if (matches > 0) {
                context = ctx;
                contextScore = Math.min(95, 70 + (matches * 8));
                break;
            }
        }

        // Analyse du ton et style
        const toneAnalysis = {
            official: {
                styleDescription: 'Communication Professionnelle',
                color: '#5865f2',
                thumbnail: 'üì¢',
                footer: 'Communication Officielle'
            },
            friendly: {
                styleDescription: 'Approche Conviviale',
                color: '#57f287',
                thumbnail: 'üëã',
                footer: 'Message Communautaire'
            },
            energetic: {
                styleDescription: 'Dynamisme & √ânergie',
                color: '#ff4757',
                thumbnail: 'üî•',
                footer: '√ânergie & Motivation'
            },
            elegant: {
                styleDescription: 'Raffinement & √âl√©gance',
                color: '#a55eea',
                thumbnail: 'üíé',
                footer: 'Style Raffin√©'
            },
            gaming: {
                styleDescription: 'Univers Gaming',
                color: '#ff6b9d',
                thumbnail: 'üéÆ',
                footer: 'Gaming Community'
            },
            educational: {
                styleDescription: 'Contenu √âducatif',
                color: '#3742fa',
                thumbnail: 'üìö',
                footer: 'Formation & Apprentissage'
            }
        };

        const selectedTone = toneAnalysis[tone] || toneAnalysis.friendly;

        // D√©tection des points forts
        const strengths = [];
        if (description.length > 50) strengths.push('Description d√©taill√©e');
        if (keywords.includes('nouveau') || keywords.includes('innovation')) strengths.push('Aspect novateur');
        if (keywords.includes('communaut√©') || keywords.includes('ensemble')) strengths.push('Esprit communautaire');
        if (keywords.includes('gratuit') || keywords.includes('offert')) strengths.push('Valeur ajout√©e');
        if (keywords.includes('exclusif') || keywords.includes('premium')) strengths.push('Caract√®re exclusif');
        if (keywords.includes('rapide') || keywords.includes('imm√©diat')) strengths.push('R√©activit√©');

        if (strengths.length === 0) {
            strengths.push('Message clair et direct');
        }

        return {
            context,
            contextScore,
            styleDescription: selectedTone.styleDescription,
            color: selectedTone.color,
            thumbnail: selectedTone.thumbnail,
            footer: selectedTone.footer,
            qualityScore: Math.min(100, contextScore + strengths.length * 5),
            strengths,
            tone,
            originalDescription: description
        };
    },

    generateOptimizedContent(analysis) {
        const { context, tone, originalDescription, color, thumbnail, footer } = analysis;
        
        // G√©n√©ration du titre optimis√©
        const titleTemplates = {
            'Annonce officielle': ['üì¢ COMMUNICATION OFFICIELLE', 'üîî ANNONCE IMPORTANTE', 'üìã INFORMATION OFFICIELLE'],
            '√âv√©nement communautaire': ['üéâ √âV√âNEMENT SP√âCIAL', 'üéä C√âL√âBRATION COMMUNAUTAIRE', '‚ú® MOMENT EXCEPTIONNEL'],
            'Partenariat commercial': ['ü§ù NOUVEAU PARTENARIAT', 'üíº COLLABORATION STRAT√âGIQUE', 'üåü ALLIANCE PROFESSIONNELLE'],
            'Recrutement √©quipe': ['üë• RECRUTEMENT OUVERT', 'üéØ REJOIGNEZ L\'√âQUIPE', 'üí™ TALENTS RECHERCH√âS'],
            'Mise √† jour technique': ['üîÑ MISE √Ä JOUR MAJEURE', '‚ö° NOUVELLES FONCTIONNALIT√âS', 'üõ†Ô∏è AM√âLIORATIONS SYST√àME'],
            'Concours & Giveaway': ['üéÅ CONCOURS EXCEPTIONNEL', 'üèÜ GIVEAWAY PREMIUM', 'üíé PRIX √Ä GAGNER'],
            'Support & Aide': ['üÜò ASSISTANCE DISPONIBLE', 'üîß SUPPORT TECHNIQUE', 'üí° AIDE & CONSEILS'],
            'Gaming & Esport': ['üéÆ GAMING UPDATE', 'üèÜ COMP√âTITION ESPORT', '‚öîÔ∏è D√âFI GAMING']
        };

        const possibleTitles = titleTemplates[context] || ['‚ú® MESSAGE IMPORTANT'];
        const selectedTitle = possibleTitles[Math.floor(Math.random() * possibleTitles.length)];

        // G√©n√©ration de la description optimis√©e
        let optimizedDescription = this.enhanceDescription(originalDescription, context, tone);

        // G√©n√©ration des champs contextuels
        const contextualFields = this.generateContextualFields(context, originalDescription);

        return {
            title: selectedTitle,
            description: optimizedDescription,
            color: color,
            thumbnail: thumbnail,
            footer: footer,
            fields: contextualFields,
            timestamp: true
        };
    },

    enhanceDescription(original, context, tone) {
        const enhancements = {
            official: {
                prefix: '**Communication Officielle**\n\n',
                suffix: '\n\n*Cette information est diffus√©e par l\'√©quipe officielle.*'
            },
            friendly: {
                prefix: 'üëã **Salut la communaut√© !**\n\n',
                suffix: '\n\n*N\'h√©sitez pas si vous avez des questions ! üòä*'
            },
            energetic: {
                prefix: 'üî• **C\'EST PARTI !** üî•\n\n',
                suffix: '\n\n*L\'√©nergie est √† son maximum ! Rejoignez-nous ! ‚ö°*'
            },
            elegant: {
                prefix: '‚ú® **Nous avons l\'honneur de vous pr√©senter**\n\n',
                suffix: '\n\n*Avec nos salutations distingu√©es.*'
            },
            gaming: {
                prefix: 'üéÆ **GAMERS, ATTENTION !** üéÆ\n\n',
                suffix: '\n\n*Ready Player One ? Let\'s go ! üöÄ*'
            },
            educational: {
                prefix: 'üìö **Contenu √âducatif**\n\n',
                suffix: '\n\n*Continuez √† apprendre et √† grandir ! üå±*'
            }
        };

        const enhancement = enhancements[tone] || enhancements.friendly;
        
        // Am√©lioration du contenu principal
        let enhanced = original;
        
        // Ajout d'√©mojis contextuels si manquants
        if (!enhanced.includes('üìÖ') && (enhanced.includes('date') || enhanced.includes('quand'))) {
            enhanced = enhanced.replace(/date/gi, 'üìÖ Date');
        }
        if (!enhanced.includes('üìç') && (enhanced.includes('lieu') || enhanced.includes('o√π'))) {
            enhanced = enhanced.replace(/lieu/gi, 'üìç Lieu');
        }
        if (!enhanced.includes('üéØ') && enhanced.includes('objectif')) {
            enhanced = enhanced.replace(/objectif/gi, 'üéØ Objectif');
        }

        return enhancement.prefix + enhanced + enhancement.suffix;
    },

    generateContextualFields(context, description) {
        const fields = [];
        const keywords = description.toLowerCase();

        switch (context) {
            case 'Annonce officielle':
                fields.push(
                    { name: 'üìã Type d\'annonce', value: 'Communication officielle', inline: true },
                    { name: 'üë• Public concern√©', value: 'Tous les membres', inline: true },
                    { name: 'üìÖ Date d\'effet', value: 'Imm√©diate', inline: true }
                );
                break;

            case '√âv√©nement communautaire':
                fields.push(
                    { name: 'üìÖ Quand ?', value: '√Ä d√©finir', inline: true },
                    { name: 'üìç O√π ?', value: 'Serveur Discord', inline: true },
                    { name: 'üë• Participants', value: 'Communaut√© ouverte', inline: true }
                );
                break;

            case 'Partenariat commercial':
                fields.push(
                    { name: 'ü§ù Type de partenariat', value: 'Collaboration strat√©gique', inline: true },
                    { name: 'üéØ Objectifs', value: 'Croissance mutuelle', inline: true },
                    { name: 'üìà B√©n√©fices', value: 'Avantages communaut√©', inline: true }
                );
                break;

            case 'Recrutement √©quipe':
                fields.push(
                    { name: 'üíº Postes disponibles', value: 'Voir description', inline: true },
                    { name: 'üìã Pr√©requis', value: 'Motivation & disponibilit√©', inline: true },
                    { name: 'üìß Candidature', value: 'Contactez l\'√©quipe', inline: true }
                );
                break;

            case 'Concours & Giveaway':
                fields.push(
                    { name: 'üèÜ Prix √† gagner', value: 'Voir description', inline: true },
                    { name: 'üìÖ Date limite', value: '√Ä annoncer', inline: true },
                    { name: 'üìã Participation', value: 'Conditions dans la description', inline: true }
                );
                break;

            default:
                if (keywords.includes('nouveau') || keywords.includes('nouvelle')) {
                    fields.push({ name: '‚ú® Nouveaut√©', value: 'D√©couvrez les d√©tails ci-dessus', inline: false });
                }
                if (keywords.includes('important')) {
                    fields.push({ name: '‚ö†Ô∏è Important', value: 'Veuillez lire attentivement', inline: false });
                }
                break;
        }

        return fields;
    },

    // G√©n√©ration avanc√©e avec plus de d√©tails
    generateAdvancedOptimizedContent(analysis) {
        const { context, tone, originalDescription, color, thumbnail, footer } = analysis;
        
        // G√©n√©ration du titre optimis√© avec plus de vari√©t√©
        const titleTemplates = {
            'Annonce officielle': ['üì¢ COMMUNICATION OFFICIELLE', 'üîî ANNONCE IMPORTANTE', 'üìã INFORMATION OFFICIELLE', '‚ö†Ô∏è AVIS OFFICIEL'],
            '√âv√©nement communautaire': ['üéâ √âV√âNEMENT SP√âCIAL', 'üéä C√âL√âBRATION COMMUNAUTAIRE', '‚ú® MOMENT EXCEPTIONNEL', 'üéà RASSEMBLEMENT COMMUNAUT√â'],
            'Partenariat commercial': ['ü§ù NOUVEAU PARTENARIAT', 'üíº COLLABORATION STRAT√âGIQUE', 'üåü ALLIANCE PROFESSIONNELLE', 'üîó PARTENARIAT EXCLUSIF'],
            'Recrutement √©quipe': ['üë• RECRUTEMENT OUVERT', 'üéØ REJOIGNEZ L\'√âQUIPE', 'üí™ TALENTS RECHERCH√âS', 'üöÄ OPPORTUNIT√â CARRI√àRE'],
            'Mise √† jour technique': ['üîÑ MISE √Ä JOUR MAJEURE', '‚ö° NOUVELLES FONCTIONNALIT√âS', 'üõ†Ô∏è AM√âLIORATIONS SYST√àME', 'üîß √âVOLUTION TECHNIQUE'],
            'Concours & Giveaway': ['üéÅ CONCOURS EXCEPTIONNEL', 'üèÜ GIVEAWAY PREMIUM', 'üíé PRIX √Ä GAGNER', 'üéä GRAND CONCOURS'],
            'Support & Aide': ['üÜò ASSISTANCE DISPONIBLE', 'üîß SUPPORT TECHNIQUE', 'üí° AIDE & CONSEILS', 'üõü SUPPORT COMMUNAUT√â'],
            'Gaming & Esport': ['üéÆ GAMING UPDATE', 'üèÜ COMP√âTITION ESPORT', '‚öîÔ∏è D√âFI GAMING', 'üéØ TOURNOI √âPIQUE']
        };

        const possibleTitles = titleTemplates[context] || ['‚ú® MESSAGE IMPORTANT', 'üì£ INFORMATION CL√âE', 'üî• ACTUALIT√â MAJEURE'];
        const selectedTitle = possibleTitles[Math.floor(Math.random() * possibleTitles.length)];

        // G√©n√©ration de la description optimis√©e et d√©taill√©e
        let optimizedDescription = this.enhanceAdvancedDescription(originalDescription, context, tone);

        // G√©n√©ration des champs contextuels avanc√©s
        const contextualFields = this.generateAdvancedContextualFields(context, originalDescription);

        return {
            title: selectedTitle,
            description: optimizedDescription,
            color: color,
            thumbnail: thumbnail,
            footer: footer,
            fields: contextualFields,
            timestamp: true
        };
    },

    // Description am√©lior√©e avec plus de d√©tails
    enhanceAdvancedDescription(original, context, tone) {
        const enhancements = {
            official: {
                prefix: '**üìã Communication Officielle**\n\n',
                middle: '\n\n**üéØ D√©tails importants :**\n',
                suffix: '\n\n*Cette information est diffus√©e par l\'√©quipe officielle et entre en vigueur imm√©diatement.*'
            },
            friendly: {
                prefix: 'üëã **Salut la communaut√© !**\n\n',
                middle: '\n\n**üí° Ce qu\'il faut retenir :**\n',
                suffix: '\n\n*N\'h√©sitez pas si vous avez des questions ! Notre √©quipe est l√† pour vous aider ! üòä*'
            },
            energetic: {
                prefix: 'üî• **C\'EST PARTI !** üî•\n\n',
                middle: '\n\n**‚ö° Points cl√©s √† retenir :**\n',
                suffix: '\n\n*L\'√©nergie est √† son maximum ! Rejoignez-nous pour cette aventure incroyable ! üöÄ*'
            },
            elegant: {
                prefix: '‚ú® **Nous avons l\'honneur de vous pr√©senter**\n\n',
                middle: '\n\n**üé≠ √âl√©ments remarquables :**\n',
                suffix: '\n\n*Avec nos salutations les plus distingu√©es et notre reconnaissance.*'
            },
            gaming: {
                prefix: 'üéÆ **GAMERS, ATTENTION !** üéÆ\n\n',
                middle: '\n\n**üéØ Infos de gameplay :**\n',
                suffix: '\n\n*Ready Player One ? Let\'s go ! Que la partie commence ! üöÄ*'
            },
            educational: {
                prefix: 'üìö **Contenu √âducatif & Informatif**\n\n',
                middle: '\n\n**üß† Points d\'apprentissage :**\n',
                suffix: '\n\n*Continuez √† apprendre et √† grandir ! Le savoir est votre meilleure arme ! üå±*'
            }
        };

        const enhancement = enhancements[tone] || enhancements.friendly;
        
        // Am√©lioration du contenu principal avec plus de d√©tails
        let enhanced = original;
        
        // Ajout d'√©mojis contextuels et de structure
        if (!enhanced.includes('üìÖ') && (enhanced.includes('date') || enhanced.includes('quand'))) {
            enhanced = enhanced.replace(/date/gi, 'üìÖ Date');
        }
        if (!enhanced.includes('üìç') && (enhanced.includes('lieu') || enhanced.includes('o√π'))) {
            enhanced = enhanced.replace(/lieu/gi, 'üìç Lieu');
        }
        if (!enhanced.includes('üéØ') && enhanced.includes('objectif')) {
            enhanced = enhanced.replace(/objectif/gi, 'üéØ Objectif');
        }

        // Ajout de d√©tails contextuels
        let contextualDetails = '';
        if (enhanced.includes('d√©veloppement') || enhanced.includes('bot')) {
            contextualDetails = '‚Ä¢ üîß Am√©liorations techniques en cours\n‚Ä¢ üìà Optimisation des performances\n‚Ä¢ üõ°Ô∏è Renforcement de la s√©curit√©';
        } else if (enhanced.includes('erreur') || enhanced.includes('bug')) {
            contextualDetails = '‚Ä¢ üîç Identification des probl√®mes\n‚Ä¢ ‚ö° Correction en cours\n‚Ä¢ üîÑ Tests de validation';
        } else if (enhanced.includes('nouveau') || enhanced.includes('nouvelle')) {
            contextualDetails = '‚Ä¢ ‚ú® Innovation technologique\n‚Ä¢ üéØ Am√©lioration de l\'exp√©rience\n‚Ä¢ üöÄ Fonctionnalit√©s avanc√©es';
        } else {
            contextualDetails = '‚Ä¢ üìã Information d√©taill√©e\n‚Ä¢ üéØ Communication transparente\n‚Ä¢ üí° Mise √† jour importante';
        }

        return enhancement.prefix + enhanced + enhancement.middle + contextualDetails + enhancement.suffix;
    },

    // Champs contextuels avanc√©s
    generateAdvancedContextualFields(context, description) {
        const fields = [];
        const keywords = description.toLowerCase();

        // Champs de base selon le contexte
        switch (context) {
            case 'Annonce officielle':
                fields.push(
                    { name: 'üìã Type d\'annonce', value: 'Communication officielle', inline: true },
                    { name: 'üë• Public concern√©', value: 'Tous les membres', inline: true },
                    { name: 'üìÖ Date d\'effet', value: 'Imm√©diate', inline: true },
                    { name: 'üîî Priorit√©', value: 'Haute importance', inline: true },
                    { name: 'üìû Contact', value: '√âquipe administrative', inline: true },
                    { name: 'üìã Suivi', value: 'Mise √† jour r√©guli√®re', inline: true }
                );
                break;

            case 'Mise √† jour technique':
                if (keywords.includes('bot') || keywords.includes('d√©veloppement')) {
                    fields.push(
                        { name: 'üîß Type de mise √† jour', value: 'D√©veloppement technique', inline: true },
                        { name: 'üìä Progression', value: 'En cours d\'optimisation', inline: true },
                        { name: 'üõ°Ô∏è S√©curit√©', value: 'Renforc√©e', inline: true },
                        { name: '‚ö° Performance', value: 'Am√©lior√©e', inline: true },
                        { name: 'üîÑ Fr√©quence', value: 'Mise √† jour continue', inline: true },
                        { name: 'üìà Impact', value: 'Am√©lioration globale', inline: true }
                    );
                }
                break;

            default:
                // Champs g√©n√©riques mais d√©taill√©s
                if (keywords.includes('nouveau') || keywords.includes('nouvelle')) {
                    fields.push(
                        { name: '‚ú® Nouveaut√©', value: 'Innovation majeure', inline: true },
                        { name: 'üéØ Objectif', value: 'Am√©lioration continue', inline: true }
                    );
                }
                if (keywords.includes('important')) {
                    fields.push(
                        { name: '‚ö†Ô∏è Importance', value: 'Lecture recommand√©e', inline: true },
                        { name: 'üìã Action requise', value: 'Prise de connaissance', inline: true }
                    );
                }
                break;
        }

        // Ajout de champs dynamiques selon les mots-cl√©s
        if (keywords.includes('erreur') || keywords.includes('bug')) {
            fields.push({ name: 'üîß Statut correction', value: 'En cours de r√©solution', inline: true });
        }
        if (keywords.includes('am√©lioration') || keywords.includes('optimisation')) {
            fields.push({ name: 'üìà B√©n√©fices', value: 'Performance accrue', inline: true });
        }

        return fields;
    }
};
