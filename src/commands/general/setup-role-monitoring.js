import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits, ChannelType } from 'discord.js';
import RoleMentionManager from '../../utils/RoleMentionManager.js';

export default {
    data: new SlashCommandBuilder()
        .setName('setup-role-monitoring')
        .setDescription('üîß Configurer la surveillance s√©curis√©e des mentions de r√¥les')
        .addBooleanOption(option =>
            option.setName('activer')
                .setDescription('Activer ou d√©sactiver la surveillance (LECTURE SEULE)')
                .setRequired(true))
        .addChannelOption(option =>
            option.setName('salon-logs')
                .setDescription('Salon pour les notifications (optionnel)')
                .addChannelTypes(ChannelType.GuildText)
                .setRequired(false))
        .addIntegerOption(option =>
            option.setName('intervalle')
                .setDescription('Intervalle de v√©rification en minutes (d√©faut: 60)')
                .setMinValue(30)
                .setMaxValue(1440)
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),
    
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const enable = interaction.options.getBoolean('activer');
            const logChannel = interaction.options.getChannel('salon-logs');
            const interval = interaction.options.getInteger('intervalle') || 60;

            const guild = interaction.guild;
            
            // Initialiser le gestionnaire s'il n'existe pas
            if (!interaction.client.roleMentionManager) {
                interaction.client.roleMentionManager = new RoleMentionManager(interaction.client);
            }

            const manager = interaction.client.roleMentionManager;

            const embed = new EmbedBuilder()
                .setColor('#2b2d31')
                .setTitle('üîí CONFIGURATION S√âCURIS√âE DE LA SURVEILLANCE')
                .setTimestamp();

            if (enable) {
                // Configurer la surveillance EN MODE S√âCURIS√â UNIQUEMENT
                const options = {
                    autoFix: false, // TOUJOURS D√âSACTIV√â POUR LA S√âCURIT√â
                    logChannel: logChannel?.id || null,
                    notifyAdmins: true, // TOUJOURS ACTIV√â
                    checkInterval: Math.max(interval, 30) * 60 * 1000 // Minimum 30 minutes
                };

                await manager.initializeGuildMonitoring(guild, options);

                // Effectuer une v√©rification initiale
                const initialCheck = await manager.quickCheck(guild);

                embed.setColor('#00ff00');
                embed.setDescription('‚úÖ **SURVEILLANCE S√âCURIS√âE ACTIV√âE**\n\nüîí **MODE S√âCURIS√â FORC√â** - Aucune modification automatique ne sera jamais effectu√©e');
                
                embed.addFields(
                    {
                        name: 'üõ°Ô∏è GARANTIES DE S√âCURIT√â',
                        value: '‚Ä¢ **Correction automatique:** ‚ùå D√âSACTIV√âE D√âFINITIVEMENT\n' +
                               '‚Ä¢ **Mode lecture seule:** ‚úÖ Analyse uniquement\n' +
                               '‚Ä¢ **Approbation requise:** ‚úÖ Pour toute modification\n' +
                               '‚Ä¢ **Aucun risque:** ‚úÖ Votre serveur reste intact',
                        inline: false
                    },
                    {
                        name: '‚öôÔ∏è CONFIGURATION ACTIVE',
                        value: `‚Ä¢ **Salon de logs:** ${logChannel ? `${logChannel}` : '‚ùå Salon syst√®me utilis√©'}\n` +
                               `‚Ä¢ **Notifications admin:** ‚úÖ Toujours activ√©es\n` +
                               `‚Ä¢ **Intervalle:** ${Math.max(interval, 30)} minutes\n` +
                               `‚Ä¢ **Type:** üîç Surveillance passive uniquement`,
                        inline: false
                    },
                    {
                        name: 'üìä V√âRIFICATION INITIALE',
                        value: `‚Ä¢ **Probl√®mes d√©tect√©s:** ${initialCheck.issueCount}\n` +
                               `‚Ä¢ **S√©v√©rit√©:** ${this.getSeverityEmoji(initialCheck.severity)} ${initialCheck.severity}\n` +
                               `‚Ä¢ **Statut:** ${initialCheck.hasIssues ? '‚ö†Ô∏è Attention requise' : '‚úÖ Tout va bien'}`,
                        inline: false
                    }
                );

                if (initialCheck.hasIssues) {
                    const issueTypes = [...new Set(initialCheck.issues.map(i => i.type))];
                    embed.addFields({
                        name: 'üîç TYPES DE PROBL√àMES D√âTECT√âS',
                        value: issueTypes.map(type => {
                            switch (type) {
                                case 'NON_MENTIONABLE_ROLE':
                                    return '‚Ä¢ üé≠ R√¥les non-mentionnables';
                                case 'CHANNEL_BLOCKS_MENTIONS':
                                    return '‚Ä¢ üö´ Salons bloquant les mentions';
                                case 'CHANNEL_BLOCKS_ROLE_MENTIONS':
                                    return '‚Ä¢ üîí Permissions restrictives';
                                case 'NO_MENTION_ROLES':
                                    return '‚Ä¢ ‚ùì Aucun r√¥le de mention';
                                default:
                                    return `‚Ä¢ ‚ö†Ô∏è ${type}`;
                            }
                        }).join('\n'),
                        inline: false
                    });

                    embed.addFields({
                        name: 'üîß ACTIONS S√âCURIS√âES DISPONIBLES',
                        value: '‚Ä¢ **`/fix-role-mentions`** - Analyse et correction avec votre approbation\n' +
                               '‚Ä¢ **`/check-role-mentions`** - Diagnostic d√©taill√© en lecture seule\n' +
                               '‚Ä¢ **`/force-role-check`** - V√©rification imm√©diate\n\n' +
                               '‚ö†Ô∏è **IMPORTANT:** Toutes les corrections n√©cessitent votre validation explicite',
                        inline: false
                    });
                }

                embed.addFields({
                    name: 'üìã FONCTIONNEMENT DE LA SURVEILLANCE',
                    value: `‚Ä¢ **V√©rification automatique** toutes les ${Math.max(interval, 30)} minutes\n` +
                           '‚Ä¢ **D√©tection des probl√®mes** en mode lecture seule\n' +
                           '‚Ä¢ **Notifications** envoy√©es en cas de probl√®me\n' +
                           '‚Ä¢ **Aucune modification** sans votre approbation\n' +
                           '‚Ä¢ **Logs d√©taill√©s** de toutes les activit√©s',
                    inline: false
                });

            } else {
                // D√©sactiver la surveillance
                manager.stopMonitoring(guild.id);

                embed.setColor('#ff6b6b');
                embed.setDescription('‚ùå **SURVEILLANCE D√âSACTIV√âE**');
                embed.addFields({
                    name: '‚ÑπÔ∏è INFORMATION',
                    value: 'La surveillance automatique des mentions de r√¥les a √©t√© d√©sactiv√©e pour ce serveur.\n\n' +
                           '**Commandes manuelles toujours disponibles:**\n' +
                           '‚Ä¢ `/check-role-mentions` - Diagnostic complet\n' +
                           '‚Ä¢ `/fix-role-mentions` - Correction s√©curis√©e avec approbation\n' +
                           '‚Ä¢ `/force-role-check` - V√©rification imm√©diate',
                    inline: false
                });
            }

            // Guide de s√©curit√©
            embed.addFields({
                name: 'üõ°Ô∏è POLITIQUE DE S√âCURIT√â',
                value: '‚Ä¢ **Z√©ro modification automatique** - Votre serveur ne sera jamais modifi√© sans votre accord\n' +
                       '‚Ä¢ **Analyse passive uniquement** - La surveillance ne fait que d√©tecter les probl√®mes\n' +
                       '‚Ä¢ **Contr√¥le total** - Vous d√©cidez de chaque action √† entreprendre\n' +
                       '‚Ä¢ **Transparence compl√®te** - Tous les probl√®mes d√©tect√©s vous sont signal√©s\n' +
                       '‚Ä¢ **R√©versibilit√©** - Toutes les corrections peuvent √™tre annul√©es',
                inline: false
            });

            // Commandes utiles
            embed.addFields({
                name: 'üìö COMMANDES DISPONIBLES',
                value: '‚Ä¢ `/setup-role-monitoring` - Configurer la surveillance s√©curis√©e\n' +
                       '‚Ä¢ `/check-role-mentions` - Diagnostic d√©taill√© (lecture seule)\n' +
                       '‚Ä¢ `/fix-role-mentions` - Correction avec approbation obligatoire\n' +
                       '‚Ä¢ `/role-monitoring-status` - Voir le statut de surveillance\n' +
                       '‚Ä¢ `/force-role-check` - V√©rification manuelle imm√©diate',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Erreur lors de la configuration de la surveillance:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå ERREUR DE CONFIGURATION')
                .setDescription('Une erreur est survenue lors de la configuration de la surveillance s√©curis√©e.')
                .addFields({
                    name: 'üîß SOLUTIONS POSSIBLES',
                    value: '‚Ä¢ V√©rifiez que le bot a les permissions de lecture n√©cessaires\n' +
                           '‚Ä¢ Assurez-vous que le salon de logs est accessible au bot\n' +
                           '‚Ä¢ R√©essayez dans quelques instants\n' +
                           '‚Ä¢ Contactez le support si le probl√®me persiste',
                    inline: false
                })
                .addFields({
                    name: 'üõ°Ô∏è S√âCURIT√â GARANTIE',
                    value: 'M√™me en cas d\'erreur, aucune modification n\'a √©t√© apport√©e √† votre serveur.',
                    inline: false
                })
                .setTimestamp();

            await interaction.editReply({ embeds: [errorEmbed] });
        }
    },

    getSeverityEmoji(severity) {
        switch (severity) {
            case 'HIGH': return 'üî¥';
            case 'MEDIUM': return 'üü°';
            case 'LOW': return 'üü¢';
            case 'NONE': return '‚úÖ';
            default: return '‚ö™';
        }
    }
};
