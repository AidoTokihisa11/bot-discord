import { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('check-role-mentions')
        .setDescription('üîç Diagnostiquer les probl√®mes de mention de r√¥les')
        .addChannelOption(option =>
            option.setName('salon')
                .setDescription('Salon √† analyser (optionnel)')
                .setRequired(false))
        .addRoleOption(option =>
            option.setName('role')
                .setDescription('R√¥le √† analyser (optionnel)')
                .setRequired(false))
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
    
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: true });

            const targetChannel = interaction.options.getChannel('salon') || interaction.channel;
            const targetRole = interaction.options.getRole('role');
            const member = interaction.member;

            const embed = new EmbedBuilder()
                .setColor('#2b2d31')
                .setTitle('üîç DIAGNOSTIC DES MENTIONS DE R√îLES')
                .setTimestamp();

            let description = '';
            let issues = [];
            let solutions = [];

            // Informations de base
            description += `**üìç SALON ANALYS√â:** ${targetChannel}\n`;
            description += `**üë§ UTILISATEUR:** ${member.displayName}\n`;
            if (targetRole) {
                description += `**üé≠ R√îLE CIBL√â:** ${targetRole}\n`;
            }
            description += `\n`;

            // 1. V√©rifier les permissions de l'utilisateur dans le salon
            const userPerms = targetChannel.permissionsFor(member);
            const canMentionEveryone = userPerms.has(PermissionFlagsBits.MentionEveryone);
            
            description += `**üîê VOS PERMISSIONS DANS CE SALON:**\n`;
            description += `‚Ä¢ Mentionner @everyone/@here/r√¥les: ${canMentionEveryone ? '‚úÖ' : '‚ùå'}\n`;
            
            if (!canMentionEveryone) {
                issues.push('Vous n\'avez pas la permission de mentionner les r√¥les dans ce salon');
                solutions.push('Demandez √† un administrateur d\'accorder la permission "Mentionner @everyone, @here et tous les r√¥les" pour votre r√¥le dans ce salon');
            }

            // 2. Analyser tous les r√¥les du serveur
            const roles = interaction.guild.roles.cache
                .filter(role => role.id !== interaction.guild.id) // Exclure @everyone
                .sort((a, b) => b.position - a.position);

            let mentionableRoles = 0;
            let nonMentionableRoles = 0;
            let higherRoles = 0;
            let accessibleRoles = 0;

            description += `\n**üé≠ ANALYSE DES R√îLES DU SERVEUR:**\n`;

            for (const [roleId, role] of roles) {
                const isMentionable = role.mentionable;
                const isHigher = role.position >= member.roles.highest.position;
                
                if (isMentionable) {
                    mentionableRoles++;
                    if (!isHigher) {
                        accessibleRoles++;
                    }
                } else {
                    nonMentionableRoles++;
                }
                
                if (isHigher) {
                    higherRoles++;
                }
            }

            description += `‚Ä¢ Total des r√¥les: ${roles.size}\n`;
            description += `‚Ä¢ R√¥les mentionnables: ${mentionableRoles}\n`;
            description += `‚Ä¢ R√¥les non-mentionnables: ${nonMentionableRoles}\n`;
            description += `‚Ä¢ R√¥les plus √©lev√©s que le v√¥tre: ${higherRoles}\n`;
            description += `‚Ä¢ R√¥les que vous pouvez mentionner: ${accessibleRoles}\n`;

            // 3. Analyse sp√©cifique du r√¥le cibl√©
            if (targetRole) {
                description += `\n**üéØ ANALYSE DU R√îLE SP√âCIFIQUE:**\n`;
                description += `‚Ä¢ Nom: ${targetRole.name}\n`;
                description += `‚Ä¢ Position: ${targetRole.position}\n`;
                description += `‚Ä¢ Votre position: ${member.roles.highest.position}\n`;
                description += `‚Ä¢ Mentionnable: ${targetRole.mentionable ? '‚úÖ' : '‚ùå'}\n`;
                description += `‚Ä¢ Vous pouvez le mentionner: ${targetRole.position < member.roles.highest.position && targetRole.mentionable ? '‚úÖ' : '‚ùå'}\n`;

                if (!targetRole.mentionable) {
                    issues.push(`Le r√¥le ${targetRole.name} n'est pas configur√© comme mentionnable`);
                    solutions.push(`Activez "Autoriser tous √† @mentionner ce r√¥le" dans les param√®tres du r√¥le ${targetRole.name}`);
                }

                if (targetRole.position >= member.roles.highest.position) {
                    issues.push(`Le r√¥le ${targetRole.name} est plus √©lev√© que votre r√¥le le plus haut`);
                    solutions.push('Seuls les utilisateurs avec des r√¥les plus √©lev√©s peuvent mentionner ce r√¥le');
                }
            }

            // 4. V√©rifier les permissions sp√©cifiques du salon
            description += `\n**‚öôÔ∏è CONFIGURATION DU SALON:**\n`;
            const everyoneOverwrite = targetChannel.permissionOverwrites.cache.get(interaction.guild.id);
            const memberOverwrites = targetChannel.permissionOverwrites.cache.filter(overwrite => 
                member.roles.cache.has(overwrite.id)
            );

            if (everyoneOverwrite) {
                const everyoneMention = everyoneOverwrite.allow.has(PermissionFlagsBits.MentionEveryone) ? '‚úÖ' : 
                                      everyoneOverwrite.deny.has(PermissionFlagsBits.MentionEveryone) ? '‚ùå' : 'üîÑ';
                description += `‚Ä¢ Permission @everyone: ${everyoneMention}\n`;
            }

            if (memberOverwrites.size > 0) {
                description += `‚Ä¢ Permissions de vos r√¥les:\n`;
                memberOverwrites.forEach(overwrite => {
                    const role = interaction.guild.roles.cache.get(overwrite.id);
                    const mention = overwrite.allow.has(PermissionFlagsBits.MentionEveryone) ? '‚úÖ' : 
                                   overwrite.deny.has(PermissionFlagsBits.MentionEveryone) ? '‚ùå' : 'üîÑ';
                    description += `  ‚Ä¢ ${role.name}: ${mention}\n`;
                });
            }

            embed.setDescription(description);

            // Ajouter les probl√®mes et solutions
            if (issues.length > 0) {
                embed.addFields({
                    name: '‚ö†Ô∏è PROBL√àMES D√âTECT√âS',
                    value: issues.map((issue, index) => `${index + 1}. ${issue}`).join('\n'),
                    inline: false
                });
            }

            if (solutions.length > 0) {
                embed.addFields({
                    name: 'üí° SOLUTIONS RECOMMAND√âES',
                    value: solutions.map((solution, index) => `${index + 1}. ${solution}`).join('\n'),
                    inline: false
                });
            }

            if (issues.length === 0) {
                embed.setColor('#00ff00');
                embed.addFields({
                    name: '‚úÖ R√âSULTAT',
                    value: 'Aucun probl√®me d√©tect√© ! Vous devriez pouvoir mentionner les r√¥les autoris√©s dans ce salon.',
                    inline: false
                });
            } else {
                embed.setColor('#ff6b6b');
            }

            // Ajouter un guide rapide
            embed.addFields({
                name: 'üìö GUIDE RAPIDE',
                value: '**Pour mentionner un r√¥le, vous devez :**\n' +
                       '‚Ä¢ Avoir la permission "Mentionner @everyone/@here/r√¥les"\n' +
                       '‚Ä¢ Le r√¥le doit √™tre configur√© comme "mentionnable"\n' +
                       '‚Ä¢ Votre r√¥le doit √™tre plus √©lev√© que le r√¥le √† mentionner\n' +
                       '‚Ä¢ Le salon ne doit pas interdire cette permission',
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Erreur lors du diagnostic des mentions:', error);
            await interaction.editReply({
                content: '‚ùå Une erreur est survenue lors du diagnostic.',
                ephemeral: true
            });
        }
    },
};
