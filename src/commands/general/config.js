import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, ChannelType, PermissionFlagsBits } from 'discord.js';

import AccessRestriction from '../../utils/AccessRestriction.js';
export default {
    data: new SlashCommandBuilder()
        .setName('config')
        .setDescription('‚öôÔ∏è Configuration avanc√©e du serveur Team7 Bot')
        .addSubcommand(subcommand =>
            subcommand
                .setName('view')
                .setDescription('Afficher la configuration actuelle')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('moderation')
                .setDescription('Configurer le syst√®me de mod√©ration')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('tickets')
                .setDescription('Configurer le syst√®me de tickets')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('logs')
                .setDescription('Configurer les logs du serveur')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('autoroles')
                .setDescription('Configurer les r√¥les automatiques')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('welcome')
                .setDescription('Configurer les messages de bienvenue')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('reset')
                .setDescription('R√©initialiser la configuration')
        ),

    async execute(interaction) {
        // === V√âRIFICATION D'ACC√àS GLOBALE ===
        const accessRestriction = new AccessRestriction();
        const hasAccess = await accessRestriction.checkAccess(interaction);
        if (!hasAccess) {
            return; // Acc√®s refus√©, message d√©j√† envoy√©
        }


        const subcommand = interaction.options.getSubcommand();

        // V√©rifier les permissions
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageGuild)) {
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå **Permissions insuffisantes**')
                .setDescription('Vous devez avoir la permission "G√©rer le serveur" pour utiliser cette commande.')
                .setColor('#e74c3c');
            return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        switch (subcommand) {
            case 'view':
                await this.showConfigView(interaction);
                break;
            case 'moderation':
                await this.showModerationConfig(interaction);
                break;
            case 'tickets':
                await this.showTicketsConfig(interaction);
                break;
            case 'logs':
                await this.showLogsConfig(interaction);
                break;
            case 'autoroles':
                await this.showAutorolesConfig(interaction);
                break;
            case 'welcome':
                await this.showWelcomeConfig(interaction);
                break;
            case 'reset':
                await this.showResetConfig(interaction);
                break;
        }
    },

    async showConfigView(interaction) {
        await interaction.deferReply();

        // R√©cup√©rer la configuration actuelle (simulation)
        const config = await this.getCurrentConfig(interaction.guild);

        const embed = new EmbedBuilder()
            .setTitle('‚öôÔ∏è **CONFIGURATION SERVEUR**')
            .setDescription(`**Configuration actuelle de ${interaction.guild.name}**`)
            .addFields(
                {
                    name: 'üõ°Ô∏è **Mod√©ration**',
                    value: `**Status :** ${config.moderation.enabled ? 'üü¢ Activ√©' : 'üî¥ D√©sactiv√©'}\n**Auto-mod :** ${config.moderation.automod ? '‚úÖ' : '‚ùå'}\n**Salon logs :** ${config.moderation.logChannel || 'Non configur√©'}\n**R√¥le mute :** ${config.moderation.muteRole || 'Non configur√©'}`,
                    inline: true
                },
                {
                    name: 'üé´ **Syst√®me de tickets**',
                    value: `**Status :** ${config.tickets.enabled ? 'üü¢ Activ√©' : 'üî¥ D√©sactiv√©'}\n**Cat√©gorie :** ${config.tickets.category || 'Non configur√©e'}\n**R√¥le support :** ${config.tickets.supportRole || 'Non configur√©'}\n**Tickets ouverts :** ${config.tickets.openCount || 0}`,
                    inline: true
                },
                {
                    name: 'üìù **Logs**',
                    value: `**Salon g√©n√©ral :** ${config.logs.general || 'Non configur√©'}\n**Mod√©ration :** ${config.logs.moderation || 'Non configur√©'}\n**Membres :** ${config.logs.members || 'Non configur√©'}\n**Messages :** ${config.logs.messages || 'Non configur√©'}`,
                    inline: true
                },
                {
                    name: 'üé≠ **R√¥les automatiques**',
                    value: `**R√¥le membres :** ${config.autoroles.member || 'Non configur√©'}\n**R√¥le bots :** ${config.autoroles.bot || 'Non configur√©'}\n**R√¥les niveau :** ${config.autoroles.levelRoles ? '‚úÖ Configur√©s' : '‚ùå Non configur√©s'}`,
                    inline: true
                },
                {
                    name: 'üëã **Messages de bienvenue**',
                    value: `**Status :** ${config.welcome.enabled ? 'üü¢ Activ√©' : 'üî¥ D√©sactiv√©'}\n**Salon :** ${config.welcome.channel || 'Non configur√©'}\n**Message personnalis√© :** ${config.welcome.customMessage ? '‚úÖ' : '‚ùå'}\n**Embed :** ${config.welcome.embed ? '‚úÖ' : '‚ùå'}`,
                    inline: true
                },
                {
                    name: 'üîß **Param√®tres g√©n√©raux**',
                    value: `**Pr√©fixe :** ${config.general.prefix || '/'}\n**Langue :** ${config.general.language || 'Fran√ßais'}\n**Timezone :** ${config.general.timezone || 'Europe/Paris'}\n**Derni√®re MAJ :** <t:${Math.floor(Date.now() / 1000)}:R>`,
                    inline: true
                }
            )
            .setColor('#3498db')
            .setThumbnail(interaction.guild.iconURL({ size: 256 }))
            .setImage('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: `Configuration de ${interaction.guild.name} ‚Ä¢ Team7 Bot`,
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_moderation')
                    .setLabel('üõ°Ô∏è Mod√©ration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_tickets')
                    .setLabel('üé´ Tickets')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_logs')
                    .setLabel('üìù Logs')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_welcome')
                    .setLabel('üëã Bienvenue')
                    .setStyle(ButtonStyle.Success)
            );

        const actionRow2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_autoroles')
                    .setLabel('üé≠ Auto-r√¥les')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_export')
                    .setLabel('üì• Exporter config')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('config_import')
                    .setLabel('üì§ Importer config')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_reset')
                    .setLabel('üîÑ Reset')
                    .setStyle(ButtonStyle.Danger)
            );

        await interaction.editReply({
            embeds: [embed],
            components: [actionRow, actionRow2]
        });
    },

    async showModerationConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üõ°Ô∏è **CONFIGURATION MOD√âRATION**')
            .setDescription('**Configurez le syst√®me de mod√©ration automatique**')
            .addFields(
                {
                    name: '‚öôÔ∏è **Param√®tres disponibles**',
                    value: `‚Ä¢ **Auto-mod√©ration** : Filtres automatiques\n‚Ä¢ **Salon logs** : Enregistrement des actions\n‚Ä¢ **R√¥le mute** : R√¥le de sanction temporaire\n‚Ä¢ **Niveaux d'alerte** : Syst√®me d'escalade\n‚Ä¢ **Mots interdits** : Liste de mots bannis`,
                    inline: false
                },
                {
                    name: 'üîß **Fonctionnalit√©s auto-mod**',
                    value: `‚Ä¢ **Anti-spam** : D√©tection messages r√©p√©t√©s\n‚Ä¢ **Anti-flood** : Limitation fr√©quence\n‚Ä¢ **Anti-caps** : Filtrage majuscules\n‚Ä¢ **Anti-mention** : Limitation mentions\n‚Ä¢ **Anti-lien** : Filtrage URLs`,
                    inline: true
                },
                {
                    name: 'üìä **Niveaux de sanction**',
                    value: `‚Ä¢ **Niveau 1** : Avertissement\n‚Ä¢ **Niveau 2** : Mute temporaire\n‚Ä¢ **Niveau 3** : Kick du serveur\n‚Ä¢ **Niveau 4** : Ban temporaire\n‚Ä¢ **Niveau 5** : Ban permanent`,
                    inline: true
                }
            )
            .setColor('#e74c3c')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_moderation_option')
                    .setPlaceholder('üõ†Ô∏è Choisissez un param√®tre √† configurer')
                    .addOptions([
                        {
                            label: 'Activer/D√©sactiver auto-mod',
                            description: 'Basculer la mod√©ration automatique',
                            value: 'toggle_automod',
                            emoji: 'üîÑ'
                        },
                        {
                            label: 'Salon de logs',
                            description: 'D√©finir le salon des logs de mod√©ration',
                            value: 'set_log_channel',
                            emoji: 'üìù'
                        },
                        {
                            label: 'R√¥le mute',
                            description: 'Configurer le r√¥le de mute',
                            value: 'set_mute_role',
                            emoji: 'üîá'
                        },
                        {
                            label: 'Filtres anti-spam',
                            description: 'Configurer les filtres automatiques',
                            value: 'configure_filters',
                            emoji: 'üö´'
                        },
                        {
                            label: 'Mots interdits',
                            description: 'G√©rer la liste des mots bannis',
                            value: 'manage_blacklist',
                            emoji: 'üìù'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_moderation_test')
                    .setLabel('üß™ Tester la configuration')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_moderation_logs')
                    .setLabel('üìä Voir les logs')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async showTicketsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üé´ **CONFIGURATION TICKETS**')
            .setDescription('**Configurez le syst√®me de support par tickets**')
            .addFields(
                {
                    name: 'üèóÔ∏è **Structure des tickets**',
                    value: `‚Ä¢ **Cat√©gorie** : Cat√©gorie pour les tickets\n‚Ä¢ **R√¥le support** : √âquipe de support\n‚Ä¢ **Canal cr√©ation** : Salon avec bouton ticket\n‚Ä¢ **Message d'accueil** : Premier message automatique\n‚Ä¢ **Archivage** : Gestion des tickets ferm√©s`,
                    inline: false
                },
                {
                    name: 'üé® **Personnalisation**',
                    value: `‚Ä¢ **Embed personnalis√©** : Design du message\n‚Ä¢ **Boutons** : Style et couleurs\n‚Ä¢ **Nom des tickets** : Format automatique\n‚Ä¢ **Permissions** : Acc√®s par r√¥le\n‚Ä¢ **Transcription** : Sauvegarde auto`,
                    inline: true
                },
                {
                    name: 'üìä **Statistiques**',
                    value: `‚Ä¢ **Tickets ouverts** : Compteur actuel\n‚Ä¢ **Temps de r√©ponse** : Moyenne\n‚Ä¢ **Satisfaction** : Notes utilisateurs\n‚Ä¢ **Volume** : Tickets par jour\n‚Ä¢ **Efficacit√©** : Temps de r√©solution`,
                    inline: true
                }
            )
            .setColor('#f39c12')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_tickets_option')
                    .setPlaceholder('üé´ Choisissez un param√®tre √† configurer')
                    .addOptions([
                        {
                            label: 'Activer le syst√®me',
                            description: 'Activer/d√©sactiver les tickets',
                            value: 'toggle_tickets',
                            emoji: 'üîÑ'
                        },
                        {
                            label: 'Cat√©gorie tickets',
                            description: 'D√©finir la cat√©gorie des tickets',
                            value: 'set_category',
                            emoji: 'üìÅ'
                        },
                        {
                            label: 'R√¥le support',
                            description: '√âquipe de support par d√©faut',
                            value: 'set_support_role',
                            emoji: 'üë•'
                        },
                        {
                            label: 'Message d\'accueil',
                            description: 'Personnaliser le message de bienvenue',
                            value: 'set_welcome_message',
                            emoji: 'üí¨'
                        },
                        {
                            label: 'Bouton de cr√©ation',
                            description: 'Envoyer le message avec bouton',
                            value: 'send_ticket_panel',
                            emoji: 'üéÆ'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_tickets_stats')
                    .setLabel('üìä Statistiques')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_tickets_archive')
                    .setLabel('üì¶ Gestion archives')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async showLogsConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üìù **CONFIGURATION LOGS**')
            .setDescription('**Configurez l\'enregistrement des √©v√©nements**')
            .addFields(
                {
                    name: 'üìã **Types de logs disponibles**',
                    value: `‚Ä¢ **Mod√©ration** : Actions de mod√©ration\n‚Ä¢ **Membres** : Arriv√©es/d√©parts\n‚Ä¢ **Messages** : √âditions/suppressions\n‚Ä¢ **Serveur** : Modifications serveur\n‚Ä¢ **Voice** : Activit√© vocale\n‚Ä¢ **R√¥les** : Changements de r√¥les`,
                    inline: false
                },
                {
                    name: '‚öôÔ∏è **Configuration par type**',
                    value: `‚Ä¢ **Salon d√©di√©** : Un salon par type\n‚Ä¢ **Filtres** : √âv√©nements sp√©cifiques\n‚Ä¢ **Format** : Style des messages\n‚Ä¢ **Mentions** : Notifications staff\n‚Ä¢ **Archivage** : Dur√©e de conservation`,
                    inline: true
                },
                {
                    name: 'üîç **Recherche et filtres**',
                    value: `‚Ä¢ **Recherche par utilisateur**\n‚Ä¢ **Filtrage par date**\n‚Ä¢ **Export des logs**\n‚Ä¢ **Statistiques d'usage**\n‚Ä¢ **Alertes automatiques**`,
                    inline: true
                }
            )
            .setColor('#9b59b6')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_logs_option')
                    .setPlaceholder('üìù Choisissez un type de log √† configurer')
                    .addOptions([
                        {
                            label: 'Logs de mod√©ration',
                            description: 'Actions de mod√©ration (warn, kick, ban)',
                            value: 'moderation_logs',
                            emoji: 'üõ°Ô∏è'
                        },
                        {
                            label: 'Logs des membres',
                            description: 'Arriv√©es et d√©parts des membres',
                            value: 'member_logs',
                            emoji: 'üë•'
                        },
                        {
                            label: 'Logs des messages',
                            description: '√âditions et suppressions de messages',
                            value: 'message_logs',
                            emoji: 'üí¨'
                        },
                        {
                            label: 'Logs du serveur',
                            description: 'Modifications du serveur',
                            value: 'server_logs',
                            emoji: '‚öôÔ∏è'
                        },
                        {
                            label: 'Logs vocaux',
                            description: 'Activit√© dans les salons vocaux',
                            value: 'voice_logs',
                            emoji: 'üîä'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_logs_enable_all')
                    .setLabel('‚úÖ Activer tous')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('config_logs_disable_all')
                    .setLabel('‚ùå D√©sactiver tous')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async showAutorolesConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üé≠ **CONFIGURATION AUTO-R√îLES**')
            .setDescription('**Configurez l\'attribution automatique des r√¥les**')
            .addFields(
                {
                    name: 'üéØ **Types d\'auto-r√¥les**',
                    value: `‚Ä¢ **Nouveaux membres** : R√¥le √† l'arriv√©e\n‚Ä¢ **Bots** : R√¥le pour les bots\n‚Ä¢ **R√¥les de niveau** : Progression automatique\n‚Ä¢ **R√¥les de r√©action** : Attribution par r√©action\n‚Ä¢ **R√¥les temporaires** : Dur√©e limit√©e`,
                    inline: false
                },
                {
                    name: '‚öôÔ∏è **Conditions d\'attribution**',
                    value: `‚Ä¢ **D√©lai d'attente** : Temps avant attribution\n‚Ä¢ **V√©rification** : Syst√®me de captcha\n‚Ä¢ **R√®gles accept√©es** : Validation r√®glement\n‚Ä¢ **Boost serveur** : R√¥le booster\n‚Ä¢ **Activit√©** : Bas√© sur l'engagement`,
                    inline: true
                },
                {
                    name: 'üîÑ **Gestion automatique**',
                    value: `‚Ä¢ **Suppression d√©part** : Retrait automatique\n‚Ä¢ **Hi√©rarchie** : Respect des permissions\n‚Ä¢ **Cumul** : Multiple r√¥les possibles\n‚Ä¢ **Logs** : Tra√ßabilit√© des attributions\n‚Ä¢ **Exceptions** : R√¥les exclus`,
                    inline: true
                }
            )
            .setColor('#2ecc71')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_autoroles_option')
                    .setPlaceholder('üé≠ Choisissez un type d\'auto-r√¥le')
                    .addOptions([
                        {
                            label: 'R√¥le nouveaux membres',
                            description: 'R√¥le donn√© aux nouveaux arrivants',
                            value: 'member_role',
                            emoji: 'üëã'
                        },
                        {
                            label: 'R√¥le pour bots',
                            description: 'R√¥le automatique pour les bots',
                            value: 'bot_role',
                            emoji: 'ü§ñ'
                        },
                        {
                            label: 'R√¥les de niveau',
                            description: 'Syst√®me de progression par niveaux',
                            value: 'level_roles',
                            emoji: 'üìà'
                        },
                        {
                            label: 'R√¥les de r√©action',
                            description: 'Attribution par r√©action √† un message',
                            value: 'reaction_roles',
                            emoji: 'üé≠'
                        },
                        {
                            label: 'R√¥le booster',
                            description: 'R√¥le sp√©cial pour les boosters',
                            value: 'booster_role',
                            emoji: 'üíé'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_autoroles_test')
                    .setLabel('üß™ Tester attribution')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_autoroles_cleanup')
                    .setLabel('üßπ Nettoyage r√¥les')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async showWelcomeConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üëã **CONFIGURATION BIENVENUE**')
            .setDescription('**Configurez les messages d\'accueil des nouveaux membres**')
            .addFields(
                {
                    name: 'üí¨ **Types de messages**',
                    value: `‚Ä¢ **Message simple** : Texte basique\n‚Ä¢ **Embed riche** : Message format√©\n‚Ä¢ **Image personnalis√©e** : Avec avatar\n‚Ä¢ **GIF anim√©** : Message dynamique\n‚Ä¢ **Message priv√©** : DM automatique`,
                    inline: false
                },
                {
                    name: 'üé® **Personnalisation**',
                    value: `‚Ä¢ **Variables** : {user}, {server}, {count}\n‚Ä¢ **Couleurs** : Th√®me du serveur\n‚Ä¢ **Images** : Banni√®re personnalis√©e\n‚Ä¢ **Boutons** : Actions rapides\n‚Ä¢ **Mentions** : R√¥les et salons`,
                    inline: true
                },
                {
                    name: '‚öôÔ∏è **Options avanc√©es**',
                    value: `‚Ä¢ **D√©lai d'envoi** : Retard configurable\n‚Ä¢ **Conditions** : Filtres d'envoi\n‚Ä¢ **A/B Testing** : Messages variables\n‚Ä¢ **Statistiques** : Taux d'engagement\n‚Ä¢ **Mod√©ration** : Filtrage antispam`,
                    inline: true
                }
            )
            .setColor('#e91e63')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_welcome_option')
                    .setPlaceholder('üëã Choisissez un param√®tre de bienvenue')
                    .addOptions([
                        {
                            label: 'Activer/D√©sactiver',
                            description: 'Basculer les messages de bienvenue',
                            value: 'toggle_welcome',
                            emoji: 'üîÑ'
                        },
                        {
                            label: 'Salon de bienvenue',
                            description: 'D√©finir le salon d\'accueil',
                            value: 'set_welcome_channel',
                            emoji: 'üìù'
                        },
                        {
                            label: 'Message personnalis√©',
                            description: 'Cr√©er un message d\'accueil',
                            value: 'set_welcome_message',
                            emoji: 'üí¨'
                        },
                        {
                            label: 'Embed de bienvenue',
                            description: 'Cr√©er un embed personnalis√©',
                            value: 'create_welcome_embed',
                            emoji: 'üé®'
                        },
                        {
                            label: 'Variables disponibles',
                            description: 'Voir les variables utilisables',
                            value: 'show_variables',
                            emoji: 'üìã'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_welcome_preview')
                    .setLabel('üëÅÔ∏è Aper√ßu')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('config_welcome_test')
                    .setLabel('üß™ Test message')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async showResetConfig(interaction) {
        const embed = new EmbedBuilder()
            .setTitle('üîÑ **R√âINITIALISATION CONFIGURATION**')
            .setDescription('**‚ö†Ô∏è ATTENTION : Cette action est irr√©versible !**')
            .addFields(
                {
                    name: 'üóëÔ∏è **Options de r√©initialisation**',
                    value: `‚Ä¢ **Reset complet** : Toute la configuration\n‚Ä¢ **Reset mod√©ration** : Uniquement la mod√©ration\n‚Ä¢ **Reset tickets** : Syst√®me de tickets\n‚Ä¢ **Reset logs** : Configuration des logs\n‚Ä¢ **Reset autor√¥les** : R√¥les automatiques`,
                    inline: false
                },
                {
                    name: 'üíæ **Sauvegarde automatique**',
                    value: `Avant toute r√©initialisation, une sauvegarde automatique sera cr√©√©e et vous sera envoy√©e en message priv√©.`,
                    inline: false
                },
                {
                    name: '‚è±Ô∏è **D√©lai de s√©curit√©**',
                    value: `Un d√©lai de 30 secondes sera appliqu√© avant la r√©initialisation effective pour vous permettre d'annuler.`,
                    inline: false
                }
            )
            .setColor('#e74c3c')
            .setThumbnail('https://i.imgur.com/s74nSIc.png');

        const selectMenu = new ActionRowBuilder()
            .addComponents(
                new StringSelectMenuBuilder()
                    .setCustomId('config_reset_option')
                    .setPlaceholder('‚ö†Ô∏è Choisissez ce que vous voulez r√©initialiser')
                    .addOptions([
                        {
                            label: 'Reset complet',
                            description: 'R√©initialiser toute la configuration',
                            value: 'reset_all',
                            emoji: 'üóëÔ∏è'
                        },
                        {
                            label: 'Reset mod√©ration',
                            description: 'R√©initialiser uniquement la mod√©ration',
                            value: 'reset_moderation',
                            emoji: 'üõ°Ô∏è'
                        },
                        {
                            label: 'Reset tickets',
                            description: 'R√©initialiser le syst√®me de tickets',
                            value: 'reset_tickets',
                            emoji: 'üé´'
                        },
                        {
                            label: 'Reset logs',
                            description: 'R√©initialiser la configuration des logs',
                            value: 'reset_logs',
                            emoji: 'üìù'
                        },
                        {
                            label: 'Reset autor√¥les',
                            description: 'R√©initialiser les r√¥les automatiques',
                            value: 'reset_autoroles',
                            emoji: 'üé≠'
                        }
                    ])
            );

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('config_backup_before_reset')
                    .setLabel('üíæ Sauvegarder avant')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('config_cancel_reset')
                    .setLabel('‚ùå Annuler')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('config_back')
                    .setLabel('‚¨ÖÔ∏è Retour')
                    .setStyle(ButtonStyle.Secondary)
            );

        await interaction.reply({
            embeds: [embed],
            components: [selectMenu, actionRow],
            ephemeral: true
        });
    },

    async getCurrentConfig(guild) {
        // Simulation de r√©cup√©ration de configuration
        // En r√©alit√©, cela viendrait de la base de donn√©es
        return {
            moderation: {
                enabled: true,
                automod: true,
                logChannel: '#mod-logs',
                muteRole: '@Muted'
            },
            tickets: {
                enabled: true,
                category: 'Support',
                supportRole: '@Support',
                openCount: 3
            },
            logs: {
                general: '#logs',
                moderation: '#mod-logs',
                members: '#member-logs',
                messages: '#message-logs'
            },
            autoroles: {
                member: '@Membre',
                bot: '@Bot',
                levelRoles: true
            },
            welcome: {
                enabled: true,
                channel: '#bienvenue',
                customMessage: true,
                embed: true
            },
            general: {
                prefix: '/',
                language: 'Fran√ßais',
                timezone: 'Europe/Paris'
            }
        };
    }
};
