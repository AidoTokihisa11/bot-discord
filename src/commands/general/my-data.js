import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';

import AccessRestriction from '../../utils/AccessRestriction.js';
export default {
    data: new SlashCommandBuilder()
        .setName('my-data')
        .setDescription('üìä Consulter toutes vos donn√©es stock√©es par le bot (Droit d\'acc√®s RGPD)'),

    async execute(interaction) {
        // === V√âRIFICATION D'ACC√àS GLOBALE ===
        const accessRestriction = new AccessRestriction();
        const hasAccess = await accessRestriction.checkAccess(interaction);
        if (!hasAccess) {
            return; // Acc√®s refus√©, message d√©j√† envoy√©
        }


        await interaction.deferReply({ ephemeral: true });

        try {
            const userId = interaction.user.id;
            const database = interaction.client.db;
            
            // R√©cup√©rer toutes les donn√©es de l'utilisateur
            const userData = await this.collectUserData(database, userId, interaction.guild);
            
            const embed = new EmbedBuilder()
                .setTitle('üìä **VOS DONN√âES PERSONNELLES**')
                .setDescription(`**Conform√©ment au RGPD (Article 15 - Droit d'acc√®s)**\n\nVoici toutes les donn√©es que nous conservons vous concernant :`)
                .addFields(
                    {
                        name: 'üë§ **Informations de base**',
                        value: `‚Ä¢ **ID Discord :** \`${userData.basic.id}\`\n‚Ä¢ **Username :** ${userData.basic.username}\n‚Ä¢ **Rejoint le serveur :** ${userData.basic.joinedAt}\n‚Ä¢ **Compte cr√©√© :** ${userData.basic.createdAt}`,
                        inline: false
                    },
                    {
                        name: '‚öñÔ∏è **Donn√©es de mod√©ration**',
                        value: userData.moderation.summary || 'Aucune donn√©e de mod√©ration',
                        inline: false
                    },
                    {
                        name: 'üìà **Statistiques d\'activit√©**',
                        value: userData.activity.summary || 'Aucune statistique disponible',
                        inline: false
                    },
                    {
                        name: 'üîí **Dur√©e de conservation**',
                        value: `‚Ä¢ **Logs de mod√©ration :** 30 jours\n‚Ä¢ **IDs utilisateurs :** 90 jours\n‚Ä¢ **Statistiques :** 1 an\n‚Ä¢ **Donn√©es de configuration :** Jusqu'√† suppression`,
                        inline: false
                    }
                )
                .setColor('#3498db')
                .setTimestamp()
                .setFooter({ 
                    text: 'Conforme RGPD ‚Ä¢ Team7 Bot',
                    iconURL: interaction.user.displayAvatarURL()
                })
                .setImage('https://i.imgur.com/s74nSIc.png');

            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('export_my_data')
                        .setLabel('üìÅ Exporter mes donn√©es')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üìÅ'),
                    new ButtonBuilder()
                        .setCustomId('delete_my_data')
                        .setLabel('üóëÔ∏è Supprimer mes donn√©es')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üóëÔ∏è'),
                    new ButtonBuilder()
                        .setCustomId('data_refresh')
                        .setLabel('üîÑ Actualiser')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üîÑ')
                );

            await interaction.editReply({
                embeds: [embed],
                components: [actionRow]
            });

        } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå **Erreur**')
                .setDescription('Une erreur est survenue lors de la r√©cup√©ration de vos donn√©es. Veuillez r√©essayer plus tard.')
                .setColor('#e74c3c')
                .setTimestamp();
                
            await interaction.editReply({ embeds: [errorEmbed] });
        }
    },

    async collectUserData(database, userId, guild) {
        const data = {
            basic: {},
            moderation: {},
            activity: {}
        };

        try {
            // Informations de base
            const user = await guild.members.fetch(userId).catch(() => null);
            data.basic = {
                id: userId,
                username: user ? user.user.tag : 'Utilisateur inconnu',
                joinedAt: user ? `<t:${Math.floor(user.joinedTimestamp / 1000)}:F>` : 'Inconnu',
                createdAt: user ? `<t:${Math.floor(user.user.createdTimestamp / 1000)}:F>` : 'Inconnu'
            };

            // Donn√©es de mod√©ration
            const moderationHistory = await database.getUserHistory ? await database.getUserHistory(userId) : [];
            const warnings = await database.getUserWarnings ? await database.getUserWarnings(userId) : [];
            
            if (moderationHistory.length > 0 || warnings.length > 0) {
                data.moderation.summary = `‚Ä¢ **Avertissements actifs :** ${warnings.filter(w => w.active).length}\n‚Ä¢ **Actions de mod√©ration :** ${moderationHistory.length}\n‚Ä¢ **Derni√®re action :** ${moderationHistory.length > 0 ? `<t:${Math.floor(moderationHistory[0].timestamp / 1000)}:R>` : 'Aucune'}`;
            } else {
                data.moderation.summary = '‚úÖ Aucun ant√©c√©dent de mod√©ration';
            }

            // Statistiques d'activit√©
            data.activity.summary = `‚Ä¢ **Messages analys√©s :** Non suivi\n‚Ä¢ **Derni√®re activit√© :** <t:${Math.floor(Date.now() / 1000)}:R>\n‚Ä¢ **Statut :** Membre actif`;

        } catch (error) {
            console.error('Erreur lors de la collecte des donn√©es:', error);
        }

        return data;
    }
};
