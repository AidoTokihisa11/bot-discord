import TicketManager from '../managers/TicketManager.js';
import Logger from '../utils/Logger.js';
import { EmbedBuilder, MessageFlags } from 'discord.js';

class ButtonHandler {
    constructor(client) {
        this.client = client;
        this.logger = new Logger();
    }

    async handleButton(interaction) {
        const { customId } = interaction;

        try {
            // V√©rification pr√©alable de l'√©tat de l'interaction
            if (interaction.replied || interaction.deferred) {
                this.logger.warn(`‚ö†Ô∏è Interaction ${customId} d√©j√† trait√©e, abandon`);
                return;
            }

            this.logger.info(`üîò Traitement du bouton: ${customId} par ${interaction.user.tag}`);

            // Boutons de tickets
            if (customId.startsWith('ticket_')) {
                await this.handleTicketButtons(interaction);
            }
            // Boutons de confirmation
            else if (customId === 'confirm_close' || customId === 'cancel_close') {
                await this.handleConfirmationButtons(interaction);
            }
            // Boutons de suggestions - GESTION S√âCURIS√âE
            else if (customId.startsWith('suggestion_')) {
                await this.handleSuggestionButtons(interaction);
            }
            // Boutons d'embed templates
            else if (customId.startsWith('edit_template_') || customId.startsWith('send_template_') || customId.startsWith('preview_template_')) {
                await this.handleEmbedTemplateButtons(interaction);
            }
            // Boutons du constructeur d'embed
            else if (customId.startsWith('builder_')) {
                await this.handleEmbedBuilderButtons(interaction);
            }
            // Boutons IA
            else if (customId.startsWith('ia_')) {
                await this.handleIAButtons(interaction);
            }
            // Boutons de feedback modal
            else if (customId.startsWith('show_feedback_modal_')) {
                await this.handleFeedbackModalButtons(interaction);
            }
            else {
                this.logger.warn(`Bouton non g√©r√©: ${customId}`);
            }

        } catch (error) {
            // Gestion d'erreur am√©lior√©e
            if (error.code === 10062) {
                this.logger.warn('‚è∞ Interaction expir√©e, abandon silencieux');
                return;
            }
            
            if (error.code === 40060) {
                this.logger.warn('‚ö†Ô∏è Interaction d√©j√† acquitt√©e, abandon silencieux');
                return;
            }

            this.logger.error('Erreur lors de la gestion du bouton:', error);
            
            try {
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.reply({
                        content: '‚ùå Une erreur est survenue lors du traitement de votre demande.',
                        flags: MessageFlags.Ephemeral
                    });
                }
            } catch (replyError) {
                if (replyError.code === 10062 || replyError.code === 40060) {
                    this.logger.warn('‚è∞ Impossible de r√©pondre - interaction expir√©e ou d√©j√† trait√©e');
                } else {
                    this.logger.error('Impossible de r√©pondre √† l\'erreur:', replyError);
                }
            }
        }
    }

    async handleTicketButtons(interaction) {
        try {
            // V√©rification pr√©alable pour √©viter les interactions expir√©es
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction ticket d√©j√† trait√©e, abandon');
                return;
            }

            // Utiliser l'instance TicketManager stock√©e dans le client pour optimiser
            if (!this.client.ticketManager) {
                this.client.ticketManager = new TicketManager(this.client);
            }
            const ticketManager = this.client.ticketManager;
            
            const action = interaction.customId;

            switch (action) {
                // Boutons de types de tickets
                case 'ticket_support':
                    await ticketManager.handleTicketCreation(interaction, 'support');
                    break;
                case 'ticket_general':
                    await ticketManager.handleTicketCreation(interaction, 'general');
                    break;
                case 'ticket_report':
                    await ticketManager.handleTicketCreation(interaction, 'report');
                    break;
                case 'ticket_partnership':
                    await ticketManager.handleTicketCreation(interaction, 'partnership');
                    break;
                case 'ticket_suggestion':
                    await ticketManager.handleTicketCreation(interaction, 'suggestion');
                    break;
                case 'ticket_appeal':
                    await ticketManager.handleTicketCreation(interaction, 'appeal');
                    break;
                    
                // Boutons d'actions rapides
                case 'ticket_faq':
                case 'ticket_status':
                case 'ticket_my_tickets':
                case 'ticket_contact_staff':
                    await ticketManager.handleQuickAction(interaction);
                    break;
                    
                // Boutons d'actions dans les tickets
                case 'ticket_close':
                case 'ticket_claim':
                case 'ticket_add_user':
                case 'ticket_transcript':
                    await ticketManager.handleTicketAction(interaction);
                    break;
            }
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleTicketButtons');
                return;
            }
            throw error;
        }
    }

    async handleConfirmationButtons(interaction) {
        try {
            // V√©rification pr√©alable pour √©viter les interactions expir√©es
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction confirmation d√©j√† trait√©e, abandon');
                return;
            }

            // Utiliser l'instance TicketManager stock√©e dans le client
            if (!this.client.ticketManager) {
                this.client.ticketManager = new TicketManager(this.client);
            }
            const ticketManager = this.client.ticketManager;
            
            if (interaction.customId === 'confirm_close') {
                await ticketManager.handleConfirmClose(interaction);
            } else if (interaction.customId === 'cancel_close') {
                await ticketManager.handleCancelClose(interaction);
            }
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleConfirmationButtons');
                return;
            }
            throw error;
        }
    }

    // GESTION ULTRA-S√âCURIS√âE DES SUGGESTIONS
    async handleSuggestionButtons(interaction) {
        const { customId } = interaction;

        try {
            // Triple v√©rification de s√©curit√©
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction suggestion d√©j√† trait√©e, abandon imm√©diat');
                return;
            }

            // R√©ponse imm√©diate pour s√©curiser l'interaction
            // Utiliser le validateur d'interactions pour une d√©f√©rence rapide
            const validator = interaction.client.interactionValidator;
            const deferred = await validator.quickDefer(interaction, { flags: MessageFlags.Ephemeral });
            
            if (!deferred) {
                return; // Interaction expir√©e ou d√©j√† trait√©e
            }

            // Utiliser l'instance TicketManager stock√©e dans le client
            if (!this.client.ticketManager) {
                this.client.ticketManager = new TicketManager(this.client);
            }
            const ticketManager = this.client.ticketManager;

            // Gestion directe et simplifi√©e
            switch (customId) {
                case 'suggestion_close':
                    await this.processSuggestionAction(interaction, ticketManager, 'closed');
                    break;
                case 'suggestion_approve':
                    await this.processSuggestionAction(interaction, ticketManager, 'approved');
                    break;
                case 'suggestion_consider':
                    await this.processSuggestionAction(interaction, ticketManager, 'considered');
                    break;
                case 'suggestion_reject':
                    await this.processSuggestionAction(interaction, ticketManager, 'rejected');
                    break;
                default:
                    await interaction.editReply({
                        content: `‚ùå Action de suggestion non reconnue: ${customId}`
                    });
            }

        } catch (error) {
            if (error.code === 10062) {
                this.logger.warn('‚è∞ Interaction suggestion expir√©e');
                return;
            }
            
            if (error.code === 40060) {
                this.logger.warn('‚ö†Ô∏è Interaction suggestion d√©j√† acquitt√©e');
                return;
            }

            this.logger.error('Erreur lors de la gestion des boutons de suggestion:', error);
            
            try {
                if (interaction.deferred) {
                    await interaction.editReply({
                        content: '‚ùå Une erreur est survenue lors du traitement de la suggestion.'
                    });
                } else if (!interaction.replied) {
                    await interaction.reply({
                        content: '‚ùå Une erreur est survenue lors du traitement de la suggestion.',
                        flags: MessageFlags.Ephemeral
                    });
                }
            } catch (replyError) {
                this.logger.warn('‚è∞ Impossible de r√©pondre √† l\'erreur de suggestion (interaction expir√©e)');
            }
        }
    }

    // M√©thode s√©curis√©e pour traiter les actions de suggestion
    async processSuggestionAction(interaction, ticketManager, status) {
        try {
            // D√©f√©rence imm√©diate si pas d√©j√† fait
            if (!interaction.deferred && !interaction.replied) {
                try {
                    await interaction.deferReply({ flags: MessageFlags.Ephemeral });
                } catch (error) {
                    // Si la d√©f√©rence √©choue, l'interaction est expir√©e
                    return;
                }
            }

            // Traitement direct et rapide
            await ticketManager.handleSuggestionAction(interaction, status);

            const statusTexts = {
                approved: 'approuv√©e',
                rejected: 'rejet√©e', 
                considered: 'prise en consid√©ration',
                closed: 'ferm√©e'
            };

            try {
                await interaction.editReply({
                    content: `‚úÖ Suggestion ${statusTexts[status]} avec succ√®s.`
                });
            } catch (error) {
                // Ignorer les erreurs d'interaction expir√©e
            }

        } catch (error) {
            this.logger.error(`Erreur lors du traitement de l'action ${status}:`, error);
            
            try {
                if (interaction.deferred || interaction.replied) {
                    await interaction.editReply({
                        content: `‚ùå Erreur lors du traitement de la suggestion (${status}).`
                    });
                }
            } catch (editError) {
                this.logger.warn('‚è∞ Impossible de modifier la r√©ponse (interaction expir√©e)');
            }
        }
    }

    async handleEmbedTemplateButtons(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction embed template d√©j√† trait√©e');
                return;
            }

            // Import dynamique pour √©viter les d√©pendances circulaires
            const { handleEditTemplate, handleSendTemplate, handlePreviewTemplate } = await import('../handlers/EmbedHandler.js');
            
            if (interaction.customId.startsWith('edit_template_')) {
                const template = interaction.customId.split('_')[2];
                await handleEditTemplate(interaction, template);
            }
            else if (interaction.customId.startsWith('send_template_')) {
                const template = interaction.customId.split('_')[2];
                await handleSendTemplate(interaction, template);
            }
            else if (interaction.customId.startsWith('preview_template_')) {
                const template = interaction.customId.split('_')[2];
                await handlePreviewTemplate(interaction, template);
            }
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleEmbedTemplateButtons');
                return;
            }
            throw error;
        }
    }

    async handleEmbedBuilderButtons(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction embed builder d√©j√† trait√©e');
                return;
            }

            const { handleEmbedBuilder } = await import('../handlers/EmbedHandler.js');
            await handleEmbedBuilder(interaction);
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleEmbedBuilderButtons');
                return;
            }
            throw error;
        }
    }

    async handleIAButtons(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction IA d√©j√† trait√©e');
                return;
            }

            const { handleIAButtons } = await import('../handlers/IAHandler.js');
            await handleIAButtons(interaction);
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleIAButtons');
                return;
            }
            throw error;
        }
    }

    async handleFeedbackModalButtons(interaction) {
        try {
            if (interaction.replied || interaction.deferred) {
                this.logger.warn('‚ö†Ô∏è Interaction feedback modal d√©j√† trait√©e');
                return;
            }

            const status = interaction.customId.split('_')[3];
            const tempData = this.client.tempData?.[interaction.user.id];
            
            if (!tempData) {
                return await interaction.reply({
                    content: '‚ùå Session expir√©e. Veuillez recommencer.',
                    flags: MessageFlags.Ephemeral
                });
            }

            // Modal pour le feedback constructif
            const { ModalBuilder, TextInputBuilder, TextInputStyle, ActionRowBuilder } = await import('discord.js');
            
            const feedbackModal = new ModalBuilder()
                .setCustomId(`suggestion_feedback_${status}`)
                .setTitle('üí¨ Feedback Constructif');

            const reasonInput = new TextInputBuilder()
                .setCustomId('feedback_reason')
                .setLabel('Raison principale')
                .setStyle(TextInputStyle.Short)
                .setPlaceholder('R√©sumez en quelques mots la raison de cette d√©cision')
                .setRequired(true)
                .setMaxLength(100);

            const feedbackInput = new TextInputBuilder()
                .setCustomId('feedback_message')
                .setLabel('Message de feedback d√©taill√©')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Expliquez votre d√©cision, donnez des conseils constructifs, des alternatives...')
                .setRequired(true)
                .setMaxLength(1500);

            const improvementInput = new TextInputBuilder()
                .setCustomId('feedback_improvement')
                .setLabel('Suggestions d\'am√©lioration (optionnel)')
                .setStyle(TextInputStyle.Paragraph)
                .setPlaceholder('Comment cette suggestion pourrait-elle √™tre am√©lior√©e ?')
                .setRequired(false)
                .setMaxLength(800);

            feedbackModal.addComponents(
                new ActionRowBuilder().addComponents(reasonInput),
                new ActionRowBuilder().addComponents(feedbackInput),
                new ActionRowBuilder().addComponents(improvementInput)
            );

            await interaction.showModal(feedbackModal);
        } catch (error) {
            if (error.code === 10062 || error.code === 40060) {
                this.logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleFeedbackModalButtons');
                return;
            }
            
            this.logger.error('Erreur lors de l\'affichage du modal de feedback:', error);
            
            try {
                if (!interaction.replied) {
                    await interaction.reply({
                        content: '‚ùå Impossible d\'afficher le formulaire. Veuillez r√©essayer.',
                        flags: MessageFlags.Ephemeral
                    });
                }
            } catch (replyError) {
                this.logger.warn('‚è∞ Impossible de r√©pondre √† l\'erreur de modal');
            }
        }
    }
}

export default ButtonHandler;
