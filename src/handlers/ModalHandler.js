import TicketManager from '../managers/TicketManager.js';
import Logger from '../utils/Logger.js';
import { EmbedBuilder, MessageFlags } from 'discord.js';

const logger = new Logger();

export async function handleModal(interaction) {
    const { customId } = interaction;

    try {
        // V√©rification imm√©diate de l'√©tat de l'interaction
        if (interaction.replied || interaction.deferred) {
            logger.warn('‚ö†Ô∏è Interaction modal d√©j√† trait√©e, abandon silencieux...');
            return;
        }

        // Modals de tickets
        if (customId.startsWith('ticket_modal_')) {
            if (!interaction.client.ticketManager) {
                interaction.client.ticketManager = new TicketManager(interaction.client);
            }
            await interaction.client.ticketManager.handleModalSubmit(interaction);
        }
        // Modals de suggestions
        else if (customId.startsWith('suggestion_modal_')) {
            if (!interaction.client.ticketManager) {
                interaction.client.ticketManager = new TicketManager(interaction.client);
            }
            await interaction.client.ticketManager.handleSuggestionModalSubmit(interaction);
        }
        // Modals de recrutement
        else if (customId.startsWith('recruitment_modal_')) {
            if (!interaction.client.ticketManager) {
                interaction.client.ticketManager = new TicketManager(interaction.client);
            }
            await interaction.client.ticketManager.handleRecruitmentModalSubmit(interaction);
        }
        // Modal d'ajout d'utilisateur
        else if (customId === 'add_user_modal') {
            if (!interaction.client.ticketManager) {
                interaction.client.ticketManager = new TicketManager(interaction.client);
            }
            await interaction.client.ticketManager.handleAddUserModal(interaction);
        }
        // Modals de feedback de suggestions
        else if (customId.startsWith('suggestion_feedback_')) {
            if (!interaction.client.ticketManager) {
                interaction.client.ticketManager = new TicketManager(interaction.client);
            }
            await interaction.client.ticketManager.handleSuggestionFeedbackModal(interaction);
        }
        // Modals du syst√®me de streams (d√©sactiv√©)
        else if (customId.startsWith('stream_')) {
            await interaction.reply({
                content: '‚ùå Le syst√®me de streams n\'est pas disponible.',
                ephemeral: true
            });
        }
        // Modals d'embed
        else if (customId === 'advanced_embed_modal') {
            await handleAdvancedEmbedModal(interaction);
        }
        else {
            logger.warn(`Modal non g√©r√©: ${customId}`);
        }

    } catch (error) {
        // Gestion d'erreur robuste
        if (error.code === 10062) {
            logger.warn('‚è∞ Interaction modal expir√©e (10062) - abandon silencieux');
            return;
        }
        
        if (error.code === 40060) {
            logger.warn('‚ö†Ô∏è Interaction modal d√©j√† acquitt√©e (40060) - abandon silencieux');
            return;
        }

        logger.error('Erreur lors de la gestion du modal:', error);
        
        try {
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({
                    content: '‚ùå Une erreur est survenue lors du traitement de votre formulaire.',
                    flags: MessageFlags.Ephemeral
                });
            }
        } catch (replyError) {
            if (replyError.code === 10062 || replyError.code === 40060) {
                logger.warn('‚è∞ Impossible de r√©pondre √† l\'erreur de modal - interaction expir√©e');
            } else {
                logger.error('Impossible de r√©pondre √† l\'erreur de modal:', replyError);
            }
        }
    }
}

async function handleAdvancedEmbedModal(interaction) {
    try {
        // V√©rification pr√©ventive
        if (interaction.replied || interaction.deferred) {
            logger.warn('‚ö†Ô∏è Interaction embed modal d√©j√† trait√©e');
            return;
        }

        // Utiliser le validateur d'interactions pour une d√©f√©rence rapide
            const validator = interaction.client.interactionValidator;
            const deferred = await validator.quickDefer(interaction, { flags: MessageFlags.Ephemeral });
            
            if (!deferred) {
                return; // Interaction expir√©e ou d√©j√† trait√©e
            }

        const title = interaction.fields.getTextInputValue('embed_title');
        const description = interaction.fields.getTextInputValue('embed_description');
        const color = interaction.fields.getTextInputValue('embed_color') || '#5865f2';
        const footer = interaction.fields.getTextInputValue('embed_footer') || '';
        const thumbnail = interaction.fields.getTextInputValue('embed_thumbnail') || '';

        const embed = new EmbedBuilder()
            .setTitle(title)
            .setDescription(description)
            .setColor(color)
            .setTimestamp();

        if (footer) embed.setFooter({ text: footer });
        if (thumbnail) embed.setThumbnail(thumbnail);

        const sentMessage = await interaction.channel.send({ embeds: [embed] });

        logger.success(`Embed avanc√© cr√©√© par ${interaction.user.tag} dans #${interaction.channel.name}`);

        await interaction.editReply({
            content: `‚úÖ **Embed cr√©√© avec succ√®s !**\n\nüìç **Canal :** ${interaction.channel}\nüÜî **Message ID :** \`${sentMessage.id}\`\n\n[üîó Aller au message](${sentMessage.url})`
        });

    } catch (error) {
        if (error.code === 10062 || error.code === 40060) {
            logger.warn('‚è∞ Erreur d\'interaction expir√©e dans handleAdvancedEmbedModal');
            return;
        }
        
        logger.error('Erreur lors de la cr√©ation de l\'embed avanc√©:', error);
        
        try {
            if (interaction.deferred) {
                await interaction.editReply({
                    content: '‚ùå Erreur lors de la cr√©ation de l\'embed. V√©rifiez les param√®tres.'
                });
            }
        } catch (editError) {
            logger.warn('‚è∞ Impossible d\'√©diter la r√©ponse - interaction expir√©e');
        }
    }
}
