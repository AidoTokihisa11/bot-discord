import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } from 'discord.js';

export default class CharteInteractionHandler {
    static async handleCharteValidation(interaction) {
        await interaction.deferUpdate();

        // Enregistrer la validation dans la base de donn√©es
        await this.saveCharteAcceptance(interaction.user.id, interaction.guild.id);

        // Mettre √† jour le message original avec le nouveau compteur
        await this.updateCharteMessage(interaction);

        const embed = new EmbedBuilder()
            .setTitle('‚úÖ **CHARTE VALID√âE**')
            .setDescription('**Validation enregistr√©e avec succ√®s**')
            .addFields(
                {
                    name: 'üë§ **Informations de validation**',
                    value: `**Utilisateur :** ${interaction.user.tag}\n**ID :** \`${interaction.user.id}\`\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>\n**Serveur :** ${interaction.guild.name}`,
                    inline: false
                },
                {
                    name: 'üìã **Document valid√©**',
                    value: `**R√©f√©rence :** DOC-BOT-2025-002\n**Charte Officielle d'Utilisation**\n**√âditeur :** [Th√©o Garc√®s / AidoTokihisa]\n**Version :** 1.0`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è **Engagements**',
                    value: `‚Ä¢ Respect de la propri√©t√© intellectuelle\n‚Ä¢ Conformit√© aux conditions d'utilisation\n‚Ä¢ Respect des droits RGPD\n‚Ä¢ Acceptation des clauses l√©gales`,
                    inline: true
                },
                {
                    name: 'üîê **Certificat de validation**',
                    value: `**R√©f√©rence :** CERT-${Date.now().toString(36).toUpperCase()}\n**Valide jusqu'au :** <t:${Math.floor((Date.now() + 365*24*60*60*1000) / 1000)}:d>\n**Statut :** ‚úÖ Accept√© et enregistr√©\n**Tra√ßabilit√© :** Audit trail activ√©`,
                    inline: false
                },
                {
                    name: 'üìû **En cas de questions**',
                    value: `**Support :** \`/support\`\n**R√©clamations RGPD :** \`/appeal\`\n**Suggestions :** \`/suggest\`\n**Contact :** support@team7.gg`,
                    inline: false
                }
            )
            .setColor('#28a745')
            .setThumbnail(interaction.user.displayAvatarURL({ size: 256 }))
            .setImage('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: 'Validation Charte Officielle ‚Ä¢ Team7 Bot',
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        await interaction.followUp({
            embeds: [embed],
            ephemeral: true
        });

        // Envoyer une notification au channel de logs (si configur√©)
        try {
            const logChannel = interaction.guild.channels.cache.find(ch => ch.name === 'logs-charte' || ch.name === 'logs');
            if (logChannel && logChannel.isTextBased()) {
                const acceptanceCount = await this.getCharteAcceptanceCount(interaction.guild.id);
                const logEmbed = new EmbedBuilder()
                    .setTitle('üìã **NOUVELLE VALIDATION DE CHARTE**')
                    .setDescription(`**${interaction.user.tag}** a valid√© la charte officielle`)
                    .addFields(
                        {
                            name: 'üìä **D√©tails**',
                            value: `**Utilisateur :** <@${interaction.user.id}>\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>\n**Document :** DOC-BOT-2025-002\n**Certificat :** CERT-${Date.now().toString(36).toUpperCase()}\n**Total acceptations :** ${acceptanceCount} üë•`,
                            inline: false
                        }
                    )
                    .setColor('#17a2b8')
                    .setTimestamp()
                    .setFooter({ text: 'System Log - Charte Validation' });

                await logChannel.send({ embeds: [logEmbed] });
            }
        } catch (error) {
            console.log('Impossible d\'envoyer dans le channel de logs');
        }

        // Envoyer un DM de confirmation √† l'utilisateur
        try {
            const dmEmbed = new EmbedBuilder()
                .setTitle('‚úÖ **CONFIRMATION DE VALIDATION**')
                .setDescription('Vous avez valid√© la charte officielle Team7 Bot')
                .addFields(
                    {
                        name: 'üìã **R√©capitulatif**',
                        value: `**Document :** Charte Officielle d'Utilisation\n**R√©f√©rence :** DOC-BOT-2025-002\n**Serveur :** ${interaction.guild.name}\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>`,
                        inline: false
                    },
                    {
                        name: 'üîó **Ressources utiles**',
                        value: `‚Ä¢ **Support :** \`/support\` sur le serveur\n‚Ä¢ **Mes donn√©es :** \`/my-data\`\n‚Ä¢ **Export donn√©es :** \`/export-my-data\`\n‚Ä¢ **Suggestions :** \`/suggest\``,
                        inline: false
                    }
                )
                .setColor('#28a745')
                .setTimestamp()
                .setFooter({ text: 'Team7 Bot - Confirmation' });

            await interaction.user.send({ embeds: [dmEmbed] });
        } catch (error) {
            console.log('Impossible d\'envoyer le DM de confirmation');
        }
    }

    static async updateCharteMessage(interaction) {
        try {
            // R√©cup√©rer le nombre d'acceptations
            const acceptanceCount = await this.getCharteAcceptanceCount(interaction.guild.id);
            
            // Cr√©er l'embed mis √† jour avec le compteur
            const updatedEmbed = new EmbedBuilder()
                .setTitle('üìã **CHARTE OFFICIELLE D\'UTILISATION DU BOT DISCORD**')
                .setDescription('**R√©f√©rence :** DOC-BOT-2025-002\n**√âditeur :** [Th√©o Garc√®s / AidoTokihisa], D√©veloppeur Discord\n**Statut :** Partenaire Certifi√©\n\n**Conformit√© :**\n‚Ä¢ **Conditions des D√©veloppeurs Discord :** https://discord.com/developers/docs/legal\n‚Ä¢ **Politique de Confidentialit√© Discord :** https://discord.com/privacy\n‚Ä¢ **RGPD UE 2016/679 :** https://eur-lex.europa.eu/eli/reg/2016/679')
                .addFields(
                    {
                        name: 'üë®‚Äçüíª **1. DROITS ET PROTECTIONS DU D√âVELOPPEUR**',
                        value: `**1.1 Propri√©t√© Exclusive**\nLe code source, l'infrastructure et les algorithmes sont ma propri√©t√© intellectuelle exclusive.\n\nToute tentative de :\n‚Ä¢ Reverse engineering (Article 2 des Conditions D√©veloppeurs)\n‚Ä¢ R√©utilisation non autoris√©e\n‚Ä¢ Commercialisation sans accord √©crit\n**est strictement interdite et passible de poursuites**\n\n**1.2 Protection Juridique**\nEn cas de :\n‚Ä¢ **Fuite de code** ‚Üí Application du Digital Millennium Copyright Act (DMCA)\n‚Ä¢ **Utilisation abusive** ‚Üí Signalement √† Discord Trust & Safety : https://discord.com/safety`,
                        inline: false
                    },
                    {
                        name: 'üë• **2. DROITS ET LIMITATIONS DU STAFF**',
                        value: `**2.1 Autorisations**\nLe staff a le droit de :\n‚úÖ Utiliser les commandes de mod√©ration standard (!ban, !mute)\n‚úÖ Consulter les logs de mod√©ration (30 jours max)\n‚úÖ Proposer des am√©liorations via le syst√®me de tickets\n\n**2.2 Interdictions Absolues**\nLe staff NE PEUT PAS :\n‚ùå Acc√©der au code source ou √† l'infrastructure\n‚ùå Modifier les param√®tres techniques du bot\n‚ùå Contourner les restrictions de s√©curit√©\n‚ùå Utiliser le bot √† des fins personnelles ou malveillantes\n\n**2.3 Responsabilit√©s du Staff**\n‚Ä¢ Maintenir la confidentialit√© des acc√®s\n‚Ä¢ Signaler imm√©diatement tout comportement suspect\n‚Ä¢ Respecter les limites d'utilisation d√©finies`,
                        inline: false
                    },
                    {
                        name: 'üîí **3. PROTECTION DES DONN√âES**',
                        value: `**3.1 Donn√©es Collect√©es**\n\`\`\`\nType        Conservation  Finalit√©     Conformit√©\nUserIDs     90 jours      Mod√©ration   RGPD Art.5\nMessages    30 jours      S√©curit√©     Directive ePrivacy\nLogs        60 jours      Audit        Loi Informatique et Libert√©s\n\`\`\`\n\n**3.2 S√©curit√© Renforc√©e**\n‚Ä¢ Chiffrement AES-256 des donn√©es sensibles\n‚Ä¢ Double authentification pour les acc√®s admin\n‚Ä¢ Audit trimestriel par un tiers ind√©pendant`,
                        inline: false
                    },
                    {
                        name: '‚öñÔ∏è **4. GESTION DES CONFLITS**',
                        value: `**4.1 Proc√©dure de M√©diation**\n‚Ä¢ **Phase amiable :** Discussion en ticket priv√©\n‚Ä¢ **Arbitrage :** Intervention d'un expert neutre\n‚Ä¢ **Sanctions :**\n  - Suspension temporaire des fonctionnalit√©s\n  - Bannissement d√©finitif si n√©cessaire\n\n**4.2 Protection contre les Abus**\nToute tentative de :\n‚Ä¢ **Piratage** ‚Üí Signalement √† https://discord.com/security\n‚Ä¢ **Harc√®lement** ‚Üí Plainte via https://www.internet-signalement.gouv.fr`,
                        inline: false
                    },
                    {
                        name: 'üìÑ **5. CLAUSES SP√âCIFIQUES**',
                        value: `**5.1 Modification/Suppression**\nJe peux √† tout moment :\n‚Ä¢ Mettre √† jour le bot\n‚Ä¢ Modifier ses fonctionnalit√©s\n‚Ä¢ Interrompre le service (avec pr√©avis de 15 jours)\n\n**5.2 Transfert de Propri√©t√©**\nConditions strictes :\n‚Ä¢ Accord √©crit obligatoire\n‚Ä¢ P√©riode de transition de 30 jours\n‚Ä¢ Formation du nouveau propri√©taire`,
                        inline: false
                    },
                    {
                        name: '‚úçÔ∏è **SIGNATURES**',
                        value: `**Sign√© par :**\n**Theo / AidoTokihisa**, D√©veloppeur et Propri√©taire\n**Le :** 05/08/2025\n\n**Pour acceptation :**\n**Membre du Conseil d'Administration Team7**\n**Le :** 05/08/2025`,
                        inline: false
                    },
                    {
                        name: '‚ö†Ô∏è **AVERTISSEMENT L√âGAL**',
                        value: `Toute violation de cette charte peut entra√Æner des **poursuites judiciaires** conform√©ment aux lois fran√ßaises et europ√©ennes en vigueur.\n\n**Document prot√©g√© - Reproduction interdite sans autorisation**`,
                        inline: false
                    },
                    {
                        name: 'üìä **STATISTIQUES D\'ACCEPTATION**',
                        value: `${this.generateAcceptanceEmojis(acceptanceCount)} **${acceptanceCount} personnes** ont accept√© cette charte\n\n*Derni√®re mise √† jour : <t:${Math.floor(Date.now() / 1000)}:R>*`,
                        inline: false
                    }
                )
                .setColor('#e74c3c')
                .setThumbnail(interaction.guild.iconURL({ size: 256 }))
                .setImage('https://i.imgur.com/s74nSIc.png')
                .setTimestamp()
                .setFooter({ 
                    text: `Charte Officielle Team7 Bot ‚Ä¢ DOC-BOT-2025-002 ‚Ä¢ ${acceptanceCount} acceptations`,
                    iconURL: 'https://i.imgur.com/s74nSIc.png'
                });

            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('charte_validate')
                        .setLabel('‚úÖ J\'ai lu et j\'accepte cette charte')
                        .setStyle(ButtonStyle.Success)
                );

            // Mettre √† jour le message original
            await interaction.message.edit({
                embeds: [updatedEmbed],
                components: [actionRow]
            });

        } catch (error) {
            console.error('Erreur lors de la mise √† jour du message de charte:', error);
        }
    }

    static generateAcceptanceEmojis(count) {
        if (count === 0) return 'üìã';
        if (count <= 5) return 'üë§'.repeat(count);
        if (count <= 10) return 'üë•'.repeat(Math.floor(count / 2)) + (count % 2 ? 'üë§' : '');
        if (count <= 25) return 'üë™'.repeat(Math.floor(count / 5)) + 'üë•'.repeat(Math.floor((count % 5) / 2)) + (count % 2 ? 'üë§' : '');
        if (count <= 50) return 'üè¢'.repeat(Math.floor(count / 10)) + 'üë™'.repeat(Math.floor((count % 10) / 5));
        return 'üèôÔ∏è'.repeat(Math.floor(count / 50)) + 'üè¢'.repeat(Math.floor((count % 50) / 10));
    }

    static async saveCharteAcceptance(userId, guildId) {
        try {
            // Simuler l'enregistrement en base de donn√©es
            // Dans une vraie impl√©mentation, vous stockeriez ceci dans votre base de donn√©es
            const acceptanceData = {
                userId: userId,
                guildId: guildId,
                timestamp: Date.now(),
                version: 'DOC-BOT-2025-002'
            };

            // Charger les acceptations existantes
            let acceptances = [];
            try {
                const fs = await import('fs/promises');
                const data = await fs.readFile('data/charte_acceptances.json', 'utf8');
                acceptances = JSON.parse(data);
            } catch (error) {
                // Fichier n'existe pas encore, on commence avec un tableau vide
            }

            // V√©rifier si l'utilisateur a d√©j√† accept√©
            const existingIndex = acceptances.findIndex(a => a.userId === userId && a.guildId === guildId);
            if (existingIndex !== -1) {
                // Mettre √† jour l'acceptation existante
                acceptances[existingIndex] = acceptanceData;
            } else {
                // Ajouter nouvelle acceptation
                acceptances.push(acceptanceData);
            }

            // Sauvegarder
            const fs = await import('fs/promises');
            await fs.mkdir('data', { recursive: true });
            await fs.writeFile('data/charte_acceptances.json', JSON.stringify(acceptances, null, 2));

        } catch (error) {
            console.error('Erreur lors de la sauvegarde de l\'acceptation:', error);
        }
    }

    static async getCharteAcceptanceCount(guildId) {
        try {
            const fs = await import('fs/promises');
            const data = await fs.readFile('data/charte_acceptances.json', 'utf8');
            const acceptances = JSON.parse(data);
            return acceptances.filter(a => a.guildId === guildId).length;
        } catch (error) {
            return 0; // Aucune acceptation trouv√©e
        }
    }

    static async handleDataDeletionConfirm(interaction, userId) {
        const deleteCommand = interaction.client.commands?.get('delete-my-data');
        if (deleteCommand && deleteCommand.confirmDeletion) {
            await deleteCommand.confirmDeletion(interaction, userId);
        } else {
            await interaction.reply({
                content: '‚ùå Erreur: Commande de suppression non trouv√©e.',
                ephemeral: true
            });
        }
    }

    static async handleDataPreview(interaction, userId) {
        await interaction.deferUpdate();

        // Simuler la r√©cup√©ration des donn√©es
        const userData = await this.getUserDataPreview(userId, interaction.guild.id);

        const embed = new EmbedBuilder()
            .setTitle('üëÅÔ∏è **APER√áU DES DONN√âES**')
            .setDescription(`**Donn√©es stock√©es pour <@${userId}>**`)
            .addFields(
                {
                    name: 'üìä **R√©sum√© des donn√©es**',
                    value: `**Messages archiv√©s :** ${userData.messages}\n**Logs mod√©ration :** ${userData.moderationLogs}\n**Donn√©es utilisateur :** ${userData.userSettings}\n**Statistiques :** ${userData.stats}`,
                    inline: true
                },
                {
                    name: 'üìÖ **P√©riode de conservation**',
                    value: `**Plus ancien :** <t:${userData.oldestData}:d>\n**Plus r√©cent :** <t:${userData.newestData}:d>\n**Prochaine purge :** <t:${userData.nextPurge}:d>`,
                    inline: true
                },
                {
                    name: 'üóÇÔ∏è **Types de donn√©es d√©taill√©s**',
                    value: `**üî∏ Mod√©ration :**\n‚Ä¢ Avertissements: ${userData.details.warnings}\n‚Ä¢ Sanctions: ${userData.details.sanctions}\n‚Ä¢ Notes: ${userData.details.notes}\n\n**üî∏ Activit√© :**\n‚Ä¢ Messages supprim√©s: ${userData.details.deletedMessages}\n‚Ä¢ Statistiques d'usage: ${userData.details.usageStats}\n\n**üî∏ Configuration :**\n‚Ä¢ Pr√©f√©rences: ${userData.details.preferences}\n‚Ä¢ Notifications: ${userData.details.notifications}`,
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è **Important**',
                    value: `Ces donn√©es seront **d√©finitivement supprim√©es** si vous confirmez la suppression. Cette action est **irr√©versible**.`,
                    inline: false
                }
            )
            .setColor('#ffc107')
            .setThumbnail('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: 'Aper√ßu des donn√©es ‚Ä¢ RGPD Article 15',
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`delete_data_confirm_${userId}`)
                    .setLabel('üóëÔ∏è Confirmer suppression')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('delete_data_cancel')
                    .setLabel('‚ùå Annuler')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId(`export_before_delete_${userId}`)
                    .setLabel('üì• Exporter avant suppression')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.editReply({
            embeds: [embed],
            components: [actionRow]
        });
    }

    static async getUserDataPreview(userId, guildId) {
        // Simulation des donn√©es utilisateur
        const now = Date.now();
        return {
            messages: 147,
            moderationLogs: 12,
            userSettings: 1,
            stats: 8,
            oldestData: Math.floor((now - 90*24*60*60*1000) / 1000),
            newestData: Math.floor(now / 1000),
            nextPurge: Math.floor((now + 30*24*60*60*1000) / 1000),
            details: {
                warnings: 3,
                sanctions: 1,
                notes: 2,
                deletedMessages: 23,
                usageStats: 15,
                preferences: 5,
                notifications: 3
            }
        };
    }
}
