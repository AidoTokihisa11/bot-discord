import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } from 'discord.js';

export default class CharteInteractionHandler {
    static async handleCharteValidation(interaction) {
        await interaction.deferUpdate();

        const embed = new EmbedBuilder()
            .setTitle('‚úÖ **CHARTE VALID√âE**')
            .setDescription('**Validation enregistr√©e avec succ√®s**')
            .addFields(
                {
                    name: 'üë§ **Informations de validation**',
                    value: `**Utilisateur :** ${interaction.user.tag}\n**ID :** \`${interaction.user.id}\`\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>\n**Serveur :** ${interaction.guild.name}`,
                    inline: false
                },
                {
                    name: 'üìã **Document valid√©**',
                    value: `**R√©f√©rence :** DOC-BOT-2025-002\n**Charte Officielle d'Utilisation**\n**√âditeur :** [Th√©o Garc√®s / AidoTokihisa]\n**Version :** 1.0`,
                    inline: true
                },
                {
                    name: '‚öñÔ∏è **Engagements**',
                    value: `‚Ä¢ Respect de la propri√©t√© intellectuelle\n‚Ä¢ Conformit√© aux conditions d'utilisation\n‚Ä¢ Respect des droits RGPD\n‚Ä¢ Acceptation des clauses l√©gales`,
                    inline: true
                },
                {
                    name: 'üîê **Certificat de validation**',
                    value: `**R√©f√©rence :** CERT-${Date.now().toString(36).toUpperCase()}\n**Valide jusqu'au :** <t:${Math.floor((Date.now() + 365*24*60*60*1000) / 1000)}:d>\n**Statut :** ‚úÖ Accept√© et enregistr√©\n**Tra√ßabilit√© :** Audit trail activ√©`,
                    inline: false
                },
                {
                    name: 'üìû **En cas de questions**',
                    value: `**Support :** \`/support\`\n**R√©clamations RGPD :** \`/appeal\`\n**Suggestions :** \`/suggest\`\n**Contact :** support@team7.gg`,
                    inline: false
                }
            )
            .setColor('#28a745')
            .setThumbnail(interaction.user.displayAvatarURL({ size: 256 }))
            .setImage('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: 'Validation Charte Officielle ‚Ä¢ Team7 Bot',
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        await interaction.editReply({
            embeds: [embed],
            components: []
        });

        // Envoyer une notification au channel de logs (si configur√©)
        try {
            const logChannel = interaction.guild.channels.cache.find(ch => ch.name === 'logs-charte' || ch.name === 'logs');
            if (logChannel && logChannel.isTextBased()) {
                const logEmbed = new EmbedBuilder()
                    .setTitle('üìã **NOUVELLE VALIDATION DE CHARTE**')
                    .setDescription(`**${interaction.user.tag}** a valid√© la charte officielle`)
                    .addFields(
                        {
                            name: 'üìä **D√©tails**',
                            value: `**Utilisateur :** <@${interaction.user.id}>\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>\n**Document :** DOC-BOT-2025-002\n**Certificat :** CERT-${Date.now().toString(36).toUpperCase()}`,
                            inline: false
                        }
                    )
                    .setColor('#17a2b8')
                    .setTimestamp()
                    .setFooter({ text: 'System Log - Charte Validation' });

                await logChannel.send({ embeds: [logEmbed] });
            }
        } catch (error) {
            console.log('Impossible d\'envoyer dans le channel de logs');
        }

        // Envoyer un DM de confirmation √† l'utilisateur
        try {
            const dmEmbed = new EmbedBuilder()
                .setTitle('‚úÖ **CONFIRMATION DE VALIDATION**')
                .setDescription('Vous avez valid√© la charte officielle Team7 Bot')
                .addFields(
                    {
                        name: 'üìã **R√©capitulatif**',
                        value: `**Document :** Charte Officielle d'Utilisation\n**R√©f√©rence :** DOC-BOT-2025-002\n**Serveur :** ${interaction.guild.name}\n**Date :** <t:${Math.floor(Date.now() / 1000)}:F>`,
                        inline: false
                    },
                    {
                        name: 'üîó **Ressources utiles**',
                        value: `‚Ä¢ **Support :** \`/support\` sur le serveur\n‚Ä¢ **Mes donn√©es :** \`/my-data\`\n‚Ä¢ **Export donn√©es :** \`/export-my-data\`\n‚Ä¢ **Suggestions :** \`/suggest\``,
                        inline: false
                    }
                )
                .setColor('#28a745')
                .setTimestamp()
                .setFooter({ text: 'Team7 Bot - Confirmation' });

            await interaction.user.send({ embeds: [dmEmbed] });
        } catch (error) {
            console.log('Impossible d\'envoyer le DM de confirmation');
        }
    }

    static async handleDataDeletionConfirm(interaction, userId) {
        const deleteCommand = interaction.client.commands?.get('delete-my-data');
        if (deleteCommand && deleteCommand.confirmDeletion) {
            await deleteCommand.confirmDeletion(interaction, userId);
        } else {
            await interaction.reply({
                content: '‚ùå Erreur: Commande de suppression non trouv√©e.',
                ephemeral: true
            });
        }
    }

    static async handleDataPreview(interaction, userId) {
        await interaction.deferUpdate();

        // Simuler la r√©cup√©ration des donn√©es
        const userData = await this.getUserDataPreview(userId, interaction.guild.id);

        const embed = new EmbedBuilder()
            .setTitle('üëÅÔ∏è **APER√áU DES DONN√âES**')
            .setDescription(`**Donn√©es stock√©es pour <@${userId}>**`)
            .addFields(
                {
                    name: 'üìä **R√©sum√© des donn√©es**',
                    value: `**Messages archiv√©s :** ${userData.messages}\n**Logs mod√©ration :** ${userData.moderationLogs}\n**Donn√©es utilisateur :** ${userData.userSettings}\n**Statistiques :** ${userData.stats}`,
                    inline: true
                },
                {
                    name: 'üìÖ **P√©riode de conservation**',
                    value: `**Plus ancien :** <t:${userData.oldestData}:d>\n**Plus r√©cent :** <t:${userData.newestData}:d>\n**Prochaine purge :** <t:${userData.nextPurge}:d>`,
                    inline: true
                },
                {
                    name: 'üóÇÔ∏è **Types de donn√©es d√©taill√©s**',
                    value: `**üî∏ Mod√©ration :**\n‚Ä¢ Avertissements: ${userData.details.warnings}\n‚Ä¢ Sanctions: ${userData.details.sanctions}\n‚Ä¢ Notes: ${userData.details.notes}\n\n**üî∏ Activit√© :**\n‚Ä¢ Messages supprim√©s: ${userData.details.deletedMessages}\n‚Ä¢ Statistiques d'usage: ${userData.details.usageStats}\n\n**üî∏ Configuration :**\n‚Ä¢ Pr√©f√©rences: ${userData.details.preferences}\n‚Ä¢ Notifications: ${userData.details.notifications}`,
                    inline: false
                },
                {
                    name: '‚ö†Ô∏è **Important**',
                    value: `Ces donn√©es seront **d√©finitivement supprim√©es** si vous confirmez la suppression. Cette action est **irr√©versible**.`,
                    inline: false
                }
            )
            .setColor('#ffc107')
            .setThumbnail('https://i.imgur.com/s74nSIc.png')
            .setTimestamp()
            .setFooter({ 
                text: 'Aper√ßu des donn√©es ‚Ä¢ RGPD Article 15',
                iconURL: 'https://i.imgur.com/s74nSIc.png'
            });

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId(`delete_data_confirm_${userId}`)
                    .setLabel('üóëÔ∏è Confirmer suppression')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('delete_data_cancel')
                    .setLabel('‚ùå Annuler')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId(`export_before_delete_${userId}`)
                    .setLabel('üì• Exporter avant suppression')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.editReply({
            embeds: [embed],
            components: [actionRow]
        });
    }

    static async getUserDataPreview(userId, guildId) {
        // Simulation des donn√©es utilisateur
        const now = Date.now();
        return {
            messages: 147,
            moderationLogs: 12,
            userSettings: 1,
            stats: 8,
            oldestData: Math.floor((now - 90*24*60*60*1000) / 1000),
            newestData: Math.floor(now / 1000),
            nextPurge: Math.floor((now + 30*24*60*60*1000) / 1000),
            details: {
                warnings: 3,
                sanctions: 1,
                notes: 2,
                deletedMessages: 23,
                usageStats: 15,
                preferences: 5,
                notifications: 3
            }
        };
    }
}
