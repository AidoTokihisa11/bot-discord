import Logger from '../utils/Logger.js';

export default {
    name: 'messageReactionAdd',
    async execute(reaction, user, client) {
        const logger = new Logger();

        try {
            // Log de d√©bogage pour v√©rifier que l'√©v√©nement se d√©clenche
            logger.info(`üîç R√©action d√©tect√©e: ${reaction.emoji.name} par ${user.tag}`);
            
            // Ignorer les r√©actions du bot
            if (user.bot) {
                logger.info('ü§ñ R√©action du bot ignor√©e');
                return;
            }

            // V√©rifier si la r√©action est partielle et la r√©cup√©rer compl√®tement
            if (reaction.partial) {
                try {
                    await reaction.fetch();
                } catch (error) {
                    logger.error('Erreur lors de la r√©cup√©ration de la r√©action:', error);
                    return;
                }
            }

            const { message, emoji } = reaction;
            const guild = message.guild;
            const member = guild.members.cache.get(user.id);

            if (!member) return;


            // Syst√®me de validation du r√®glement D√âSACTIV√â (utiliser seulement les boutons)
            // if (emoji.name === '‚úÖ') {
            //     // V√©rifier d'abord le footer token ajout√© par /reglement
            //     const isRuleMessageByFooter = message.embeds.some(embed => (embed.footer && embed.footer.text && embed.footer.text.includes('reglement:team7')));

            //     if (isRuleMessageByFooter) {
            //         await handleRuleValidation(message, member, logger);
            //         return;
            //     }

            //     // Fallback historique: v√©rifier le titre/description
            //     await handleRuleValidation(message, member, logger);
            // }

        } catch (error) {
            logger.error('Erreur dans messageReactionAdd:', error);
        }
    }
};

async function handleRuleValidation(message, member, logger) {
    try {
        const guild = member.guild;
    const validationRoleId = '1387536419588931616';

        logger.info(`üéØ Traitement de la validation pour ${member.user.tag}`);
        logger.info(`üìã ID du r√¥le de validation: ${validationRoleId}`);

        // V√©rifier si le message contient le r√®glement (recherche dans les embeds)
        const isRuleMessage = message.embeds.some(embed => 
            embed.title?.includes('R√àGLEMENT') || 
            embed.title?.includes('VALIDATION') ||
            embed.description?.includes('VALIDATION DU R√àGLEMENT')
        );

        logger.info(`üìù Message de r√®glement d√©tect√©: ${isRuleMessage}`);
        if (!isRuleMessage) {
            logger.info('‚ùå Ce n\'est pas un message de r√®glement, arr√™t du traitement');
            return;
        }

        // V√©rifier si le membre a d√©j√† le r√¥le
        if (member.roles.cache.has(validationRoleId)) {
            logger.info(`${member.user.tag} a d√©j√† le r√¥le de validation (${validationRoleId})`);
            return;
        }

        // R√©cup√©rer le r√¥le de validation via fetch pour √©viter cache stale
        let validationRole;
        try {
            validationRole = await guild.roles.fetch(validationRoleId);
        } catch (fetchError) {
            logger.error(`Erreur lors de la r√©cup√©ration du r√¥le ${validationRoleId}:`, fetchError);
        }

        if (!validationRole) {
            logger.error(`R√¥le de validation introuvable: ${validationRoleId}`);
            return;
        }

        // Log roles avant
        logger.info(`R√¥les avant ajout pour ${member.user.tag}: ${member.roles.cache.map(r => `${r.name}:${r.id}`).join(', ')}`);

        // Attribuer le r√¥le
        try {
            await member.roles.add(validationRole, 'Validation du r√®glement');
            // re-fetch member to update roles cache
            await member.fetch();
            logger.success(`R√¥le ${validationRole.name} (${validationRole.id}) attribu√© √† ${member.user.tag}`);
            logger.info(`R√¥les apr√®s ajout pour ${member.user.tag}: ${member.roles.cache.map(r => `${r.name}:${r.id}`).join(', ')}`);
        } catch (addError) {
            logger.error(`Erreur lors de l'attribution du r√¥le ${validationRoleId} √† ${member.user.tag}:`, addError);
        }

        // Envoyer un message de confirmation en MP
        try {
            const welcomeMessage = `üéâ Bienvenue sur ${guild.name} !\n\n‚úÖ R√®glement valid√© avec succ√®s !\nVous avez maintenant acc√®s √† l'ensemble du serveur.\n\nüéØ Prochaines √©tapes :\n‚Ä¢ Explorez les diff√©rents canaux\n‚Ä¢ Pr√©sentez-vous si vous le souhaitez\n‚Ä¢ Participez aux discussions\n‚Ä¢ N'h√©sitez pas √† utiliser le syst√®me de tickets pour toute question\n\nüõ°Ô∏è Rappel : Le respect du r√®glement est obligatoire en permanence.\n\nBonne d√©couverte ! üöÄ`;

            await member.send(welcomeMessage);
        } catch (dmError) {
            logger.warn(`Impossible d'envoyer un MP √† ${member.user.tag}: ${dmError.message}`);

            // Fallback: envoyer la notification dans un channel configur√© ou trouv√© automatiquement
            try {
                const logChannelId = process.env.LOG_CHANNEL_ID;
                let fallbackChannel = null;

                if (logChannelId) {
                    fallbackChannel = guild.channels.cache.get(logChannelId);
                }

                if (!fallbackChannel) {
                    // Essayer quelques noms de canaux courants
                    fallbackChannel = guild.channels.cache.find(ch => ['welcome', 'bienvenue', 'annonces', 'welcome-channel'].includes((ch.name || '').toLowerCase()));
                }

                if (fallbackChannel && fallbackChannel.isTextBased()) {
                    await fallbackChannel.send({ content: `${member} ${welcomeMessage}` });
                    logger.info(`Notification de bienvenue envoy√©e dans ${fallbackChannel.name} pour ${member.user.tag}`);
                } else {
                    logger.warn('Aucun canal de fallback trouv√© pour envoyer la notification de bienvenue');
                }
            } catch (fallbackError) {
                logger.error('Erreur lors de l\'envoi de la notification de bienvenue en fallback:', fallbackError);
            }
        }

        // Log de l'action
        logger.success(`R√¥le de validation attribu√© √† ${member.user.tag} (${member.id})`);

        // Optionnel : Envoyer une notification dans un canal de logs
        const logChannelId = process.env.LOG_CHANNEL_ID; // Vous pouvez configurer cela
        if (logChannelId) {
            const logChannel = guild.channels.cache.get(logChannelId);
            if (logChannel) {
                const logEmbed = {
                    color: 0x00ff88,
                    title: '‚úÖ Nouveau Membre Valid√©',
                    description: `${member} a valid√© le r√®glement et re√ßu le r√¥le <@&${validationRoleId}>`,
                    fields: [
                        {
                            name: 'Utilisateur',
                            value: `${member.user.tag} (${member.id})`,
                            inline: true
                        },
                        {
                            name: 'Date',
                            value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                            inline: true
                        }
                    ],
                    thumbnail: {
                        url: member.user.displayAvatarURL({ dynamic: true })
                    },
                    timestamp: new Date().toISOString()
                };

                await logChannel.send({ embeds: [logEmbed] });
            }
        }

    } catch (error) {
        logger.error('Erreur lors de la validation du r√®glement:', error);
    }
}
