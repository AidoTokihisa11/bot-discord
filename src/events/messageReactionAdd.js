import Logger from '../utils/Logger.js';

export default {
    name: 'messageReactionAdd',
    async execute(reaction, user) {
        const logger = new Logger();

        try {
            // Ignorer les r√©actions du bot
            if (user.bot) return;

            // V√©rifier si la r√©action est partielle et la r√©cup√©rer compl√®tement
            if (reaction.partial) {
                try {
                    await reaction.fetch();
                } catch (error) {
                    logger.error('Erreur lors de la r√©cup√©ration de la r√©action:', error);
                    return;
                }
            }

            const { message, emoji } = reaction;
            const guild = message.guild;
            const member = guild.members.cache.get(user.id);

            if (!member) return;

            // Syst√®me de validation du r√®glement
            if (emoji.name === '‚úÖ') {
                await handleRuleValidation(message, member, logger);
            }

        } catch (error) {
            logger.error('Erreur dans messageReactionAdd:', error);
        }
    }
};

async function handleRuleValidation(message, member, logger) {
    try {
        const guild = member.guild;
        const validationRoleId = '1386990308679483393';

        // V√©rifier si le message contient le r√®glement (recherche dans les embeds)
        const isRuleMessage = message.embeds.some(embed => 
            embed.title?.includes('R√àGLEMENT') || 
            embed.title?.includes('VALIDATION') ||
            embed.description?.includes('VALIDATION DU R√àGLEMENT')
        );

        if (!isRuleMessage) return;

        // V√©rifier si le membre a d√©j√† le r√¥le
        if (member.roles.cache.has(validationRoleId)) {
            logger.info(`${member.user.tag} a d√©j√† le r√¥le de validation`);
            return;
        }

        // R√©cup√©rer le r√¥le de validation
        const validationRole = guild.roles.cache.get(validationRoleId);
        if (!validationRole) {
            logger.error(`R√¥le de validation introuvable: ${validationRoleId}`);
            return;
        }

        // Attribuer le r√¥le
        await member.roles.add(validationRole, 'Validation du r√®glement');

        // Envoyer un message de confirmation en MP
        try {
            const welcomeMessage = `
üéâ **Bienvenue sur ${guild.name} !**

‚úÖ **R√®glement valid√© avec succ√®s !**
Vous avez maintenant acc√®s √† l'ensemble du serveur.

**üéØ Prochaines √©tapes :**
‚Ä¢ Explorez les diff√©rents canaux
‚Ä¢ Pr√©sentez-vous si vous le souhaitez
‚Ä¢ Participez aux discussions
‚Ä¢ N'h√©sitez pas √† utiliser le syst√®me de tickets pour toute question

**üõ°Ô∏è Rappel :** Le respect du r√®glement est obligatoire en permanence.

Bonne d√©couverte ! üöÄ`;

            await member.send(welcomeMessage);
        } catch (dmError) {
            // Ignorer si on ne peut pas envoyer de MP
            logger.warn(`Impossible d'envoyer un MP √† ${member.user.tag}:`, dmError.message);
        }

        // Log de l'action
        logger.success(`R√¥le de validation attribu√© √† ${member.user.tag} (${member.id})`);

        // Optionnel : Envoyer une notification dans un canal de logs
        const logChannelId = process.env.LOG_CHANNEL_ID; // Vous pouvez configurer cela
        if (logChannelId) {
            const logChannel = guild.channels.cache.get(logChannelId);
            if (logChannel) {
                const logEmbed = {
                    color: 0x00ff88,
                    title: '‚úÖ Nouveau Membre Valid√©',
                    description: `${member} a valid√© le r√®glement et re√ßu le r√¥le <@&${validationRoleId}>`,
                    fields: [
                        {
                            name: 'Utilisateur',
                            value: `${member.user.tag} (${member.id})`,
                            inline: true
                        },
                        {
                            name: 'Date',
                            value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
                            inline: true
                        }
                    ],
                    thumbnail: {
                        url: member.user.displayAvatarURL({ dynamic: true })
                    },
                    timestamp: new Date().toISOString()
                };

                await logChannel.send({ embeds: [logEmbed] });
            }
        }

    } catch (error) {
        logger.error('Erreur lors de la validation du r√®glement:', error);
    }
}
