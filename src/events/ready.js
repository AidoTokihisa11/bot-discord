import { ActivityType } from 'discord.js';
import cron from 'node-cron';
import RealTimeSync from '../utils/RealTimeSync.js';

export default {
    name: 'clientReady',
    once: true,
    async execute(client) {
        const logger = client.logger || console;
        
        // Afficher les informations de connexion
        logger.ready(client);
        
        // INITIALISER LE SYST√àME DE SYNCHRONISATION TEMPS R√âEL
        const realTimeSync = new RealTimeSync();
        client.realTimeSync = realTimeSync;
        
        // Valider la synchronisation initiale
        const syncData = await realTimeSync.validateDiscordSync(client);
        const dateValidation = realTimeSync.validateCurrentDate();
        
        console.log('üîÑ [SYNCHRONISATION] Validation syst√®me temps r√©el...');
        console.log(`üìÖ [DATE] ${dateValidation.parisTime} ${dateValidation.isCorrectDate ? '‚úÖ' : '‚ùå'}`);
        console.log(`üè† [TEAM 7] ${syncData.guildInfo?.name || 'NON CONNECT√â'} ${syncData.isConnected ? '‚úÖ' : '‚ùå'}`);
        console.log(`‚è∞ [MINUIT] Dans ${syncData.timeSync.countdown}`);
        
        // D√©marrer le monitoring en temps r√©el
        const monitor = realTimeSync.startRealTimeMonitoring(client, 15000); // Update toutes les 15 secondes
        client.realTimeMonitor = monitor;
        
        // D√©finir le statut du bot avec compte √† rebours temps r√©el
        const timeInfo = realTimeSync.getTimeUntilMidnight();
        if (timeInfo.formatted.hours <= 12) {
            client.user.setActivity(`üö´ SUPPRESSION DANS ${timeInfo.formatted.hours}H${timeInfo.formatted.minutes}M - IT/DISC/2025/007-R`, { 
                type: ActivityType.Watching
            });
        } else {
            client.user.setActivity('üö´ D√âCOMMISSIONNEMENT - IT/DISC/2025/007-R', { 
                type: ActivityType.Watching
            });
        }
        
        // D√©finir le statut en ne pas d√©ranger pour indiquer la restriction
        client.user.setStatus('dnd');
        
        // Programmer les t√¢ches de maintenance
        scheduleMaintenance(client, logger);
        
        // Initialiser les statistiques
        await initializeStats(client, logger);
        
        // V√©rifier les mises √† jour de configuration
        await checkConfigUpdates(client, logger);
        
        logger.success('üéâ Bot enti√®rement initialis√© et pr√™t √† fonctionner !');
    },
};

async function scheduleMaintenance(client, logger) {
    // Nettoyage quotidien √† 3h du matin
    cron.schedule('0 3 * * *', async () => {
        logger.info('üßπ D√©but du nettoyage quotidien...');
        
        try {
            // Nettoyer la base de donn√©es
            if (client.db) {
                client.db.cleanup();
                logger.success('‚úÖ Base de donn√©es nettoy√©e');
            }
            
            // Nettoyer les cooldowns expir√©s
            client.cooldowns.forEach((cooldown, commandName) => {
                const now = Date.now();
                cooldown.forEach((timestamp, userId) => {
                    if (timestamp < now) {
                        cooldown.delete(userId);
                    }
                });
                if (cooldown.size === 0) {
                    client.cooldowns.delete(commandName);
                }
            });
            
            logger.success('‚úÖ Cooldowns nettoy√©s');
            
            // Forcer le garbage collection si disponible
            if (global.gc) {
                global.gc();
                logger.success('‚úÖ Garbage collection effectu√©');
            }
            
            logger.success('üéâ Nettoyage quotidien termin√©');
            
        } catch (error) {
            logger.error('‚ùå Erreur lors du nettoyage:', error);
        }
    }, {
        timezone: 'Europe/Paris'
    });
    
    // Sauvegarde des statistiques toutes les heures
    cron.schedule('0 * * * *', async () => {
        try {
            if (client.db) {
                await client.db.save();
                logger.debug('üíæ Sauvegarde automatique effectu√©e');
            }
        } catch (error) {
            logger.error('‚ùå Erreur lors de la sauvegarde:', error);
        }
    });
    
    // Rapport de sant√© toutes les 6 heures
    cron.schedule('0 */6 * * *', async () => {
        try {
            const stats = client.db ? client.db.getStats() : {};
            const memoryUsage = process.memoryUsage();
            
            logger.info('üìä Rapport de sant√© du bot:', {
                uptime: Math.floor(process.uptime()),
                memory: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
                guilds: client.guilds.cache.size,
                users: client.users.cache.size,
                ping: client.ws.ping,
                ...stats
            });
            
        } catch (error) {
            logger.error('‚ùå Erreur lors du rapport de sant√©:', error);
        }
    });
    
    logger.success('‚è∞ T√¢ches de maintenance programm√©es');
}

async function initializeStats(client, logger) {
    try {
        if (!client.db) return;
        
        // Initialiser les statistiques globales
        const stats = client.db.getStats();
        
        // Mettre √† jour les statistiques des serveurs
        for (const guild of client.guilds.cache.values()) {
            const guildData = client.db.getGuild(guild.id);
            
            // V√©rifier si le serveur a des param√®tres par d√©faut
            if (!guildData.settings.language) {
                client.db.updateGuild(guild.id, {
                    settings: {
                        ...guildData.settings,
                        language: 'fr'
                    }
                });
            }
        }
        
        logger.success(`üìà Statistiques initialis√©es (${stats.guilds} serveurs, ${stats.users} utilisateurs)`);
        
    } catch (error) {
        logger.error('‚ùå Erreur lors de l\'initialisation des statistiques:', error);
    }
}

async function checkConfigUpdates(client, logger) {
    try {
        // V√©rifier les mises √† jour de configuration pour chaque serveur
        for (const guild of client.guilds.cache.values()) {
            const guildData = client.db ? client.db.getGuild(guild.id) : null;
            
            if (guildData) {
                // V√©rifier si le r√¥le mod√©rateur existe toujours
                if (guildData.settings.moderatorRole) {
                    const role = guild.roles.cache.get(guildData.settings.moderatorRole);
                    if (!role) {
                        logger.warn(`‚ö†Ô∏è R√¥le mod√©rateur introuvable dans ${guild.name}, r√©initialisation...`);
                        client.db.updateGuild(guild.id, {
                            settings: {
                                ...guildData.settings,
                                moderatorRole: null
                            }
                        });
                    }
                }
                
                // V√©rifier si les canaux configur√©s existent toujours
                const channelsToCheck = ['logChannel', 'welcomeChannel', 'ticketCategory'];
                for (const channelType of channelsToCheck) {
                    if (guildData.settings[channelType]) {
                        const channel = guild.channels.cache.get(guildData.settings[channelType]);
                        if (!channel) {
                            logger.warn(`‚ö†Ô∏è Canal ${channelType} introuvable dans ${guild.name}, r√©initialisation...`);
                            client.db.updateGuild(guild.id, {
                                settings: {
                                    ...guildData.settings,
                                    [channelType]: null
                                }
                            });
                        }
                    }
                }
            }
        }
        
        logger.success('‚úÖ V√©rification des configurations termin√©e');
        
    } catch (error) {
        logger.error('‚ùå Erreur lors de la v√©rification des configurations:', error);
    }
}
