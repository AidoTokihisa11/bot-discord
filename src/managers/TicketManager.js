import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionFlagsBits, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } from 'discord.js';
import Database from '../utils/Database.js';
import Logger from '../utils/Logger.js';

class TicketManager {
    constructor(client) {
        this.client = client;
        this.db = new Database();
        this.ticketTypes = {
            support: {
                name: 'Support Technique',
                emoji: 'üîß',
                color: '#3498db',
                description: 'Probl√®mes techniques, bugs, dysfonctionnements',
                priority: 'high',
                responseTime: '< 2h'
            },
            general: {
                name: 'Questions G√©n√©rales',
                emoji: '‚ùì',
                color: '#95a5a6',
                description: 'Informations g√©n√©rales, aide, orientation',
                priority: 'medium',
                responseTime: '< 4h'
            },
            urgent: {
                name: 'Urgence',
                emoji: 'üö®',
                color: '#e74c3c',
                description: 'Probl√®mes critiques n√©cessitant une intervention imm√©diate',
                priority: 'critical',
                responseTime: '< 30min'
            },
            partnership: {
                name: 'Partenariat',
                emoji: 'ü§ù',
                color: '#2ecc71',
                description: 'Propositions de collaboration, partenariats',
                priority: 'low',
                responseTime: '< 24h'
            },
            suggestion: {
                name: 'Suggestions',
                emoji: 'üí°',
                color: '#f39c12',
                description: 'Id√©es d\'am√©lioration, nouvelles fonctionnalit√©s',
                priority: 'low',
                responseTime: '< 12h'
            },
            appeal: {
                name: 'Appel de Sanction',
                emoji: '‚öñÔ∏è',
                color: '#9b59b6',
                description: 'Contester une sanction, demande de r√©vision',
                priority: 'medium',
                responseTime: '< 6h'
            }
        };
    }

    async createTicketPanel(channel) {
        try {
            // Embed principal avec design moderne
            const mainEmbed = new EmbedBuilder()
                .setColor('#5865F2')
                .setTitle('üé´ **CENTRE DE SUPPORT PREMIUM**')
                .setDescription(`**üåü Bienvenue dans notre centre de support avanc√© !**

Notre √©quipe d'experts est disponible **24h/7j** pour vous accompagner.

**üìä Statistiques en temps r√©el :**
‚Ä¢ **Temps de r√©ponse moyen :** \`15 minutes\`
‚Ä¢ **Taux de satisfaction :** \`98.5%\`
‚Ä¢ **Tickets r√©solus aujourd'hui :** \`${await this.getTodayResolvedTickets()}\`

**üéØ S√©lectionnez votre type de demande ci-dessous**`)
                .setFooter({ 
                    text: 'üíé Support Premium ‚Ä¢ R√©ponse garantie sous 24h'
                })
                .setTimestamp();

            // Menu de s√©lection pour les types de tickets
            const ticketSelect = new StringSelectMenuBuilder()
                .setCustomId('ticket_type_select')
                .setPlaceholder('üéØ Choisissez votre type de demande...')
                .setMinValues(1)
                .setMaxValues(1);

            // Ajouter les options au menu
            Object.entries(this.ticketTypes).forEach(([key, config]) => {
                ticketSelect.addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel(config.name)
                        .setDescription(`${config.description} ‚Ä¢ ${config.responseTime}`)
                        .setValue(key)
                        .setEmoji(config.emoji)
                );
            });

            const selectRow = new ActionRowBuilder().addComponents(ticketSelect);

            // Boutons d'actions rapides
            const quickActionsRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('ticket_faq')
                        .setLabel('FAQ')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìö'),
                    new ButtonBuilder()
                        .setCustomId('ticket_status')
                        .setLabel('Statut du Support')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìä'),
                    new ButtonBuilder()
                        .setCustomId('ticket_my_tickets')
                        .setLabel('Mes Tickets')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìã'),
                    new ButtonBuilder()
                        .setCustomId('ticket_emergency')
                        .setLabel('URGENCE')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üö®')
                );

            // Embed d'informations suppl√©mentaires
            const infoEmbed = new EmbedBuilder()
                .setColor('#2f3136')
                .setTitle('üìã **Informations Importantes**')
                .addFields(
                    {
                        name: '‚ö° **Temps de R√©ponse Garantis**',
                        value: Object.entries(this.ticketTypes)
                            .map(([key, config]) => `${config.emoji} **${config.name}** ‚Üí \`${config.responseTime}\``)
                            .join('\n'),
                        inline: false
                    },
                    {
                        name: 'üìã **Avant de Cr√©er un Ticket**',
                        value: '‚Ä¢ Consultez notre **FAQ** pour les questions courantes\n‚Ä¢ Pr√©parez toutes les **informations n√©cessaires**\n‚Ä¢ Soyez **pr√©cis et d√©taill√©** dans votre description\n‚Ä¢ **Un ticket = Une demande sp√©cifique**',
                        inline: true
                    },
                    {
                        name: 'üéØ **Syst√®me de Priorit√©s**',
                        value: 'üî¥ **Critique** - Traitement imm√©diat\nüü° **√âlev√©e** - Sous 2 heures\nüü¢ **Normale** - Sous 24 heures',
                        inline: true
                    }
                )
                .setFooter({ text: 'üí° Astuce : Plus votre description est d√©taill√©e, plus nous pourrons vous aider rapidement !' });

            await channel.send({ 
                embeds: [mainEmbed, infoEmbed], 
                components: [selectRow, quickActionsRow] 
            });

            Logger.info(`Panel de tickets premium cr√©√© dans ${channel.name}`);
        } catch (error) {
            Logger.error('Erreur lors de la cr√©ation du panel de tickets:', error);
            throw error;
        }
    }

    async handleTicketTypeSelection(interaction) {
        try {
            const selectedType = interaction.values[0];
            const config = this.ticketTypes[selectedType];

            if (!config) {
                return interaction.reply({
                    content: '‚ùå Type de ticket invalide.',
                    ephemeral: true
                });
            }

            // V√©rifier si l'utilisateur a d√©j√† un ticket ouvert
            const existingTicket = await this.db.getTicketByUser(interaction.user.id);
            if (existingTicket && existingTicket.status === 'open') {
                const existingChannel = interaction.guild.channels.cache.get(existingTicket.id);
                return interaction.reply({
                    content: `‚ùå Vous avez d√©j√† un ticket ouvert : ${existingChannel || 'Canal introuvable'}`,
                    ephemeral: true
                });
            }

            // Embed de confirmation avec preview
            const confirmEmbed = new EmbedBuilder()
                .setColor(config.color)
                .setTitle(`${config.emoji} **${config.name}**`)
                .setDescription(`
**üìù R√©sum√© de votre demande :**

**Type :** ${config.name}
**Description :** ${config.description}
**Priorit√© :** ${this.getPriorityDisplay(config.priority)}
**Temps de r√©ponse estim√© :** \`${config.responseTime}\`

**üë• √âquipe assign√©e :** Support ${config.name}
**üìç Votre ticket sera cr√©√© dans :** <#${process.env.TICKET_CATEGORY_ID}>

Confirmez-vous la cr√©ation de ce ticket ?`)
                .addFields(
                    {
                        name: 'üìã **Ce qui vous sera demand√© :**',
                        value: this.getRequiredInfo(selectedType),
                        inline: false
                    }
                )
                .setFooter({ text: 'Cliquez sur "Cr√©er le Ticket" pour continuer' })
                .setTimestamp();

            const confirmRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`create_ticket_${selectedType}`)
                        .setLabel('Cr√©er le Ticket')
                        .setStyle(ButtonStyle.Success)
                        .setEmoji('‚úÖ'),
                    new ButtonBuilder()
                        .setCustomId('cancel_ticket_creation')
                        .setLabel('Annuler')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚ùå')
                );

            await interaction.reply({
                embeds: [confirmEmbed],
                components: [confirmRow],
                ephemeral: true
            });

        } catch (error) {
            Logger.error('Erreur lors de la s√©lection du type de ticket:', error);
            await interaction.reply({
                content: '‚ùå Une erreur est survenue lors de la s√©lection.',
                ephemeral: true
            });
        }
    }

    async createTicket(interaction, type) {
        try {
            const guild = interaction.guild;
            const user = interaction.user;
            const config = this.ticketTypes[type];

            // Cr√©er le canal de ticket avec nom unique
            const ticketNumber = await this.getNextTicketNumber();
            const ticketChannel = await guild.channels.create({
                name: `${config.emoji}„Éª${type}-${ticketNumber}`,
                type: ChannelType.GuildText,
                parent: process.env.TICKET_CATEGORY_ID,
                topic: `Ticket ${config.name} ‚Ä¢ Cr√©√© par ${user.tag} ‚Ä¢ ID: ${ticketNumber}`,
                permissionOverwrites: [
                    {
                        id: guild.id,
                        deny: [PermissionFlagsBits.ViewChannel]
                    },
                    {
                        id: user.id,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory,
                            PermissionFlagsBits.AttachFiles,
                            PermissionFlagsBits.EmbedLinks
                        ]
                    },
                    {
                        id: process.env.STAFF_ROLE_ID,
                        allow: [
                            PermissionFlagsBits.ViewChannel,
                            PermissionFlagsBits.SendMessages,
                            PermissionFlagsBits.ReadMessageHistory,
                            PermissionFlagsBits.ManageMessages,
                            PermissionFlagsBits.AttachFiles,
                            PermissionFlagsBits.EmbedLinks
                        ]
                    }
                ]
            });

            // Embed de bienvenue sophistiqu√©
            const welcomeEmbed = new EmbedBuilder()
                .setColor(config.color)
                .setTitle(`${config.emoji} **${config.name} - Ticket #${ticketNumber}**`)
                .setDescription(`
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ     **Bienvenue ${user.displayName}** üëã     ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

**üìã Informations du Ticket :**
‚Ä¢ **Type :** ${config.name}
‚Ä¢ **Num√©ro :** \`#${ticketNumber}\`
‚Ä¢ **Priorit√© :** ${this.getPriorityDisplay(config.priority)}
‚Ä¢ **Cr√©√© le :** <t:${Math.floor(Date.now() / 1000)}:F>
‚Ä¢ **Temps de r√©ponse estim√© :** \`${config.responseTime}\`

**üéØ Prochaines √âtapes :**
1Ô∏è‚É£ D√©crivez votre probl√®me/demande en d√©tail
2Ô∏è‚É£ Ajoutez des captures d'√©cran si n√©cessaire
3Ô∏è‚É£ Notre √©quipe vous r√©pondra rapidement

**üí° Conseils pour une r√©solution rapide :**
${this.getTicketTips(type)}`)
                .setThumbnail(user.displayAvatarURL({ dynamic: true }))
                .setFooter({ 
                    text: `Ticket ID: ${ticketNumber} ‚Ä¢ Notre √©quipe est notifi√©e`,
                    iconURL: guild.iconURL({ dynamic: true })
                })
                .setTimestamp();

            // Boutons d'actions pour le ticket
            const ticketActionsRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('ticket_close')
                        .setLabel('Fermer le Ticket')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('üîí'),
                    new ButtonBuilder()
                        .setCustomId('ticket_priority')
                        .setLabel('Changer Priorit√©')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('‚ö°'),
                    new ButtonBuilder()
                        .setCustomId('ticket_add_user')
                        .setLabel('Ajouter Utilisateur')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üë•'),
                    new ButtonBuilder()
                        .setCustomId('ticket_transcript')
                        .setLabel('Transcript')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìÑ')
                );

            // Boutons d'√©valuation
            const ratingRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('ticket_rate_1')
                        .setLabel('‚≠ê')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('ticket_rate_2')
                        .setLabel('‚≠ê‚≠ê')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('ticket_rate_3')
                        .setLabel('‚≠ê‚≠ê‚≠ê')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('ticket_rate_4')
                        .setLabel('‚≠ê‚≠ê‚≠ê‚≠ê')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId('ticket_rate_5')
                        .setLabel('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê')
                        .setStyle(ButtonStyle.Success)
                );

            await ticketChannel.send({
                content: `${user} | <@&${process.env.STAFF_ROLE_ID}>`,
                embeds: [welcomeEmbed],
                components: [ticketActionsRow]
            });

            // Message d'√©valuation s√©par√©
            const ratingEmbed = new EmbedBuilder()
                .setColor('#f39c12')
                .setTitle('‚≠ê **√âvaluez notre Service**')
                .setDescription('Une fois votre probl√®me r√©solu, n\'h√©sitez pas √† √©valuer la qualit√© de notre support !')
                .setFooter({ text: 'Votre avis nous aide √† am√©liorer notre service' });

            await ticketChannel.send({
                embeds: [ratingEmbed],
                components: [ratingRow]
            });

            // Enregistrer le ticket dans la base de donn√©es
            await this.db.createTicket({
                id: ticketChannel.id,
                number: ticketNumber,
                userId: user.id,
                type: type,
                priority: config.priority,
                status: 'open',
                createdAt: new Date().toISOString()
            });

            await interaction.editReply({
                content: `‚úÖ **Ticket cr√©√© avec succ√®s !** ${ticketChannel}`,
                embeds: [],
                components: []
            });

            Logger.info(`Ticket #${ticketNumber} cr√©√©: ${ticketChannel.name} par ${user.tag} (${type})`);

        } catch (error) {
            Logger.error('Erreur lors de la cr√©ation du ticket:', error);
            await interaction.editReply({
                content: '‚ùå Une erreur est survenue lors de la cr√©ation du ticket.',
                embeds: [],
                components: []
            });
        }
    }

    // M√©thodes utilitaires
    getPriorityDisplay(priority) {
        const priorities = {
            critical: 'üî¥ **Critique**',
            high: 'üü° **√âlev√©e**',
            medium: 'üü† **Moyenne**',
            low: 'üü¢ **Normale**'
        };
        return priorities[priority] || 'üü¢ **Normale**';
    }

    getRequiredInfo(type) {
        const requirements = {
            support: '‚Ä¢ Description d√©taill√©e du probl√®me\n‚Ä¢ √âtapes pour reproduire le bug\n‚Ä¢ Captures d\'√©cran si possible',
            general: '‚Ä¢ Question pr√©cise\n‚Ä¢ Contexte de votre demande\n‚Ä¢ Informations compl√©mentaires',
            urgent: '‚Ä¢ Nature de l\'urgence\n‚Ä¢ Impact sur votre activit√©\n‚Ä¢ Preuves si n√©cessaire',
            partnership: '‚Ä¢ Pr√©sentation de votre projet\n‚Ä¢ Type de partenariat souhait√©\n‚Ä¢ Vos coordonn√©es',
            suggestion: '‚Ä¢ Description de votre id√©e\n‚Ä¢ B√©n√©fices attendus\n‚Ä¢ Exemples concrets',
            appeal: '‚Ä¢ Sanction concern√©e\n‚Ä¢ Motifs de contestation\n‚Ä¢ Preuves √† l\'appui'
        };
        return requirements[type] || '‚Ä¢ Informations d√©taill√©es sur votre demande';
    }

    getTicketTips(type) {
        const tips = {
            support: '‚Ä¢ D√©crivez les √©tapes exactes qui causent le probl√®me\n‚Ä¢ Mentionnez votre syst√®me d\'exploitation\n‚Ä¢ Joignez des captures d\'√©cran',
            general: '‚Ä¢ Soyez pr√©cis dans votre question\n‚Ä¢ Donnez le contexte n√©cessaire\n‚Ä¢ Mentionnez ce que vous avez d√©j√† essay√©',
            urgent: '‚Ä¢ Expliquez pourquoi c\'est urgent\n‚Ä¢ D√©crivez l\'impact imm√©diat\n‚Ä¢ Restez disponible pour un contact rapide',
            partnership: '‚Ä¢ Pr√©sentez clairement votre projet\n‚Ä¢ Expliquez les b√©n√©fices mutuels\n‚Ä¢ Proposez des modalit√©s concr√®tes',
            suggestion: '‚Ä¢ Expliquez le probl√®me que √ßa r√©soudrait\n‚Ä¢ Donnez des exemples d\'utilisation\n‚Ä¢ Proposez une impl√©mentation',
            appeal: '‚Ä¢ Restez respectueux et factuel\n‚Ä¢ Apportez des preuves concr√®tes\n‚Ä¢ Expliquez votre version des faits'
        };
        return tips[type] || '‚Ä¢ Soyez pr√©cis et d√©taill√© dans votre demande';
    }

    async getNextTicketNumber() {
        // Impl√©mentation pour obtenir le prochain num√©ro de ticket
        const lastTicket = await this.db.getLastTicket();
        return lastTicket ? lastTicket.number + 1 : 1001;
    }

    async getTodayResolvedTickets() {
        // Impl√©mentation pour obtenir le nombre de tickets r√©solus aujourd'hui
        const today = new Date().toISOString().split('T')[0];
        const resolved = await this.db.getResolvedTicketsToday(today);
        return resolved || 0;
    }

    // Gestionnaires d'actions pour les boutons
    async handleQuickAction(interaction) {
        const action = interaction.customId;

        switch (action) {
            case 'ticket_faq':
                await this.showFAQ(interaction);
                break;
            case 'ticket_status':
                await this.showSupportStatus(interaction);
                break;
            case 'ticket_my_tickets':
                await this.showUserTickets(interaction);
                break;
            case 'ticket_emergency':
                await this.handleEmergency(interaction);
                break;
        }
    }

    async showFAQ(interaction) {
        const faqEmbed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('üìö **Questions Fr√©quemment Pos√©es**')
            .setDescription('Voici les r√©ponses aux questions les plus courantes :')
            .addFields(
                { name: '‚ùì Comment cr√©er un ticket ?', value: 'Utilisez le menu d√©roulant ci-dessus pour s√©lectionner votre type de demande.', inline: false },
                { name: '‚è±Ô∏è Combien de temps pour une r√©ponse ?', value: 'Nos temps de r√©ponse varient selon la priorit√©, de 30 minutes √† 24 heures maximum.', inline: false },
                { name: 'üîÑ Puis-je modifier mon ticket ?', value: 'Oui, vous pouvez ajouter des informations √† tout moment dans votre ticket.', inline: false },
                { name: 'üë• Puis-je ajouter quelqu\'un √† mon ticket ?', value: 'Utilisez le bouton "Ajouter Utilisateur" dans votre ticket.', inline: false }
            )
            .setFooter({ text: 'Si votre question n\'est pas list√©e, cr√©ez un ticket !' });

        await interaction.reply({ embeds: [faqEmbed], ephemeral: true });
    }

    async showSupportStatus(interaction) {
        const statusEmbed = new EmbedBuilder()
            .setColor('#2ecc71')
            .setTitle('üìä **Statut du Support en Temps R√©el**')
            .addFields(
                { name: 'üü¢ **Statut Global**', value: 'Tous les services op√©rationnels', inline: true },
                { name: 'üë• **√âquipe Disponible**', value: '8/10 agents en ligne', inline: true },
                { name: 'üìà **Charge Actuelle**', value: 'Normale (65%)', inline: true },
                { name: '‚è±Ô∏è **Temps de R√©ponse Moyen**', value: '15 minutes', inline: true },
                { name: 'üéØ **Tickets en Attente**', value: '12 tickets', inline: true },
                { name: '‚úÖ **R√©solus Aujourd\'hui**', value: `${await this.getTodayResolvedTickets()} tickets`, inline: true }
            )
            .setFooter({ text: 'Derni√®re mise √† jour il y a 2 minutes' })
            .setTimestamp();

        await interaction.reply({ embeds: [statusEmbed], ephemeral: true });
    }

    async showUserTickets(interaction) {
        const userTickets = await this.db.getUserTickets(interaction.user.id);
        
        const ticketsEmbed = new EmbedBuilder()
            .setColor('#9b59b6')
            .setTitle('üìã **Vos Tickets**')
            .setDescription(userTickets.length > 0 ? 
                userTickets.map(ticket => 
                    `**#${ticket.number}** - ${this.ticketTypes[ticket.type]?.emoji} ${this.ticketTypes[ticket.type]?.name}\n` +
                    `Status: ${ticket.status === 'open' ? 'üü¢ Ouvert' : 'üî¥ Ferm√©'} ‚Ä¢ <t:${Math.floor(new Date(ticket.createdAt).getTime() / 1000)}:R>`
                ).join('\n\n') : 
                'Vous n\'avez aucun ticket pour le moment.'
            )
            .setFooter({ text: `Total: ${userTickets.length} ticket(s)` });

        await interaction.reply({ embeds: [ticketsEmbed], ephemeral: true });
    }

    async handleEmergency(interaction) {
        const emergencyEmbed = new EmbedBuilder()
            .setColor('#e74c3c')
            .setTitle('üö® **URGENCE D√âTECT√âE**')
            .setDescription(`
**‚ö†Ô∏è Vous avez signal√© une urgence !**

Notre √©quipe d'intervention rapide a √©t√© **imm√©diatement notifi√©e**.

**üìû Contact Direct :**
‚Ä¢ **Discord :** <@&${process.env.EMERGENCY_ROLE_ID}>
‚Ä¢ **Temps de r√©ponse :** < 5 minutes
‚Ä¢ **Disponibilit√© :** 24h/7j

**üéØ Que faire maintenant :**
1Ô∏è‚É£ Cr√©ez un ticket d'urgence ci-dessous
2Ô∏è‚É£ D√©crivez pr√©cis√©ment la situation
3Ô∏è‚É£ Restez disponible pour un contact imm√©diat

**‚ö° Votre demande sera trait√©e en priorit√© absolue.**`)
            .setFooter({ text: '√âquipe d\'intervention notifi√©e ‚Ä¢ R√©ponse imminente' })
            .setTimestamp();

        const emergencyButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('create_ticket_urgent')
                    .setLabel('CR√âER TICKET D\'URGENCE')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('üö®')
            );

        await interaction.reply({
            embeds: [emergencyEmbed],
            components: [emergencyButton],
            ephemeral: true
        });

        // Notifier l'√©quipe d'urgence
        const emergencyChannel = interaction.guild.channels.cache.get(process.env.EMERGENCY_CHANNEL_ID);
        if (emergencyChannel) {
            await emergencyChannel.send({
                content: `üö® **ALERTE URGENCE** - ${interaction.user} a d√©clench√© une urgence !`,
                embeds: [emergencyEmbed]
            });
        }
    }
}

export default TicketManager;
