import { REST, Routes } from 'discord.js';
import { config } from 'dotenv';
import { readdirSync, statSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath, pathToFileURL } from 'url';
import chalk from 'chalk';

// Configuration
config();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const commands = [];
const commandsPath = join(__dirname, 'commands');

// Fonction pour charger les commandes r√©cursivement
async function loadCommands(dir = commandsPath, baseDir = commandsPath) {
    const files = readdirSync(dir);
    
    for (const file of files) {
        const filePath = join(dir, file);
        const stat = statSync(filePath);
        
        if (stat.isDirectory()) {
            await loadCommands(filePath, baseDir);
        } else if (file.endsWith('.js')) {
            try {
                const command = await import(pathToFileURL(filePath).href);
                const commandData = command.default || command;
                
                if ('data' in commandData && 'execute' in commandData) {
                    commands.push(commandData.data.toJSON());
                    console.log(chalk.green('‚úÖ') + ` Commande charg√©e: ${chalk.cyan(commandData.data.name)}`);
                } else {
                    console.log(chalk.yellow('‚ö†Ô∏è') + ` Commande ${chalk.red(file)} manque 'data' ou 'execute'`);
                }
            } catch (error) {
                console.log(chalk.red('‚ùå') + ` Erreur lors du chargement de ${chalk.red(file)}:`, error.message);
            }
        }
    }
}

// Fonction avec timeout pour les requ√™tes API
async function withTimeout(promise, timeoutMs, description) {
    return Promise.race([
        promise,
        new Promise((_, reject) => 
            setTimeout(() => reject(new Error(`Timeout (${timeoutMs}ms) pour: ${description}`)), timeoutMs)
        )
    ]);
}

async function deployQuickCommands() {
    console.log(chalk.blue('üöÄ D√©ploiement RAPIDE des commandes Discord...'));
    console.log(chalk.gray('=' .repeat(60)));
    
    try {
        const rest = new REST().setToken(process.env.DISCORD_TOKEN);
        
        // √âtape 1: Charger les commandes
        console.log(chalk.blue('üì¶ Chargement des commandes...'));
        await loadCommands();
        
        if (commands.length === 0) {
            console.log(chalk.red('‚ùå Aucune commande trouv√©e !'));
            process.exit(1);
        }
        
        console.log(chalk.gray('=' .repeat(60)));
        console.log(chalk.blue(`üì¶ ${commands.length} commande(s) √† d√©ployer...`));
        
        // √âtape 2: D√©ployer sur le serveur sp√©cifique UNIQUEMENT (plus rapide)
        if (process.env.GUILD_ID) {
            console.log(chalk.yellow('‚ö° D√©ploiement sur le serveur configur√©...'));
            try {
                const guildData = await withTimeout(
                    rest.put(
                        Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
                        { body: commands }
                    ),
                    15000, // 15 secondes max
                    'd√©ploiement serveur'
                );
                
                console.log(chalk.green(`‚úÖ ${guildData.length} commande(s) d√©ploy√©e(s) sur le serveur !`));
                
                // Afficher la liste des commandes d√©ploy√©es
                console.log(chalk.gray('=' .repeat(60)));
                console.log(chalk.blue('üìã Commandes d√©ploy√©es:'));
                
                guildData.forEach((command, index) => {
                    const emoji = getCommandEmoji(command.name);
                    console.log(chalk.gray(`${index + 1}.`) + ` ${emoji} ${chalk.cyan(command.name)} - ${chalk.gray(command.description)}`);
                });
                
                console.log(chalk.gray('=' .repeat(60)));
                console.log(chalk.green('üéâ D√âPLOIEMENT RAPIDE R√âUSSI !'));
                console.log(chalk.yellow('‚ö° Les commandes sont disponibles imm√©diatement sur votre serveur !'));
                console.log(chalk.blue('üí° Astuce: Utilisez /help pour voir toutes les commandes'));
                
            } catch (error) {
                console.log(chalk.red(`‚ùå Erreur sur le serveur configur√©: ${error.message}`));
                throw error;
            }
        } else {
            console.log(chalk.yellow('‚ö†Ô∏è GUILD_ID non d√©fini, d√©ploiement global uniquement...'));
            
            // D√©ploiement global avec timeout court
            const globalData = await withTimeout(
                rest.put(
                    Routes.applicationCommands(process.env.CLIENT_ID),
                    { body: commands }
                ),
                20000, // 20 secondes max
                'd√©ploiement global'
            );
            
            console.log(chalk.green(`‚úÖ ${globalData.length} commande(s) d√©ploy√©e(s) globalement !`));
        }
        
    } catch (error) {
        console.error(chalk.red('‚ùå Erreur lors du d√©ploiement:'), error.message);
        console.log(chalk.yellow('üí° Suggestions:'));
        console.log(chalk.yellow('  ‚Ä¢ V√©rifiez votre connexion internet'));
        console.log(chalk.yellow('  ‚Ä¢ V√©rifiez que le token Discord est valide'));
        console.log(chalk.yellow('  ‚Ä¢ V√©rifiez que GUILD_ID est correct'));
        process.exit(1);
    }
    
    // Terminer proprement
    console.log(chalk.blue('‚ú® Script termin√© !'));
    process.exit(0);
}

// Fonction pour obtenir un emoji bas√© sur le nom de la commande
function getCommandEmoji(commandName) {
    const emojiMap = {
        'help': '‚ùì',
        'ping': 'üèì',
        'setup-tickets': 'üé´',
        'ticket-stats': 'üìä',
        'analyze-server': 'üîç',
        'check-permissions': 'üîê',
        'deploy': 'üöÄ',
        'reglement': 'üìã',
        'setup-permissions': '‚öôÔ∏è',
        'ticket': 'üé´'
    };
    
    return emojiMap[commandName] || '‚ö°';
}

// Gestion propre des signaux d'arr√™t
process.on('SIGINT', () => {
    console.log(chalk.yellow('\n‚ö†Ô∏è Arr√™t demand√© par l\'utilisateur'));
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log(chalk.yellow('\n‚ö†Ô∏è Arr√™t du processus'));
    process.exit(0);
});

// Lancer le d√©ploiement rapide
deployQuickCommands();
